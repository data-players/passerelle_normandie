{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport useQuery from './useQuery';\n/**\n * Fetch the data provider and pass the result to a child function\n *\n * @param {Function} children Must be a function which will be called with an object containing the following keys: data, loading and error\n * @param {string} type The method called on the data provider, e.g. 'getList', 'getOne'. Can also be a custom method if the dataProvider supports is.\n * @param {string} resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} payload The payload object, e.g; { post_id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) } }\n *\n * This component also supports legacy side effects (e.g. { onSuccess: { refresh: true } })\n *\n * @example\n *\n * const UserProfile = ({ record }) => (\n *     <Query type=\"getOne\" resource=\"users\" payload={{ id: record.id }}>\n *         {({ data, loading, error }) => {\n *             if (loading) { return <Loading />; }\n *             if (error) { return <p>ERROR</p>; }\n *             return <div>User {data.username}</div>;\n *         }}\n *     </Query>\n * );\n *\n * @example\n *\n * const payload = {\n *    pagination: { page: 1, perPage: 10 },\n *    sort: { field: 'username', order: 'ASC' },\n * };\n * const UserList = () => (\n *     <Query type=\"getList\" resource=\"users\" payload={payload}>\n *         {({ data, total, loading, error }) => {\n *             if (loading) { return <Loading />; }\n *             if (error) { return <p>ERROR</p>; }\n *             return (\n *                 <div>\n *                     <p>Total users: {total}</p>\n *                     <ul>\n *                         {data.map(user => <li key={user.username}>{user.username}</li>)}\n *                     </ul>\n *                 </div>\n *             );\n *         }}\n *     </Query>\n * );\n */\n\nvar Query = function (_a) {\n  var children = _a.children,\n      type = _a.type,\n      resource = _a.resource,\n      payload = _a.payload,\n      // Provides an undefined onSuccess just so the key `onSuccess` is defined\n  // This is used to detect options in useDataProvider\n  _b = _a.options,\n      // Provides an undefined onSuccess just so the key `onSuccess` is defined\n  // This is used to detect options in useDataProvider\n  options = _b === void 0 ? {\n    onSuccess: undefined\n  } : _b;\n  return children(useQuery({\n    type: type,\n    resource: resource,\n    payload: payload\n  }, __assign(__assign({}, options), {\n    withDeclarativeSideEffectsSupport: true\n  })));\n};\n\nexport default Query;","map":{"version":3,"sources":["/app/node_modules/ra-core/esm/dataProvider/Query.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","useQuery","Query","_a","children","type","resource","payload","_b","options","onSuccess","undefined","withDeclarativeSideEffectsSupport"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAOO,QAAP,MAAqB,YAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK,GAAG,UAAUC,EAAV,EAAc;AACtB,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,IAAI,GAAGF,EAAE,CAACE,IAAtC;AAAA,MAA4CC,QAAQ,GAAGH,EAAE,CAACG,QAA1D;AAAA,MAAoEC,OAAO,GAAGJ,EAAE,CAACI,OAAjF;AAAA,MACA;AACA;AACAC,EAAAA,EAAE,GAAGL,EAAE,CAACM,OAHR;AAAA,MAIA;AACA;AACAA,EAAAA,OAAO,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB;AAAEE,IAAAA,SAAS,EAAEC;AAAb,GAAhB,GAA2CH,EANrD;AAOA,SAAOJ,QAAQ,CAACH,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEA,IAAR;AAAcC,IAAAA,QAAQ,EAAEA,QAAxB;AAAkCC,IAAAA,OAAO,EAAEA;AAA3C,GAAD,EAAuDpB,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKsB,OAAL,CAAT,EAAwB;AAAEG,IAAAA,iCAAiC,EAAE;AAArC,GAAxB,CAA/D,CAAT,CAAf;AACH,CATD;;AAUA,eAAeV,KAAf","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport useQuery from './useQuery';\n/**\n * Fetch the data provider and pass the result to a child function\n *\n * @param {Function} children Must be a function which will be called with an object containing the following keys: data, loading and error\n * @param {string} type The method called on the data provider, e.g. 'getList', 'getOne'. Can also be a custom method if the dataProvider supports is.\n * @param {string} resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} payload The payload object, e.g; { post_id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) } }\n *\n * This component also supports legacy side effects (e.g. { onSuccess: { refresh: true } })\n *\n * @example\n *\n * const UserProfile = ({ record }) => (\n *     <Query type=\"getOne\" resource=\"users\" payload={{ id: record.id }}>\n *         {({ data, loading, error }) => {\n *             if (loading) { return <Loading />; }\n *             if (error) { return <p>ERROR</p>; }\n *             return <div>User {data.username}</div>;\n *         }}\n *     </Query>\n * );\n *\n * @example\n *\n * const payload = {\n *    pagination: { page: 1, perPage: 10 },\n *    sort: { field: 'username', order: 'ASC' },\n * };\n * const UserList = () => (\n *     <Query type=\"getList\" resource=\"users\" payload={payload}>\n *         {({ data, total, loading, error }) => {\n *             if (loading) { return <Loading />; }\n *             if (error) { return <p>ERROR</p>; }\n *             return (\n *                 <div>\n *                     <p>Total users: {total}</p>\n *                     <ul>\n *                         {data.map(user => <li key={user.username}>{user.username}</li>)}\n *                     </ul>\n *                 </div>\n *             );\n *         }}\n *     </Query>\n * );\n */\nvar Query = function (_a) {\n    var children = _a.children, type = _a.type, resource = _a.resource, payload = _a.payload, \n    // Provides an undefined onSuccess just so the key `onSuccess` is defined\n    // This is used to detect options in useDataProvider\n    _b = _a.options, \n    // Provides an undefined onSuccess just so the key `onSuccess` is defined\n    // This is used to detect options in useDataProvider\n    options = _b === void 0 ? { onSuccess: undefined } : _b;\n    return children(useQuery({ type: type, resource: resource, payload: payload }, __assign(__assign({}, options), { withDeclarativeSideEffectsSupport: true })));\n};\nexport default Query;\n"]},"metadata":{},"sourceType":"module"}