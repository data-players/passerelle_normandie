{"ast":null,"code":"/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict'; // TODO: convert to ES6 iterable\n\nmodule.exports = class Permutator {\n  /**\n   * A Permutator iterates over all possible permutations of the given array\n   * of elements.\n   *\n   * @param list the array of elements to iterate over.\n   */\n  constructor(list) {\n    // original array\n    this.list = list.sort(); // indicates whether there are more permutations\n\n    this.done = false; // directional info for permutation algorithm\n\n    this.left = {};\n\n    for (let i = 0; i < list.length; ++i) {\n      this.left[list[i]] = true;\n    }\n  }\n  /**\n   * Returns true if there is another permutation.\n   *\n   * @return true if there is another permutation, false if not.\n   */\n\n\n  hasNext() {\n    return !this.done;\n  }\n  /**\n   * Gets the next permutation. Call hasNext() to ensure there is another one\n   * first.\n   *\n   * @return the next permutation.\n   */\n\n\n  next() {\n    // copy current permutation\n    const rval = this.list.slice();\n    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter\n     permutation algorithm. */\n    // get largest mobile element k\n    // (mobile: element is greater than the one it is looking at)\n\n    let k = null;\n    let pos = 0;\n    const length = this.list.length;\n\n    for (let i = 0; i < length; ++i) {\n      const element = this.list[i];\n      const left = this.left[element];\n\n      if ((k === null || element > k) && (left && i > 0 && element > this.list[i - 1] || !left && i < length - 1 && element > this.list[i + 1])) {\n        k = element;\n        pos = i;\n      }\n    } // no more permutations\n\n\n    if (k === null) {\n      this.done = true;\n    } else {\n      // swap k and the element it is looking at\n      const swap = this.left[k] ? pos - 1 : pos + 1;\n      this.list[pos] = this.list[swap];\n      this.list[swap] = k; // reverse the direction of all elements larger than k\n\n      for (let i = 0; i < length; ++i) {\n        if (this.list[i] > k) {\n          this.left[this.list[i]] = !this.left[this.list[i]];\n        }\n      }\n    }\n\n    return rval;\n  }\n\n};","map":{"version":3,"sources":["/app/node_modules/rdf-canonize/lib/Permutator.js"],"names":["module","exports","Permutator","constructor","list","sort","done","left","i","length","hasNext","next","rval","slice","k","pos","element","swap"],"mappings":"AAAA;AACA;AACA;AACA,a,CAEA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,UAAN,CAAiB;AAChC;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB;AACA,SAAKA,IAAL,GAAYA,IAAI,CAACC,IAAL,EAAZ,CAFgB,CAGhB;;AACA,SAAKC,IAAL,GAAY,KAAZ,CAJgB,CAKhB;;AACA,SAAKC,IAAL,GAAY,EAAZ;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,IAAI,CAACK,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;AACnC,WAAKD,IAAL,CAAUH,IAAI,CAACI,CAAD,CAAd,IAAqB,IAArB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,OAAO,GAAG;AACR,WAAO,CAAC,KAAKJ,IAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,IAAI,GAAG;AACL;AACA,UAAMC,IAAI,GAAG,KAAKR,IAAL,CAAUS,KAAV,EAAb;AAEA;AACJ;AAEI;AACA;;AACA,QAAIC,CAAC,GAAG,IAAR;AACA,QAAIC,GAAG,GAAG,CAAV;AACA,UAAMN,MAAM,GAAG,KAAKL,IAAL,CAAUK,MAAzB;;AACA,SAAI,IAAID,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGC,MAAnB,EAA2B,EAAED,CAA7B,EAAgC;AAC9B,YAAMQ,OAAO,GAAG,KAAKZ,IAAL,CAAUI,CAAV,CAAhB;AACA,YAAMD,IAAI,GAAG,KAAKA,IAAL,CAAUS,OAAV,CAAb;;AACA,UAAG,CAACF,CAAC,KAAK,IAAN,IAAcE,OAAO,GAAGF,CAAzB,MACCP,IAAI,IAAIC,CAAC,GAAG,CAAZ,IAAiBQ,OAAO,GAAG,KAAKZ,IAAL,CAAUI,CAAC,GAAG,CAAd,CAA5B,IACA,CAACD,IAAD,IAASC,CAAC,GAAIC,MAAM,GAAG,CAAvB,IAA6BO,OAAO,GAAG,KAAKZ,IAAL,CAAUI,CAAC,GAAG,CAAd,CAFvC,CAAH,EAE8D;AAC5DM,QAAAA,CAAC,GAAGE,OAAJ;AACAD,QAAAA,GAAG,GAAGP,CAAN;AACD;AACF,KArBI,CAuBL;;;AACA,QAAGM,CAAC,KAAK,IAAT,EAAe;AACb,WAAKR,IAAL,GAAY,IAAZ;AACD,KAFD,MAEO;AACL;AACA,YAAMW,IAAI,GAAG,KAAKV,IAAL,CAAUO,CAAV,IAAeC,GAAG,GAAG,CAArB,GAAyBA,GAAG,GAAG,CAA5C;AACA,WAAKX,IAAL,CAAUW,GAAV,IAAiB,KAAKX,IAAL,CAAUa,IAAV,CAAjB;AACA,WAAKb,IAAL,CAAUa,IAAV,IAAkBH,CAAlB,CAJK,CAML;;AACA,WAAI,IAAIN,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGC,MAAnB,EAA2B,EAAED,CAA7B,EAAgC;AAC9B,YAAG,KAAKJ,IAAL,CAAUI,CAAV,IAAeM,CAAlB,EAAqB;AACnB,eAAKP,IAAL,CAAU,KAAKH,IAAL,CAAUI,CAAV,CAAV,IAA0B,CAAC,KAAKD,IAAL,CAAU,KAAKH,IAAL,CAAUI,CAAV,CAAV,CAA3B;AACD;AACF;AACF;;AAED,WAAOI,IAAP;AACD;;AA3E+B,CAAlC","sourcesContent":["/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\n// TODO: convert to ES6 iterable\n\nmodule.exports = class Permutator {\n  /**\n   * A Permutator iterates over all possible permutations of the given array\n   * of elements.\n   *\n   * @param list the array of elements to iterate over.\n   */\n  constructor(list) {\n    // original array\n    this.list = list.sort();\n    // indicates whether there are more permutations\n    this.done = false;\n    // directional info for permutation algorithm\n    this.left = {};\n    for(let i = 0; i < list.length; ++i) {\n      this.left[list[i]] = true;\n    }\n  }\n\n  /**\n   * Returns true if there is another permutation.\n   *\n   * @return true if there is another permutation, false if not.\n   */\n  hasNext() {\n    return !this.done;\n  }\n\n  /**\n   * Gets the next permutation. Call hasNext() to ensure there is another one\n   * first.\n   *\n   * @return the next permutation.\n   */\n  next() {\n    // copy current permutation\n    const rval = this.list.slice();\n\n    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter\n     permutation algorithm. */\n\n    // get largest mobile element k\n    // (mobile: element is greater than the one it is looking at)\n    let k = null;\n    let pos = 0;\n    const length = this.list.length;\n    for(let i = 0; i < length; ++i) {\n      const element = this.list[i];\n      const left = this.left[element];\n      if((k === null || element > k) &&\n        ((left && i > 0 && element > this.list[i - 1]) ||\n        (!left && i < (length - 1) && element > this.list[i + 1]))) {\n        k = element;\n        pos = i;\n      }\n    }\n\n    // no more permutations\n    if(k === null) {\n      this.done = true;\n    } else {\n      // swap k and the element it is looking at\n      const swap = this.left[k] ? pos - 1 : pos + 1;\n      this.list[pos] = this.list[swap];\n      this.list[swap] = k;\n\n      // reverse the direction of all elements larger than k\n      for(let i = 0; i < length; ++i) {\n        if(this.list[i] > k) {\n          this.left[this.list[i]] = !this.left[this.list[i]];\n        }\n      }\n    }\n\n    return rval;\n  }\n};\n\n"]},"metadata":{},"sourceType":"script"}