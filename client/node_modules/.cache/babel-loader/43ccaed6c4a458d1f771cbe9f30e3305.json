{"ast":null,"code":"/**\n * An implementation of the RDF Dataset Normalization specification.\n * This library works in the browser and node.js.\n *\n * BSD 3-Clause License\n * Copyright (c) 2016-2017 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\n\nconst util = require('./util');\n\nconst URDNA2015 = require('./URDNA2015');\n\nconst URGNA2012 = require('./URGNA2012');\n\nconst URDNA2015Sync = require('./URDNA2015Sync');\n\nconst URGNA2012Sync = require('./URGNA2012Sync'); // optional native support\n\n\nlet rdfCanonizeNative;\n\ntry {\n  rdfCanonizeNative = require('rdf-canonize-native');\n} catch (e) {}\n\nconst api = {};\nmodule.exports = api; // expose helpers\n\napi.NQuads = require('./NQuads');\napi.IdentifierIssuer = require('./IdentifierIssuer');\n/**\n * Get or set native API.\n *\n * @param api the native API.\n *\n * @return the currently set native API.\n */\n\napi._rdfCanonizeNative = function (api) {\n  if (api) {\n    rdfCanonizeNative = api;\n  }\n\n  return rdfCanonizeNative;\n};\n/**\n * Asynchronously canonizes an RDF dataset.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n * @param [callback(err, canonical)] called once the operation completes.\n *\n * @return a Promise that resolves to the canonicalized RDF Dataset.\n */\n\n\napi.canonize = util.callbackify(async function (dataset, options) {\n  let callback;\n  const promise = new Promise((resolve, reject) => {\n    callback = (err, canonical) => {\n      if (err) {\n        return reject(err);\n      }\n      /*if(options.format === 'application/n-quads') {\n        canonical = canonical.join('');\n      }\n      canonical = _parseNQuads(canonical.join(''));*/\n\n\n      resolve(canonical);\n    };\n  }); // back-compat with legacy dataset\n\n  if (!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  } // TODO: convert algorithms to Promise-based async\n\n\n  if (options.useNative) {\n    if (rdfCanonizeNative) {\n      rdfCanonizeNative.canonize(dataset, options, callback);\n    } else {\n      throw new Error('rdf-canonize-native not available');\n    }\n  } else {\n    if (options.algorithm === 'URDNA2015') {\n      new URDNA2015(options).main(dataset, callback);\n    } else if (options.algorithm === 'URGNA2012') {\n      new URGNA2012(options).main(dataset, callback);\n    } else if (!('algorithm' in options)) {\n      throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n    } else {\n      throw new Error('Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n    }\n  }\n\n  return promise;\n});\n/**\n * Synchronously canonizes an RDF dataset.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n *\n * @return the RDF dataset in canonical form.\n */\n\napi.canonizeSync = function (dataset, options) {\n  // back-compat with legacy dataset\n  if (!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n\n  if (options.useNative) {\n    if (rdfCanonizeNative) {\n      return rdfCanonizeNative.canonizeSync(dataset, options);\n    }\n\n    throw new Error('rdf-canonize-native not available');\n  }\n\n  if (options.algorithm === 'URDNA2015') {\n    return new URDNA2015Sync(options).main(dataset);\n  } else if (options.algorithm === 'URGNA2012') {\n    return new URGNA2012Sync(options).main(dataset);\n  }\n\n  if (!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n\n  throw new Error('Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};","map":{"version":3,"sources":["/app/node_modules/rdf-canonize/lib/index.js"],"names":["util","require","URDNA2015","URGNA2012","URDNA2015Sync","URGNA2012Sync","rdfCanonizeNative","e","api","module","exports","NQuads","IdentifierIssuer","_rdfCanonizeNative","canonize","callbackify","dataset","options","callback","promise","Promise","resolve","reject","err","canonical","Array","isArray","legacyDatasetToQuads","useNative","Error","algorithm","main","canonizeSync"],"mappings":"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","sourcesContent":["/**\n * An implementation of the RDF Dataset Normalization specification.\n * This library works in the browser and node.js.\n *\n * BSD 3-Clause License\n * Copyright (c) 2016-2017 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\n\nconst util = require('./util');\nconst URDNA2015 = require('./URDNA2015');\nconst URGNA2012 = require('./URGNA2012');\nconst URDNA2015Sync = require('./URDNA2015Sync');\nconst URGNA2012Sync = require('./URGNA2012Sync');\n\n// optional native support\nlet rdfCanonizeNative;\ntry {\n  rdfCanonizeNative = require('rdf-canonize-native');\n} catch(e) {}\n\nconst api = {};\nmodule.exports = api;\n\n// expose helpers\napi.NQuads = require('./NQuads');\napi.IdentifierIssuer = require('./IdentifierIssuer');\n\n/**\n * Get or set native API.\n *\n * @param api the native API.\n *\n * @return the currently set native API.\n */\napi._rdfCanonizeNative = function(api) {\n  if(api) {\n    rdfCanonizeNative = api;\n  }\n  return rdfCanonizeNative;\n};\n\n/**\n * Asynchronously canonizes an RDF dataset.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n * @param [callback(err, canonical)] called once the operation completes.\n *\n * @return a Promise that resolves to the canonicalized RDF Dataset.\n */\napi.canonize = util.callbackify(async function(dataset, options) {\n  let callback;\n  const promise = new Promise((resolve, reject) => {\n    callback = (err, canonical) => {\n      if(err) {\n        return reject(err);\n      }\n\n      /*if(options.format === 'application/n-quads') {\n        canonical = canonical.join('');\n      }\n      canonical = _parseNQuads(canonical.join(''));*/\n\n      resolve(canonical);\n    };\n  });\n\n  // back-compat with legacy dataset\n  if(!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n\n  // TODO: convert algorithms to Promise-based async\n  if(options.useNative) {\n    if(rdfCanonizeNative) {\n      rdfCanonizeNative.canonize(dataset, options, callback);\n    } else {\n      throw new Error('rdf-canonize-native not available');\n    }\n  } else {\n    if(options.algorithm === 'URDNA2015') {\n      new URDNA2015(options).main(dataset, callback);\n    } else if(options.algorithm === 'URGNA2012') {\n      new URGNA2012(options).main(dataset, callback);\n    } else if(!('algorithm' in options)) {\n      throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n    } else {\n      throw new Error(\n        'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n    }\n  }\n\n  return promise;\n});\n\n/**\n * Synchronously canonizes an RDF dataset.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n *\n * @return the RDF dataset in canonical form.\n */\napi.canonizeSync = function(dataset, options) {\n  // back-compat with legacy dataset\n  if(!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n\n  if(options.useNative) {\n    if(rdfCanonizeNative) {\n      return rdfCanonizeNative.canonizeSync(dataset, options);\n    }\n    throw new Error('rdf-canonize-native not available');\n  }\n  if(options.algorithm === 'URDNA2015') {\n    return new URDNA2015Sync(options).main(dataset);\n  } else if(options.algorithm === 'URGNA2012') {\n    return new URGNA2012Sync(options).main(dataset);\n  }\n  if(!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n  throw new Error(\n    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};\n"]},"metadata":{},"sourceType":"script"}