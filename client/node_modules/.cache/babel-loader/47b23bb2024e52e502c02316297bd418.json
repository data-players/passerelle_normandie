{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport React, { useCallback, useEffect, useRef, useMemo, isValidElement } from 'react';\nimport Downshift from 'downshift';\nimport classNames from 'classnames';\nimport get from 'lodash/get';\nimport { TextField, Chip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useInput, FieldTitle, useSuggestions, warning } from 'ra-core';\nimport InputHelperText from './InputHelperText';\nimport AutocompleteSuggestionList from './AutocompleteSuggestionList';\nimport AutocompleteSuggestionItem from './AutocompleteSuggestionItem';\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteArrayInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteArrayInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteArrayInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` prop\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue);\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <SelectInput source=\"gender\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteArrayInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <TextField> component\n *\n * @example\n * <AutocompleteArrayInput source=\"author_id\" options={{ color: 'secondary' }} />\n */\n\nvar AutocompleteArrayInput = function (props) {\n  var allowDuplicates = props.allowDuplicates,\n      allowEmpty = props.allowEmpty,\n      classesOverride = props.classes,\n      _a = props.choices,\n      choices = _a === void 0 ? [] : _a,\n      disabled = props.disabled,\n      emptyText = props.emptyText,\n      emptyValue = props.emptyValue,\n      format = props.format,\n      fullWidth = props.fullWidth,\n      helperText = props.helperText,\n      idOverride = props.id,\n      inputOverride = props.input,\n      isRequiredOverride = props.isRequired,\n      label = props.label,\n      limitChoicesToValue = props.limitChoicesToValue,\n      _b = props.margin,\n      margin = _b === void 0 ? 'dense' : _b,\n      matchSuggestion = props.matchSuggestion,\n      metaOverride = props.meta,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      _c = props.options,\n      _d = _c === void 0 ? {} : _c,\n      suggestionsContainerProps = _d.suggestionsContainerProps,\n      labelProps = _d.labelProps,\n      InputProps = _d.InputProps,\n      options = __rest(_d, [\"suggestionsContainerProps\", \"labelProps\", \"InputProps\"]),\n      _e = props.optionText,\n      optionText = _e === void 0 ? 'name' : _e,\n      _f = props.optionValue,\n      optionValue = _f === void 0 ? 'id' : _f,\n      parse = props.parse,\n      resource = props.resource,\n      setFilter = props.setFilter,\n      shouldRenderSuggestionsOverride = props.shouldRenderSuggestions,\n      source = props.source,\n      suggestionLimit = props.suggestionLimit,\n      _g = props.translateChoice,\n      translateChoice = _g === void 0 ? true : _g,\n      validate = props.validate,\n      _h = props.variant,\n      variant = _h === void 0 ? 'filled' : _h,\n      rest = __rest(props, [\"allowDuplicates\", \"allowEmpty\", \"classes\", \"choices\", \"disabled\", \"emptyText\", \"emptyValue\", \"format\", \"fullWidth\", \"helperText\", \"id\", \"input\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"margin\", \"matchSuggestion\", \"meta\", \"onBlur\", \"onChange\", \"onFocus\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"setFilter\", \"shouldRenderSuggestions\", \"source\", \"suggestionLimit\", \"translateChoice\", \"validate\", \"variant\"]);\n\n  warning(isValidElement(optionText) && !matchSuggestion, \"If the optionText prop is a React element, you must also specify the matchSuggestion prop:\\n<AutocompleteArrayInput\\n    matchSuggestion={(filterValue, suggestion) => true}\\n/>\\n        \");\n  warning(source === undefined, \"If you're not wrapping the AutocompleteArrayInput inside a ReferenceArrayInput, you must provide the source prop\");\n  warning(choices === undefined, \"If you're not wrapping the AutocompleteArrayInput inside a ReferenceArrayInput, you must provide the choices prop\");\n  var classes = useStyles(props);\n  var inputEl = useRef();\n  var anchorEl = useRef();\n\n  var _j = useInput(__assign({\n    format: format,\n    id: idOverride,\n    input: inputOverride,\n    meta: metaOverride,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      id = _j.id,\n      input = _j.input,\n      isRequired = _j.isRequired,\n      _k = _j.meta,\n      touched = _k.touched,\n      error = _k.error;\n\n  var values = input.value || emptyArray;\n\n  var _l = React.useState(''),\n      filterValue = _l[0],\n      setFilterValue = _l[1];\n\n  var getSuggestionFromValue = useCallback(function (value) {\n    return choices.find(function (choice) {\n      return get(choice, optionValue) === value;\n    });\n  }, [choices, optionValue]);\n  var selectedItems = useMemo(function () {\n    return values.map(getSuggestionFromValue);\n  }, [getSuggestionFromValue, values]);\n\n  var _m = useSuggestions({\n    allowDuplicates: allowDuplicates,\n    allowEmpty: allowEmpty,\n    choices: choices,\n    emptyText: emptyText,\n    emptyValue: emptyValue,\n    limitChoicesToValue: limitChoicesToValue,\n    matchSuggestion: matchSuggestion,\n    optionText: optionText,\n    optionValue: optionValue,\n    selectedItem: selectedItems,\n    suggestionLimit: suggestionLimit,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _m.getChoiceText,\n      getChoiceValue = _m.getChoiceValue,\n      getSuggestions = _m.getSuggestions;\n\n  var handleFilterChange = useCallback(function (eventOrValue) {\n    var event = eventOrValue;\n    var value = event.target ? event.target.value : eventOrValue;\n    setFilterValue(value);\n\n    if (setFilter) {\n      setFilter(value);\n    }\n  }, [setFilter, setFilterValue]); // We must reset the filter every time the value changes to ensure we\n  // display at least some choices even if the input has a value.\n  // Otherwise, it would only display the currently selected one and the user\n  // would have to first clear the input before seeing any other choices\n\n  useEffect(function () {\n    handleFilterChange('');\n  }, [values.join(','), handleFilterChange]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleKeyDown = useCallback(function (event) {\n    // Remove latest item from array when user hits backspace with no text\n    if (selectedItems.length && !filterValue.length && event.key === 'Backspace') {\n      var newSelectedItems = selectedItems.slice(0, selectedItems.length - 1);\n      input.onChange(newSelectedItems.map(getChoiceValue));\n    }\n  }, [filterValue.length, getChoiceValue, input, selectedItems]);\n  var handleChange = useCallback(function (item) {\n    var newSelectedItems = !allowDuplicates && selectedItems.includes(item) ? __spreadArrays(selectedItems) : __spreadArrays(selectedItems, [item]);\n    setFilterValue('');\n    input.onChange(newSelectedItems.map(getChoiceValue));\n  }, [allowDuplicates, getChoiceValue, input, selectedItems, setFilterValue]);\n  var handleDelete = useCallback(function (item) {\n    return function () {\n      var newSelectedItems = __spreadArrays(selectedItems);\n\n      newSelectedItems.splice(newSelectedItems.indexOf(item), 1);\n      input.onChange(newSelectedItems.map(getChoiceValue));\n    };\n  }, [input, selectedItems, getChoiceValue]); // This function ensures that the suggestion list stay aligned to the\n  // input element even if it moves (because user scrolled for example)\n\n  var updateAnchorEl = function () {\n    if (!inputEl.current) {\n      return;\n    }\n\n    var inputPosition = inputEl.current.getBoundingClientRect(); // It works by implementing a mock element providing the only method used\n    // by the PopOver component, getBoundingClientRect, which will return a\n    // position based on the input position\n\n    if (!anchorEl.current) {\n      anchorEl.current = {\n        getBoundingClientRect: function () {\n          return inputPosition;\n        }\n      };\n    } else {\n      var anchorPosition = anchorEl.current.getBoundingClientRect();\n\n      if (anchorPosition.x !== inputPosition.x || anchorPosition.y !== inputPosition.y) {\n        anchorEl.current = {\n          getBoundingClientRect: function () {\n            return inputPosition;\n          }\n        };\n      }\n    }\n  };\n\n  var storeInputRef = function (input) {\n    inputEl.current = input;\n    updateAnchorEl();\n  };\n\n  var handleBlur = useCallback(function (event) {\n    setFilterValue('');\n    handleFilterChange('');\n    input.onBlur(event);\n  }, [handleFilterChange, input, setFilterValue]);\n  var handleFocus = useCallback(function (openMenu) {\n    return function (event) {\n      openMenu(event);\n      input.onFocus(event);\n    };\n  }, [input]);\n  var handleClick = useCallback(function (openMenu) {\n    return function (event) {\n      if (event.target === inputEl.current) {\n        openMenu(event);\n      }\n    };\n  }, []);\n\n  var shouldRenderSuggestions = function (val) {\n    if (shouldRenderSuggestionsOverride !== undefined && typeof shouldRenderSuggestionsOverride === 'function') {\n      return shouldRenderSuggestionsOverride(val);\n    }\n\n    return true;\n  };\n\n  return React.createElement(Downshift, __assign({\n    inputValue: filterValue,\n    onChange: handleChange,\n    selectedItem: selectedItems,\n    itemToString: function (item) {\n      return getChoiceValue(item);\n    }\n  }, rest), function (_a) {\n    var _b, _c;\n\n    var getInputProps = _a.getInputProps,\n        getItemProps = _a.getItemProps,\n        getLabelProps = _a.getLabelProps,\n        getMenuProps = _a.getMenuProps,\n        isOpen = _a.isOpen,\n        suggestionFilter = _a.inputValue,\n        highlightedIndex = _a.highlightedIndex,\n        openMenu = _a.openMenu;\n    var isMenuOpen = isOpen && shouldRenderSuggestions(suggestionFilter);\n\n    var _d = getInputProps({\n      onBlur: handleBlur,\n      onFocus: handleFocus(openMenu),\n      onClick: handleClick(openMenu),\n      onKeyDown: handleKeyDown\n    }),\n        idFromDownshift = _d.id,\n        onBlur = _d.onBlur,\n        onChange = _d.onChange,\n        onFocus = _d.onFocus,\n        ref = _d.ref,\n        color = _d.color,\n        size = _d.size,\n        inputProps = __rest(_d, [\"id\", \"onBlur\", \"onChange\", \"onFocus\", \"ref\", \"color\", \"size\"]);\n\n    return React.createElement(\"div\", {\n      className: classes.container\n    }, React.createElement(TextField, __assign({\n      id: id,\n      fullWidth: fullWidth,\n      InputProps: {\n        inputRef: storeInputRef,\n        classes: {\n          root: classNames(classes.inputRoot, (_b = {}, _b[classes.inputRootFilled] = variant === 'filled', _b)),\n          input: classes.inputInput\n        },\n        startAdornment: React.createElement(\"div\", {\n          className: classNames((_c = {}, _c[classes.chipContainerFilled] = variant === 'filled', _c[classes.chipContainerOutlined] = variant === 'outlined', _c))\n        }, selectedItems.map(function (item, index) {\n          return React.createElement(Chip, {\n            key: index,\n            tabIndex: -1,\n            label: getChoiceText(item),\n            className: classes.chip,\n            onDelete: handleDelete(item)\n          });\n        })),\n        onBlur: onBlur,\n        onChange: function (event) {\n          handleFilterChange(event);\n          onChange(event);\n        },\n        onFocus: onFocus\n      },\n      error: !!(touched && error),\n      label: React.createElement(FieldTitle, __assign({\n        label: label\n      }, labelProps, {\n        source: source,\n        resource: resource,\n        isRequired: typeof isRequiredOverride !== 'undefined' ? isRequiredOverride : isRequired\n      })),\n      InputLabelProps: getLabelProps({\n        htmlFor: id\n      }),\n      helperText: React.createElement(InputHelperText, {\n        touched: touched,\n        error: error,\n        helperText: helperText\n      }),\n      variant: variant,\n      margin: margin,\n      color: color,\n      size: size,\n      disabled: disabled\n    }, inputProps, options)), React.createElement(AutocompleteSuggestionList, {\n      isOpen: isMenuOpen,\n      menuProps: getMenuProps({}, // https://github.com/downshift-js/downshift/issues/235\n      {\n        suppressRefError: true\n      }),\n      inputEl: inputEl.current,\n      suggestionsContainerProps: suggestionsContainerProps,\n      className: classes.suggestionsContainer\n    }, getSuggestions(suggestionFilter).map(function (suggestion, index) {\n      return React.createElement(AutocompleteSuggestionItem, __assign({\n        key: getChoiceValue(suggestion),\n        suggestion: suggestion,\n        index: index,\n        highlightedIndex: highlightedIndex,\n        isSelected: selectedItems.map(getChoiceValue).includes(getChoiceValue(suggestion)),\n        filterValue: filterValue,\n        getSuggestionText: getChoiceText\n      }, getItemProps({\n        item: suggestion\n      })));\n    })));\n  });\n};\n\nvar emptyArray = [];\nvar useStyles = makeStyles(function (theme) {\n  var chipBackgroundColor = theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)';\n  return {\n    container: {\n      flexGrow: 1,\n      position: 'relative'\n    },\n    suggestionsContainer: {},\n    chip: {\n      margin: theme.spacing(0.5, 0.5, 0.5, 0)\n    },\n    chipContainerFilled: {\n      margin: '27px 12px 10px 0'\n    },\n    chipContainerOutlined: {\n      margin: '12px 12px 10px 0'\n    },\n    inputRoot: {\n      flexWrap: 'wrap'\n    },\n    inputRootFilled: {\n      flexWrap: 'wrap',\n      '& $chip': {\n        backgroundColor: chipBackgroundColor\n      }\n    },\n    inputInput: {\n      width: 'auto',\n      flexGrow: 1\n    }\n  };\n}, {\n  name: 'RaAutocompleteArrayInput'\n});\nexport default AutocompleteArrayInput;","map":{"version":3,"sources":["/app/node_modules/ra-ui-materialui/esm/input/AutocompleteArrayInput.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__spreadArrays","il","r","Array","k","a","j","jl","React","useCallback","useEffect","useRef","useMemo","isValidElement","Downshift","classNames","get","TextField","Chip","makeStyles","useInput","FieldTitle","useSuggestions","warning","InputHelperText","AutocompleteSuggestionList","AutocompleteSuggestionItem","AutocompleteArrayInput","props","allowDuplicates","allowEmpty","classesOverride","classes","_a","choices","disabled","emptyText","emptyValue","format","fullWidth","helperText","idOverride","id","inputOverride","input","isRequiredOverride","isRequired","label","limitChoicesToValue","_b","margin","matchSuggestion","metaOverride","meta","onBlur","onChange","onFocus","_c","options","_d","suggestionsContainerProps","labelProps","InputProps","_e","optionText","_f","optionValue","parse","resource","setFilter","shouldRenderSuggestionsOverride","shouldRenderSuggestions","source","suggestionLimit","_g","translateChoice","validate","_h","variant","rest","undefined","useStyles","inputEl","anchorEl","_j","_k","touched","error","values","value","emptyArray","_l","useState","filterValue","setFilterValue","getSuggestionFromValue","find","choice","selectedItems","map","_m","selectedItem","getChoiceText","getChoiceValue","getSuggestions","handleFilterChange","eventOrValue","event","target","join","handleKeyDown","key","newSelectedItems","slice","handleChange","item","includes","handleDelete","splice","updateAnchorEl","current","inputPosition","getBoundingClientRect","anchorPosition","x","y","storeInputRef","handleBlur","handleFocus","openMenu","handleClick","val","createElement","inputValue","itemToString","getInputProps","getItemProps","getLabelProps","getMenuProps","isOpen","suggestionFilter","highlightedIndex","isMenuOpen","onClick","onKeyDown","idFromDownshift","ref","color","size","inputProps","className","container","inputRef","root","inputRoot","inputRootFilled","inputInput","startAdornment","chipContainerFilled","chipContainerOutlined","index","tabIndex","chip","onDelete","InputLabelProps","htmlFor","menuProps","suppressRefError","suggestionsContainer","suggestion","isSelected","getSuggestionText","theme","chipBackgroundColor","palette","type","flexGrow","position","spacing","flexWrap","backgroundColor","width","name"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,IAAIO,MAAM,GAAI,QAAQ,KAAKA,MAAd,IAAyB,UAAUV,CAAV,EAAaW,CAAb,EAAgB;AAClD,MAAIZ,CAAC,GAAG,EAAR;;AACA,OAAK,IAAIM,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,KAA8CM,CAAC,CAACC,OAAF,CAAUP,CAAV,IAAe,CAAjE,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;;AACJ,MAAIL,CAAC,IAAI,IAAL,IAAa,OAAOH,MAAM,CAACgB,qBAAd,KAAwC,UAAzD,EACI,KAAK,IAAIZ,CAAC,GAAG,CAAR,EAAWI,CAAC,GAAGR,MAAM,CAACgB,qBAAP,CAA6Bb,CAA7B,CAApB,EAAqDC,CAAC,GAAGI,CAAC,CAACD,MAA3D,EAAmEH,CAAC,EAApE,EAAwE;AACpE,QAAIU,CAAC,CAACC,OAAF,CAAUP,CAAC,CAACJ,CAAD,CAAX,IAAkB,CAAlB,IAAuBJ,MAAM,CAACS,SAAP,CAAiBQ,oBAAjB,CAAsCN,IAAtC,CAA2CR,CAA3C,EAA8CK,CAAC,CAACJ,CAAD,CAA/C,CAA3B,EACIF,CAAC,CAACM,CAAC,CAACJ,CAAD,CAAF,CAAD,GAAUD,CAAC,CAACK,CAAC,CAACJ,CAAD,CAAF,CAAX;AACP;AACL,SAAOF,CAAP;AACH,CAVD;;AAWA,IAAIgB,cAAc,GAAI,QAAQ,KAAKA,cAAd,IAAiC,YAAY;AAC9D,OAAK,IAAIf,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAAf,EAAkBe,EAAE,GAAGb,SAAS,CAACC,MAAtC,EAA8CH,CAAC,GAAGe,EAAlD,EAAsDf,CAAC,EAAvD,EAA2DD,CAAC,IAAIG,SAAS,CAACF,CAAD,CAAT,CAAaG,MAAlB;;AAC3D,OAAK,IAAIa,CAAC,GAAGC,KAAK,CAAClB,CAAD,CAAb,EAAkBmB,CAAC,GAAG,CAAtB,EAAyBlB,CAAC,GAAG,CAAlC,EAAqCA,CAAC,GAAGe,EAAzC,EAA6Cf,CAAC,EAA9C,EACI,KAAK,IAAImB,CAAC,GAAGjB,SAAS,CAACF,CAAD,CAAjB,EAAsBoB,CAAC,GAAG,CAA1B,EAA6BC,EAAE,GAAGF,CAAC,CAAChB,MAAzC,EAAiDiB,CAAC,GAAGC,EAArD,EAAyDD,CAAC,IAAIF,CAAC,EAA/D,EACIF,CAAC,CAACE,CAAD,CAAD,GAAOC,CAAC,CAACC,CAAD,CAAR;;AACR,SAAOJ,CAAP;AACH,CAND;;AAOA,OAAOM,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,EAAgDC,OAAhD,EAAyDC,cAAzD,QAAgF,OAAhF;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,mBAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,cAA/B,EAA+CC,OAA/C,QAA+D,SAA/D;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,0BAAP,MAAuC,8BAAvC;AACA,OAAOC,0BAAP,MAAuC,8BAAvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,sBAAsB,GAAG,UAAUC,KAAV,EAAiB;AAC1C,MAAIC,eAAe,GAAGD,KAAK,CAACC,eAA5B;AAAA,MAA6CC,UAAU,GAAGF,KAAK,CAACE,UAAhE;AAAA,MAA4EC,eAAe,GAAGH,KAAK,CAACI,OAApG;AAAA,MAA6GC,EAAE,GAAGL,KAAK,CAACM,OAAxH;AAAA,MAAiIA,OAAO,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAhK;AAAA,MAAoKE,QAAQ,GAAGP,KAAK,CAACO,QAArL;AAAA,MAA+LC,SAAS,GAAGR,KAAK,CAACQ,SAAjN;AAAA,MAA4NC,UAAU,GAAGT,KAAK,CAACS,UAA/O;AAAA,MAA2PC,MAAM,GAAGV,KAAK,CAACU,MAA1Q;AAAA,MAAkRC,SAAS,GAAGX,KAAK,CAACW,SAApS;AAAA,MAA+SC,UAAU,GAAGZ,KAAK,CAACY,UAAlU;AAAA,MAA8UC,UAAU,GAAGb,KAAK,CAACc,EAAjW;AAAA,MAAqWC,aAAa,GAAGf,KAAK,CAACgB,KAA3X;AAAA,MAAkYC,kBAAkB,GAAGjB,KAAK,CAACkB,UAA7Z;AAAA,MAAyaC,KAAK,GAAGnB,KAAK,CAACmB,KAAvb;AAAA,MAA8bC,mBAAmB,GAAGpB,KAAK,CAACoB,mBAA1d;AAAA,MAA+eC,EAAE,GAAGrB,KAAK,CAACsB,MAA1f;AAAA,MAAkgBA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,OAAhB,GAA0BA,EAAriB;AAAA,MAAyiBE,eAAe,GAAGvB,KAAK,CAACuB,eAAjkB;AAAA,MAAklBC,YAAY,GAAGxB,KAAK,CAACyB,IAAvmB;AAAA,MAA6mBC,MAAM,GAAG1B,KAAK,CAAC0B,MAA5nB;AAAA,MAAooBC,QAAQ,GAAG3B,KAAK,CAAC2B,QAArpB;AAAA,MAA+pBC,OAAO,GAAG5B,KAAK,CAAC4B,OAA/qB;AAAA,MAAwrBC,EAAE,GAAG7B,KAAK,CAAC8B,OAAnsB;AAAA,MAA4sBC,EAAE,GAAGF,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAtuB;AAAA,MAA0uBG,yBAAyB,GAAGD,EAAE,CAACC,yBAAzwB;AAAA,MAAoyBC,UAAU,GAAGF,EAAE,CAACE,UAApzB;AAAA,MAAg0BC,UAAU,GAAGH,EAAE,CAACG,UAAh1B;AAAA,MAA41BJ,OAAO,GAAG/D,MAAM,CAACgE,EAAD,EAAK,CAAC,2BAAD,EAA8B,YAA9B,EAA4C,YAA5C,CAAL,CAA52B;AAAA,MAA66BI,EAAE,GAAGnC,KAAK,CAACoC,UAAx7B;AAAA,MAAo8BA,UAAU,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,MAAhB,GAAyBA,EAA1+B;AAAA,MAA8+BE,EAAE,GAAGrC,KAAK,CAACsC,WAAz/B;AAAA,MAAsgCA,WAAW,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAA3iC;AAAA,MAA+iCE,KAAK,GAAGvC,KAAK,CAACuC,KAA7jC;AAAA,MAAokCC,QAAQ,GAAGxC,KAAK,CAACwC,QAArlC;AAAA,MAA+lCC,SAAS,GAAGzC,KAAK,CAACyC,SAAjnC;AAAA,MAA4nCC,+BAA+B,GAAG1C,KAAK,CAAC2C,uBAApqC;AAAA,MAA6rCC,MAAM,GAAG5C,KAAK,CAAC4C,MAA5sC;AAAA,MAAotCC,eAAe,GAAG7C,KAAK,CAAC6C,eAA5uC;AAAA,MAA6vCC,EAAE,GAAG9C,KAAK,CAAC+C,eAAxwC;AAAA,MAAyxCA,eAAe,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAAl0C;AAAA,MAAs0CE,QAAQ,GAAGhD,KAAK,CAACgD,QAAv1C;AAAA,MAAi2CC,EAAE,GAAGjD,KAAK,CAACkD,OAA52C;AAAA,MAAq3CA,OAAO,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,QAAhB,GAA2BA,EAA15C;AAAA,MAA85CE,IAAI,GAAGpF,MAAM,CAACiC,KAAD,EAAQ,CAAC,iBAAD,EAAoB,YAApB,EAAkC,SAAlC,EAA6C,SAA7C,EAAwD,UAAxD,EAAoE,WAApE,EAAiF,YAAjF,EAA+F,QAA/F,EAAyG,WAAzG,EAAsH,YAAtH,EAAoI,IAApI,EAA0I,OAA1I,EAAmJ,YAAnJ,EAAiK,OAAjK,EAA0K,qBAA1K,EAAiM,QAAjM,EAA2M,iBAA3M,EAA8N,MAA9N,EAAsO,QAAtO,EAAgP,UAAhP,EAA4P,SAA5P,EAAuQ,SAAvQ,EAAkR,YAAlR,EAAgS,aAAhS,EAA+S,OAA/S,EAAwT,UAAxT,EAAoU,WAApU,EAAiV,yBAAjV,EAA4W,QAA5W,EAAsX,iBAAtX,EAAyY,iBAAzY,EAA4Z,UAA5Z,EAAwa,SAAxa,CAAR,CAA36C;;AACAL,EAAAA,OAAO,CAACV,cAAc,CAACmD,UAAD,CAAd,IAA8B,CAACb,eAAhC,EAAiD,4LAAjD,CAAP;AACA5B,EAAAA,OAAO,CAACiD,MAAM,KAAKQ,SAAZ,EAAuB,kHAAvB,CAAP;AACAzD,EAAAA,OAAO,CAACW,OAAO,KAAK8C,SAAb,EAAwB,mHAAxB,CAAP;AACA,MAAIhD,OAAO,GAAGiD,SAAS,CAACrD,KAAD,CAAvB;AACA,MAAIsD,OAAO,GAAGvE,MAAM,EAApB;AACA,MAAIwE,QAAQ,GAAGxE,MAAM,EAArB;;AACA,MAAIyE,EAAE,GAAGhE,QAAQ,CAACvC,QAAQ,CAAC;AAAEyD,IAAAA,MAAM,EAAEA,MAAV;AAAkBI,IAAAA,EAAE,EAAED,UAAtB;AAAkCG,IAAAA,KAAK,EAAED,aAAzC;AAAwDU,IAAAA,IAAI,EAAED,YAA9D;AAA4EE,IAAAA,MAAM,EAAEA,MAApF;AACvBC,IAAAA,QAAQ,EAAEA,QADa;AAEvBC,IAAAA,OAAO,EAAEA,OAFc;AAGvBW,IAAAA,KAAK,EAAEA,KAHgB;AAIvBC,IAAAA,QAAQ,EAAEA,QAJa;AAKvBI,IAAAA,MAAM,EAAEA,MALe;AAMvBI,IAAAA,QAAQ,EAAEA;AANa,GAAD,EAMAG,IANA,CAAT,CAAjB;AAAA,MAMkCrC,EAAE,GAAG0C,EAAE,CAAC1C,EAN1C;AAAA,MAM8CE,KAAK,GAAGwC,EAAE,CAACxC,KANzD;AAAA,MAMgEE,UAAU,GAAGsC,EAAE,CAACtC,UANhF;AAAA,MAM4FuC,EAAE,GAAGD,EAAE,CAAC/B,IANpG;AAAA,MAM0GiC,OAAO,GAAGD,EAAE,CAACC,OANvH;AAAA,MAMgIC,KAAK,GAAGF,EAAE,CAACE,KAN3I;;AAOA,MAAIC,MAAM,GAAG5C,KAAK,CAAC6C,KAAN,IAAeC,UAA5B;;AACA,MAAIC,EAAE,GAAGnF,KAAK,CAACoF,QAAN,CAAe,EAAf,CAAT;AAAA,MAA6BC,WAAW,GAAGF,EAAE,CAAC,CAAD,CAA7C;AAAA,MAAkDG,cAAc,GAAGH,EAAE,CAAC,CAAD,CAArE;;AACA,MAAII,sBAAsB,GAAGtF,WAAW,CAAC,UAAUgF,KAAV,EAAiB;AAAE,WAAOvD,OAAO,CAAC8D,IAAR,CAAa,UAAUC,MAAV,EAAkB;AAAE,aAAOjF,GAAG,CAACiF,MAAD,EAAS/B,WAAT,CAAH,KAA6BuB,KAApC;AAA4C,KAA7E,CAAP;AAAwF,GAA5G,EAA8G,CAACvD,OAAD,EAAUgC,WAAV,CAA9G,CAAxC;AACA,MAAIgC,aAAa,GAAGtF,OAAO,CAAC,YAAY;AAAE,WAAO4E,MAAM,CAACW,GAAP,CAAWJ,sBAAX,CAAP;AAA4C,GAA3D,EAA6D,CACpFA,sBADoF,EAEpFP,MAFoF,CAA7D,CAA3B;;AAIA,MAAIY,EAAE,GAAG9E,cAAc,CAAC;AACpBO,IAAAA,eAAe,EAAEA,eADG;AAEpBC,IAAAA,UAAU,EAAEA,UAFQ;AAGpBI,IAAAA,OAAO,EAAEA,OAHW;AAIpBE,IAAAA,SAAS,EAAEA,SAJS;AAKpBC,IAAAA,UAAU,EAAEA,UALQ;AAMpBW,IAAAA,mBAAmB,EAAEA,mBAND;AAOpBG,IAAAA,eAAe,EAAEA,eAPG;AAQpBa,IAAAA,UAAU,EAAEA,UARQ;AASpBE,IAAAA,WAAW,EAAEA,WATO;AAUpBmC,IAAAA,YAAY,EAAEH,aAVM;AAWpBzB,IAAAA,eAAe,EAAEA,eAXG;AAYpBE,IAAAA,eAAe,EAAEA;AAZG,GAAD,CAAvB;AAAA,MAaI2B,aAAa,GAAGF,EAAE,CAACE,aAbvB;AAAA,MAasCC,cAAc,GAAGH,EAAE,CAACG,cAb1D;AAAA,MAa0EC,cAAc,GAAGJ,EAAE,CAACI,cAb9F;;AAcA,MAAIC,kBAAkB,GAAGhG,WAAW,CAAC,UAAUiG,YAAV,EAAwB;AACzD,QAAIC,KAAK,GAAGD,YAAZ;AACA,QAAIjB,KAAK,GAAGkB,KAAK,CAACC,MAAN,GACND,KAAK,CAACC,MAAN,CAAanB,KADP,GAENiB,YAFN;AAGAZ,IAAAA,cAAc,CAACL,KAAD,CAAd;;AACA,QAAIpB,SAAJ,EAAe;AACXA,MAAAA,SAAS,CAACoB,KAAD,CAAT;AACH;AACJ,GATmC,EASjC,CAACpB,SAAD,EAAYyB,cAAZ,CATiC,CAApC,CApC0C,CA8C1C;AACA;AACA;AACA;;AACApF,EAAAA,SAAS,CAAC,YAAY;AAClB+F,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACH,GAFQ,EAEN,CAACjB,MAAM,CAACqB,IAAP,CAAY,GAAZ,CAAD,EAAmBJ,kBAAnB,CAFM,CAAT,CAlD0C,CAoDE;;AAC5C,MAAIK,aAAa,GAAGrG,WAAW,CAAC,UAAUkG,KAAV,EAAiB;AAC7C;AACA,QAAIT,aAAa,CAAC7G,MAAd,IACA,CAACwG,WAAW,CAACxG,MADb,IAEAsH,KAAK,CAACI,GAAN,KAAc,WAFlB,EAE+B;AAC3B,UAAIC,gBAAgB,GAAGd,aAAa,CAACe,KAAd,CAAoB,CAApB,EAAuBf,aAAa,CAAC7G,MAAd,GAAuB,CAA9C,CAAvB;AACAuD,MAAAA,KAAK,CAACW,QAAN,CAAeyD,gBAAgB,CAACb,GAAjB,CAAqBI,cAArB,CAAf;AACH;AACJ,GAR8B,EAQ5B,CAACV,WAAW,CAACxG,MAAb,EAAqBkH,cAArB,EAAqC3D,KAArC,EAA4CsD,aAA5C,CAR4B,CAA/B;AASA,MAAIgB,YAAY,GAAGzG,WAAW,CAAC,UAAU0G,IAAV,EAAgB;AAC3C,QAAIH,gBAAgB,GAAG,CAACnF,eAAD,IAAoBqE,aAAa,CAACkB,QAAd,CAAuBD,IAAvB,CAApB,GACjBnH,cAAc,CAACkG,aAAD,CADG,GACelG,cAAc,CAACkG,aAAD,EAAgB,CAACiB,IAAD,CAAhB,CADpD;AAEArB,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAlD,IAAAA,KAAK,CAACW,QAAN,CAAeyD,gBAAgB,CAACb,GAAjB,CAAqBI,cAArB,CAAf;AACH,GAL6B,EAK3B,CAAC1E,eAAD,EAAkB0E,cAAlB,EAAkC3D,KAAlC,EAAyCsD,aAAzC,EAAwDJ,cAAxD,CAL2B,CAA9B;AAMA,MAAIuB,YAAY,GAAG5G,WAAW,CAAC,UAAU0G,IAAV,EAAgB;AAAE,WAAO,YAAY;AAChE,UAAIH,gBAAgB,GAAGhH,cAAc,CAACkG,aAAD,CAArC;;AACAc,MAAAA,gBAAgB,CAACM,MAAjB,CAAwBN,gBAAgB,CAACnH,OAAjB,CAAyBsH,IAAzB,CAAxB,EAAwD,CAAxD;AACAvE,MAAAA,KAAK,CAACW,QAAN,CAAeyD,gBAAgB,CAACb,GAAjB,CAAqBI,cAArB,CAAf;AACH,KAJgD;AAI7C,GAJ0B,EAIxB,CAAC3D,KAAD,EAAQsD,aAAR,EAAuBK,cAAvB,CAJwB,CAA9B,CApE0C,CAyE1C;AACA;;AACA,MAAIgB,cAAc,GAAG,YAAY;AAC7B,QAAI,CAACrC,OAAO,CAACsC,OAAb,EAAsB;AAClB;AACH;;AACD,QAAIC,aAAa,GAAGvC,OAAO,CAACsC,OAAR,CAAgBE,qBAAhB,EAApB,CAJ6B,CAK7B;AACA;AACA;;AACA,QAAI,CAACvC,QAAQ,CAACqC,OAAd,EAAuB;AACnBrC,MAAAA,QAAQ,CAACqC,OAAT,GAAmB;AAAEE,QAAAA,qBAAqB,EAAE,YAAY;AAAE,iBAAOD,aAAP;AAAuB;AAA9D,OAAnB;AACH,KAFD,MAGK;AACD,UAAIE,cAAc,GAAGxC,QAAQ,CAACqC,OAAT,CAAiBE,qBAAjB,EAArB;;AACA,UAAIC,cAAc,CAACC,CAAf,KAAqBH,aAAa,CAACG,CAAnC,IACAD,cAAc,CAACE,CAAf,KAAqBJ,aAAa,CAACI,CADvC,EAC0C;AACtC1C,QAAAA,QAAQ,CAACqC,OAAT,GAAmB;AACfE,UAAAA,qBAAqB,EAAE,YAAY;AAAE,mBAAOD,aAAP;AAAuB;AAD7C,SAAnB;AAGH;AACJ;AACJ,GApBD;;AAqBA,MAAIK,aAAa,GAAG,UAAUlF,KAAV,EAAiB;AACjCsC,IAAAA,OAAO,CAACsC,OAAR,GAAkB5E,KAAlB;AACA2E,IAAAA,cAAc;AACjB,GAHD;;AAIA,MAAIQ,UAAU,GAAGtH,WAAW,CAAC,UAAUkG,KAAV,EAAiB;AAC1Cb,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAW,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACA7D,IAAAA,KAAK,CAACU,MAAN,CAAaqD,KAAb;AACH,GAJ2B,EAIzB,CAACF,kBAAD,EAAqB7D,KAArB,EAA4BkD,cAA5B,CAJyB,CAA5B;AAKA,MAAIkC,WAAW,GAAGvH,WAAW,CAAC,UAAUwH,QAAV,EAAoB;AAAE,WAAO,UAAUtB,KAAV,EAAiB;AACxEsB,MAAAA,QAAQ,CAACtB,KAAD,CAAR;AACA/D,MAAAA,KAAK,CAACY,OAAN,CAAcmD,KAAd;AACH,KAHmD;AAGhD,GAHyB,EAGvB,CAAC/D,KAAD,CAHuB,CAA7B;AAIA,MAAIsF,WAAW,GAAGzH,WAAW,CAAC,UAAUwH,QAAV,EAAoB;AAAE,WAAO,UAAUtB,KAAV,EAAiB;AACxE,UAAIA,KAAK,CAACC,MAAN,KAAiB1B,OAAO,CAACsC,OAA7B,EAAsC;AAClCS,QAAAA,QAAQ,CAACtB,KAAD,CAAR;AACH;AACJ,KAJmD;AAIhD,GAJyB,EAIvB,EAJuB,CAA7B;;AAKA,MAAIpC,uBAAuB,GAAG,UAAU4D,GAAV,EAAe;AACzC,QAAI7D,+BAA+B,KAAKU,SAApC,IACA,OAAOV,+BAAP,KAA2C,UAD/C,EAC2D;AACvD,aAAOA,+BAA+B,CAAC6D,GAAD,CAAtC;AACH;;AACD,WAAO,IAAP;AACH,GAND;;AAOA,SAAQ3H,KAAK,CAAC4H,aAAN,CAAoBtH,SAApB,EAA+BjC,QAAQ,CAAC;AAAEwJ,IAAAA,UAAU,EAAExC,WAAd;AAA2BtC,IAAAA,QAAQ,EAAE2D,YAArC;AAAmDb,IAAAA,YAAY,EAAEH,aAAjE;AAAgFoC,IAAAA,YAAY,EAAE,UAAUnB,IAAV,EAAgB;AAAE,aAAOZ,cAAc,CAACY,IAAD,CAArB;AAA8B;AAA9I,GAAD,EAAmJpC,IAAnJ,CAAvC,EAAiM,UAAU9C,EAAV,EAAc;AACnN,QAAIgB,EAAJ,EAAQQ,EAAR;;AACA,QAAI8E,aAAa,GAAGtG,EAAE,CAACsG,aAAvB;AAAA,QAAsCC,YAAY,GAAGvG,EAAE,CAACuG,YAAxD;AAAA,QAAsEC,aAAa,GAAGxG,EAAE,CAACwG,aAAzF;AAAA,QAAwGC,YAAY,GAAGzG,EAAE,CAACyG,YAA1H;AAAA,QAAwIC,MAAM,GAAG1G,EAAE,CAAC0G,MAApJ;AAAA,QAA4JC,gBAAgB,GAAG3G,EAAE,CAACoG,UAAlL;AAAA,QAA8LQ,gBAAgB,GAAG5G,EAAE,CAAC4G,gBAApN;AAAA,QAAsOZ,QAAQ,GAAGhG,EAAE,CAACgG,QAApP;AACA,QAAIa,UAAU,GAAGH,MAAM,IAAIpE,uBAAuB,CAACqE,gBAAD,CAAlD;;AACA,QAAIjF,EAAE,GAAG4E,aAAa,CAAC;AACnBjF,MAAAA,MAAM,EAAEyE,UADW;AAEnBvE,MAAAA,OAAO,EAAEwE,WAAW,CAACC,QAAD,CAFD;AAGnBc,MAAAA,OAAO,EAAEb,WAAW,CAACD,QAAD,CAHD;AAInBe,MAAAA,SAAS,EAAElC;AAJQ,KAAD,CAAtB;AAAA,QAKImC,eAAe,GAAGtF,EAAE,CAACjB,EALzB;AAAA,QAK6BY,MAAM,GAAGK,EAAE,CAACL,MALzC;AAAA,QAKiDC,QAAQ,GAAGI,EAAE,CAACJ,QAL/D;AAAA,QAKyEC,OAAO,GAAGG,EAAE,CAACH,OALtF;AAAA,QAK+F0F,GAAG,GAAGvF,EAAE,CAACuF,GALxG;AAAA,QAK6GC,KAAK,GAAGxF,EAAE,CAACwF,KALxH;AAAA,QAK+HC,IAAI,GAAGzF,EAAE,CAACyF,IALzI;AAAA,QAK+IC,UAAU,GAAG1J,MAAM,CAACgE,EAAD,EAAK,CAAC,IAAD,EAAO,QAAP,EAAiB,UAAjB,EAA6B,SAA7B,EAAwC,KAAxC,EAA+C,OAA/C,EAAwD,MAAxD,CAAL,CALlK;;AAMA,WAAQnD,KAAK,CAAC4H,aAAN,CAAoB,KAApB,EAA2B;AAAEkB,MAAAA,SAAS,EAAEtH,OAAO,CAACuH;AAArB,KAA3B,EACJ/I,KAAK,CAAC4H,aAAN,CAAoBnH,SAApB,EAA+BpC,QAAQ,CAAC;AAAE6D,MAAAA,EAAE,EAAEA,EAAN;AAAUH,MAAAA,SAAS,EAAEA,SAArB;AAAgCuB,MAAAA,UAAU,EAAE;AAC5E0F,QAAAA,QAAQ,EAAE1B,aADkE;AAE5E9F,QAAAA,OAAO,EAAE;AACLyH,UAAAA,IAAI,EAAE1I,UAAU,CAACiB,OAAO,CAAC0H,SAAT,GAAqBzG,EAAE,GAAG,EAAL,EACjCA,EAAE,CAACjB,OAAO,CAAC2H,eAAT,CAAF,GAA8B7E,OAAO,KAAK,QADT,EAEjC7B,EAFY,EADX;AAILL,UAAAA,KAAK,EAAEZ,OAAO,CAAC4H;AAJV,SAFmE;AAQ5EC,QAAAA,cAAc,EAAGrJ,KAAK,CAAC4H,aAAN,CAAoB,KAApB,EAA2B;AAAEkB,UAAAA,SAAS,EAAEvI,UAAU,EAAE0C,EAAE,GAAG,EAAL,EAC7DA,EAAE,CAACzB,OAAO,CAAC8H,mBAAT,CAAF,GAAkChF,OAAO,KAAK,QADe,EAE7DrB,EAAE,CAACzB,OAAO,CAAC+H,qBAAT,CAAF,GAAoCjF,OAAO,KAAK,UAFa,EAG7DrB,EAH2D;AAAvB,SAA3B,EAGDyC,aAAa,CAACC,GAAd,CAAkB,UAAUgB,IAAV,EAAgB6C,KAAhB,EAAuB;AAAE,iBAAQxJ,KAAK,CAAC4H,aAAN,CAAoBlH,IAApB,EAA0B;AAAE6F,YAAAA,GAAG,EAAEiD,KAAP;AAAcC,YAAAA,QAAQ,EAAE,CAAC,CAAzB;AAA4BlH,YAAAA,KAAK,EAAEuD,aAAa,CAACa,IAAD,CAAhD;AAAwDmC,YAAAA,SAAS,EAAEtH,OAAO,CAACkI,IAA3E;AAAiFC,YAAAA,QAAQ,EAAE9C,YAAY,CAACF,IAAD;AAAvG,WAA1B,CAAR;AAAsJ,SAAjM,CAHC,CAR2D;AAY5E7D,QAAAA,MAAM,EAAEA,MAZoE;AAa5EC,QAAAA,QAAQ,EAAE,UAAUoD,KAAV,EAAiB;AACvBF,UAAAA,kBAAkB,CAACE,KAAD,CAAlB;AACApD,UAAAA,QAAQ,CAACoD,KAAD,CAAR;AACH,SAhB2E;AAiB5EnD,QAAAA,OAAO,EAAEA;AAjBmE,OAA5C;AAkBjC+B,MAAAA,KAAK,EAAE,CAAC,EAAED,OAAO,IAAIC,KAAb,CAlByB;AAkBJxC,MAAAA,KAAK,EAAEvC,KAAK,CAAC4H,aAAN,CAAoB/G,UAApB,EAAgCxC,QAAQ,CAAC;AAAEkE,QAAAA,KAAK,EAAEA;AAAT,OAAD,EAAmBc,UAAnB,EAA+B;AAAEW,QAAAA,MAAM,EAAEA,MAAV;AAAkBJ,QAAAA,QAAQ,EAAEA,QAA5B;AAAsCtB,QAAAA,UAAU,EAAE,OAAOD,kBAAP,KACxJ,WADwJ,GAEtJA,kBAFsJ,GAGtJC;AAHoG,OAA/B,CAAxC,CAlBH;AAqBVsH,MAAAA,eAAe,EAAE3B,aAAa,CAAC;AACrD4B,QAAAA,OAAO,EAAE3H;AAD4C,OAAD,CArBpB;AAuBhCF,MAAAA,UAAU,EAAEhC,KAAK,CAAC4H,aAAN,CAAoB5G,eAApB,EAAqC;AAAE8D,QAAAA,OAAO,EAAEA,OAAX;AAAoBC,QAAAA,KAAK,EAAEA,KAA3B;AAAkC/C,QAAAA,UAAU,EAAEA;AAA9C,OAArC,CAvBoB;AAuB8EsC,MAAAA,OAAO,EAAEA,OAvBvF;AAuBgG5B,MAAAA,MAAM,EAAEA,MAvBxG;AAuBgHiG,MAAAA,KAAK,EAAEA,KAvBvH;AAuB8HC,MAAAA,IAAI,EAAEA,IAvBpI;AAuB0IjH,MAAAA,QAAQ,EAAEA;AAvBpJ,KAAD,EAuBiKkH,UAvBjK,EAuB6K3F,OAvB7K,CAAvC,CADI,EAyBJlD,KAAK,CAAC4H,aAAN,CAAoB3G,0BAApB,EAAgD;AAAEkH,MAAAA,MAAM,EAAEG,UAAV;AAAsBwB,MAAAA,SAAS,EAAE5B,YAAY,CAAC,EAAD,EACzF;AACA;AAAE6B,QAAAA,gBAAgB,EAAE;AAApB,OAFyF,CAA7C;AAEfrF,MAAAA,OAAO,EAAEA,OAAO,CAACsC,OAFF;AAEW5D,MAAAA,yBAAyB,EAAEA,yBAFtC;AAEiE0F,MAAAA,SAAS,EAAEtH,OAAO,CAACwI;AAFpF,KAAhD,EAE4JhE,cAAc,CAACoC,gBAAD,CAAd,CAAiCzC,GAAjC,CAAqC,UAAUsE,UAAV,EAAsBT,KAAtB,EAA6B;AAAE,aAAQxJ,KAAK,CAAC4H,aAAN,CAAoB1G,0BAApB,EAAgD7C,QAAQ,CAAC;AAAEkI,QAAAA,GAAG,EAAER,cAAc,CAACkE,UAAD,CAArB;AAAmCA,QAAAA,UAAU,EAAEA,UAA/C;AAA2DT,QAAAA,KAAK,EAAEA,KAAlE;AAAyEnB,QAAAA,gBAAgB,EAAEA,gBAA3F;AAA6G6B,QAAAA,UAAU,EAAExE,aAAa,CAC9ZC,GADiZ,CAC7YI,cAD6Y,EAEjZa,QAFiZ,CAExYb,cAAc,CAACkE,UAAD,CAF0X,CAAzH;AAElP5E,QAAAA,WAAW,EAAEA,WAFqO;AAExN8E,QAAAA,iBAAiB,EAAErE;AAFqM,OAAD,EAEnLkC,YAAY,CAAC;AACtHrB,QAAAA,IAAI,EAAEsD;AADgH,OAAD,CAFuK,CAAxD,CAAR;AAIxN,KAJoJ,CAF5J,CAzBI,CAAR;AAgCH,GA1CO,CAAR;AA2CH,CApKD;;AAqKA,IAAI/E,UAAU,GAAG,EAAjB;AACA,IAAIT,SAAS,GAAG9D,UAAU,CAAC,UAAUyJ,KAAV,EAAiB;AACxC,MAAIC,mBAAmB,GAAGD,KAAK,CAACE,OAAN,CAAcC,IAAd,KAAuB,OAAvB,GACpB,qBADoB,GAEpB,2BAFN;AAGA,SAAO;AACHxB,IAAAA,SAAS,EAAE;AACPyB,MAAAA,QAAQ,EAAE,CADH;AAEPC,MAAAA,QAAQ,EAAE;AAFH,KADR;AAKHT,IAAAA,oBAAoB,EAAE,EALnB;AAMHN,IAAAA,IAAI,EAAE;AACFhH,MAAAA,MAAM,EAAE0H,KAAK,CAACM,OAAN,CAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,CAA7B;AADN,KANH;AASHpB,IAAAA,mBAAmB,EAAE;AACjB5G,MAAAA,MAAM,EAAE;AADS,KATlB;AAYH6G,IAAAA,qBAAqB,EAAE;AACnB7G,MAAAA,MAAM,EAAE;AADW,KAZpB;AAeHwG,IAAAA,SAAS,EAAE;AACPyB,MAAAA,QAAQ,EAAE;AADH,KAfR;AAkBHxB,IAAAA,eAAe,EAAE;AACbwB,MAAAA,QAAQ,EAAE,MADG;AAEb,iBAAW;AACPC,QAAAA,eAAe,EAAEP;AADV;AAFE,KAlBd;AAwBHjB,IAAAA,UAAU,EAAE;AACRyB,MAAAA,KAAK,EAAE,MADC;AAERL,MAAAA,QAAQ,EAAE;AAFF;AAxBT,GAAP;AA6BH,CAjCyB,EAiCvB;AAAEM,EAAAA,IAAI,EAAE;AAAR,CAjCuB,CAA1B;AAkCA,eAAe3J,sBAAf","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport React, { useCallback, useEffect, useRef, useMemo, isValidElement, } from 'react';\nimport Downshift from 'downshift';\nimport classNames from 'classnames';\nimport get from 'lodash/get';\nimport { TextField, Chip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useInput, FieldTitle, useSuggestions, warning, } from 'ra-core';\nimport InputHelperText from './InputHelperText';\nimport AutocompleteSuggestionList from './AutocompleteSuggestionList';\nimport AutocompleteSuggestionItem from './AutocompleteSuggestionItem';\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteArrayInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteArrayInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteArrayInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` prop\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue);\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <SelectInput source=\"gender\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteArrayInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <TextField> component\n *\n * @example\n * <AutocompleteArrayInput source=\"author_id\" options={{ color: 'secondary' }} />\n */\nvar AutocompleteArrayInput = function (props) {\n    var allowDuplicates = props.allowDuplicates, allowEmpty = props.allowEmpty, classesOverride = props.classes, _a = props.choices, choices = _a === void 0 ? [] : _a, disabled = props.disabled, emptyText = props.emptyText, emptyValue = props.emptyValue, format = props.format, fullWidth = props.fullWidth, helperText = props.helperText, idOverride = props.id, inputOverride = props.input, isRequiredOverride = props.isRequired, label = props.label, limitChoicesToValue = props.limitChoicesToValue, _b = props.margin, margin = _b === void 0 ? 'dense' : _b, matchSuggestion = props.matchSuggestion, metaOverride = props.meta, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, _c = props.options, _d = _c === void 0 ? {} : _c, suggestionsContainerProps = _d.suggestionsContainerProps, labelProps = _d.labelProps, InputProps = _d.InputProps, options = __rest(_d, [\"suggestionsContainerProps\", \"labelProps\", \"InputProps\"]), _e = props.optionText, optionText = _e === void 0 ? 'name' : _e, _f = props.optionValue, optionValue = _f === void 0 ? 'id' : _f, parse = props.parse, resource = props.resource, setFilter = props.setFilter, shouldRenderSuggestionsOverride = props.shouldRenderSuggestions, source = props.source, suggestionLimit = props.suggestionLimit, _g = props.translateChoice, translateChoice = _g === void 0 ? true : _g, validate = props.validate, _h = props.variant, variant = _h === void 0 ? 'filled' : _h, rest = __rest(props, [\"allowDuplicates\", \"allowEmpty\", \"classes\", \"choices\", \"disabled\", \"emptyText\", \"emptyValue\", \"format\", \"fullWidth\", \"helperText\", \"id\", \"input\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"margin\", \"matchSuggestion\", \"meta\", \"onBlur\", \"onChange\", \"onFocus\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"setFilter\", \"shouldRenderSuggestions\", \"source\", \"suggestionLimit\", \"translateChoice\", \"validate\", \"variant\"]);\n    warning(isValidElement(optionText) && !matchSuggestion, \"If the optionText prop is a React element, you must also specify the matchSuggestion prop:\\n<AutocompleteArrayInput\\n    matchSuggestion={(filterValue, suggestion) => true}\\n/>\\n        \");\n    warning(source === undefined, \"If you're not wrapping the AutocompleteArrayInput inside a ReferenceArrayInput, you must provide the source prop\");\n    warning(choices === undefined, \"If you're not wrapping the AutocompleteArrayInput inside a ReferenceArrayInput, you must provide the choices prop\");\n    var classes = useStyles(props);\n    var inputEl = useRef();\n    var anchorEl = useRef();\n    var _j = useInput(__assign({ format: format, id: idOverride, input: inputOverride, meta: metaOverride, onBlur: onBlur,\n        onChange: onChange,\n        onFocus: onFocus,\n        parse: parse,\n        resource: resource,\n        source: source,\n        validate: validate }, rest)), id = _j.id, input = _j.input, isRequired = _j.isRequired, _k = _j.meta, touched = _k.touched, error = _k.error;\n    var values = input.value || emptyArray;\n    var _l = React.useState(''), filterValue = _l[0], setFilterValue = _l[1];\n    var getSuggestionFromValue = useCallback(function (value) { return choices.find(function (choice) { return get(choice, optionValue) === value; }); }, [choices, optionValue]);\n    var selectedItems = useMemo(function () { return values.map(getSuggestionFromValue); }, [\n        getSuggestionFromValue,\n        values,\n    ]);\n    var _m = useSuggestions({\n        allowDuplicates: allowDuplicates,\n        allowEmpty: allowEmpty,\n        choices: choices,\n        emptyText: emptyText,\n        emptyValue: emptyValue,\n        limitChoicesToValue: limitChoicesToValue,\n        matchSuggestion: matchSuggestion,\n        optionText: optionText,\n        optionValue: optionValue,\n        selectedItem: selectedItems,\n        suggestionLimit: suggestionLimit,\n        translateChoice: translateChoice,\n    }), getChoiceText = _m.getChoiceText, getChoiceValue = _m.getChoiceValue, getSuggestions = _m.getSuggestions;\n    var handleFilterChange = useCallback(function (eventOrValue) {\n        var event = eventOrValue;\n        var value = event.target\n            ? event.target.value\n            : eventOrValue;\n        setFilterValue(value);\n        if (setFilter) {\n            setFilter(value);\n        }\n    }, [setFilter, setFilterValue]);\n    // We must reset the filter every time the value changes to ensure we\n    // display at least some choices even if the input has a value.\n    // Otherwise, it would only display the currently selected one and the user\n    // would have to first clear the input before seeing any other choices\n    useEffect(function () {\n        handleFilterChange('');\n    }, [values.join(','), handleFilterChange]); // eslint-disable-line react-hooks/exhaustive-deps\n    var handleKeyDown = useCallback(function (event) {\n        // Remove latest item from array when user hits backspace with no text\n        if (selectedItems.length &&\n            !filterValue.length &&\n            event.key === 'Backspace') {\n            var newSelectedItems = selectedItems.slice(0, selectedItems.length - 1);\n            input.onChange(newSelectedItems.map(getChoiceValue));\n        }\n    }, [filterValue.length, getChoiceValue, input, selectedItems]);\n    var handleChange = useCallback(function (item) {\n        var newSelectedItems = !allowDuplicates && selectedItems.includes(item)\n            ? __spreadArrays(selectedItems) : __spreadArrays(selectedItems, [item]);\n        setFilterValue('');\n        input.onChange(newSelectedItems.map(getChoiceValue));\n    }, [allowDuplicates, getChoiceValue, input, selectedItems, setFilterValue]);\n    var handleDelete = useCallback(function (item) { return function () {\n        var newSelectedItems = __spreadArrays(selectedItems);\n        newSelectedItems.splice(newSelectedItems.indexOf(item), 1);\n        input.onChange(newSelectedItems.map(getChoiceValue));\n    }; }, [input, selectedItems, getChoiceValue]);\n    // This function ensures that the suggestion list stay aligned to the\n    // input element even if it moves (because user scrolled for example)\n    var updateAnchorEl = function () {\n        if (!inputEl.current) {\n            return;\n        }\n        var inputPosition = inputEl.current.getBoundingClientRect();\n        // It works by implementing a mock element providing the only method used\n        // by the PopOver component, getBoundingClientRect, which will return a\n        // position based on the input position\n        if (!anchorEl.current) {\n            anchorEl.current = { getBoundingClientRect: function () { return inputPosition; } };\n        }\n        else {\n            var anchorPosition = anchorEl.current.getBoundingClientRect();\n            if (anchorPosition.x !== inputPosition.x ||\n                anchorPosition.y !== inputPosition.y) {\n                anchorEl.current = {\n                    getBoundingClientRect: function () { return inputPosition; },\n                };\n            }\n        }\n    };\n    var storeInputRef = function (input) {\n        inputEl.current = input;\n        updateAnchorEl();\n    };\n    var handleBlur = useCallback(function (event) {\n        setFilterValue('');\n        handleFilterChange('');\n        input.onBlur(event);\n    }, [handleFilterChange, input, setFilterValue]);\n    var handleFocus = useCallback(function (openMenu) { return function (event) {\n        openMenu(event);\n        input.onFocus(event);\n    }; }, [input]);\n    var handleClick = useCallback(function (openMenu) { return function (event) {\n        if (event.target === inputEl.current) {\n            openMenu(event);\n        }\n    }; }, []);\n    var shouldRenderSuggestions = function (val) {\n        if (shouldRenderSuggestionsOverride !== undefined &&\n            typeof shouldRenderSuggestionsOverride === 'function') {\n            return shouldRenderSuggestionsOverride(val);\n        }\n        return true;\n    };\n    return (React.createElement(Downshift, __assign({ inputValue: filterValue, onChange: handleChange, selectedItem: selectedItems, itemToString: function (item) { return getChoiceValue(item); } }, rest), function (_a) {\n        var _b, _c;\n        var getInputProps = _a.getInputProps, getItemProps = _a.getItemProps, getLabelProps = _a.getLabelProps, getMenuProps = _a.getMenuProps, isOpen = _a.isOpen, suggestionFilter = _a.inputValue, highlightedIndex = _a.highlightedIndex, openMenu = _a.openMenu;\n        var isMenuOpen = isOpen && shouldRenderSuggestions(suggestionFilter);\n        var _d = getInputProps({\n            onBlur: handleBlur,\n            onFocus: handleFocus(openMenu),\n            onClick: handleClick(openMenu),\n            onKeyDown: handleKeyDown,\n        }), idFromDownshift = _d.id, onBlur = _d.onBlur, onChange = _d.onChange, onFocus = _d.onFocus, ref = _d.ref, color = _d.color, size = _d.size, inputProps = __rest(_d, [\"id\", \"onBlur\", \"onChange\", \"onFocus\", \"ref\", \"color\", \"size\"]);\n        return (React.createElement(\"div\", { className: classes.container },\n            React.createElement(TextField, __assign({ id: id, fullWidth: fullWidth, InputProps: {\n                    inputRef: storeInputRef,\n                    classes: {\n                        root: classNames(classes.inputRoot, (_b = {},\n                            _b[classes.inputRootFilled] = variant === 'filled',\n                            _b)),\n                        input: classes.inputInput,\n                    },\n                    startAdornment: (React.createElement(\"div\", { className: classNames((_c = {},\n                            _c[classes.chipContainerFilled] = variant === 'filled',\n                            _c[classes.chipContainerOutlined] = variant === 'outlined',\n                            _c)) }, selectedItems.map(function (item, index) { return (React.createElement(Chip, { key: index, tabIndex: -1, label: getChoiceText(item), className: classes.chip, onDelete: handleDelete(item) })); }))),\n                    onBlur: onBlur,\n                    onChange: function (event) {\n                        handleFilterChange(event);\n                        onChange(event);\n                    },\n                    onFocus: onFocus,\n                }, error: !!(touched && error), label: React.createElement(FieldTitle, __assign({ label: label }, labelProps, { source: source, resource: resource, isRequired: typeof isRequiredOverride !==\n                        'undefined'\n                        ? isRequiredOverride\n                        : isRequired })), InputLabelProps: getLabelProps({\n                    htmlFor: id,\n                }), helperText: React.createElement(InputHelperText, { touched: touched, error: error, helperText: helperText }), variant: variant, margin: margin, color: color, size: size, disabled: disabled }, inputProps, options)),\n            React.createElement(AutocompleteSuggestionList, { isOpen: isMenuOpen, menuProps: getMenuProps({}, \n                // https://github.com/downshift-js/downshift/issues/235\n                { suppressRefError: true }), inputEl: inputEl.current, suggestionsContainerProps: suggestionsContainerProps, className: classes.suggestionsContainer }, getSuggestions(suggestionFilter).map(function (suggestion, index) { return (React.createElement(AutocompleteSuggestionItem, __assign({ key: getChoiceValue(suggestion), suggestion: suggestion, index: index, highlightedIndex: highlightedIndex, isSelected: selectedItems\n                    .map(getChoiceValue)\n                    .includes(getChoiceValue(suggestion)), filterValue: filterValue, getSuggestionText: getChoiceText }, getItemProps({\n                item: suggestion,\n            })))); }))));\n    }));\n};\nvar emptyArray = [];\nvar useStyles = makeStyles(function (theme) {\n    var chipBackgroundColor = theme.palette.type === 'light'\n        ? 'rgba(0, 0, 0, 0.09)'\n        : 'rgba(255, 255, 255, 0.09)';\n    return {\n        container: {\n            flexGrow: 1,\n            position: 'relative',\n        },\n        suggestionsContainer: {},\n        chip: {\n            margin: theme.spacing(0.5, 0.5, 0.5, 0),\n        },\n        chipContainerFilled: {\n            margin: '27px 12px 10px 0',\n        },\n        chipContainerOutlined: {\n            margin: '12px 12px 10px 0',\n        },\n        inputRoot: {\n            flexWrap: 'wrap',\n        },\n        inputRootFilled: {\n            flexWrap: 'wrap',\n            '& $chip': {\n                backgroundColor: chipBackgroundColor,\n            },\n        },\n        inputInput: {\n            width: 'auto',\n            flexGrow: 1,\n        },\n    };\n}, { name: 'RaAutocompleteArrayInput' });\nexport default AutocompleteArrayInput;\n"]},"metadata":{},"sourceType":"module"}