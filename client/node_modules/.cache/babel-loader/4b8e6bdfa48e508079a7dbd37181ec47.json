{"ast":null,"code":"/*\n * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst LRU = require('lru-cache');\n\nconst MAX_ACTIVE_CONTEXTS = 10;\nmodule.exports = class ResolvedContext {\n  /**\n   * Creates a ResolvedContext.\n   *\n   * @param document the context document.\n   */\n  constructor({\n    document\n  }) {\n    this.document = document; // TODO: enable customization of processed context cache\n    // TODO: limit based on size of processed contexts vs. number of them\n\n    this.cache = new LRU({\n      max: MAX_ACTIVE_CONTEXTS\n    });\n  }\n\n  getProcessed(activeCtx) {\n    return this.cache.get(activeCtx);\n  }\n\n  setProcessed(activeCtx, processedCtx) {\n    this.cache.set(activeCtx, processedCtx);\n  }\n\n};","map":{"version":3,"sources":["/app/node_modules/jsonld/lib/ResolvedContext.js"],"names":["LRU","require","MAX_ACTIVE_CONTEXTS","module","exports","ResolvedContext","constructor","document","cache","max","getProcessed","activeCtx","get","setProcessed","processedCtx","set"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AAEA,MAAMC,mBAAmB,GAAG,EAA5B;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,eAAN,CAAsB;AACrC;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAa;AACtB,SAAKA,QAAL,GAAgBA,QAAhB,CADsB,CAEtB;AACA;;AACA,SAAKC,KAAL,GAAa,IAAIR,GAAJ,CAAQ;AAACS,MAAAA,GAAG,EAAEP;AAAN,KAAR,CAAb;AACD;;AAEDQ,EAAAA,YAAY,CAACC,SAAD,EAAY;AACtB,WAAO,KAAKH,KAAL,CAAWI,GAAX,CAAeD,SAAf,CAAP;AACD;;AAEDE,EAAAA,YAAY,CAACF,SAAD,EAAYG,YAAZ,EAA0B;AACpC,SAAKN,KAAL,CAAWO,GAAX,CAAeJ,SAAf,EAA0BG,YAA1B;AACD;;AAnBoC,CAAvC","sourcesContent":["/*\n * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst LRU = require('lru-cache');\n\nconst MAX_ACTIVE_CONTEXTS = 10;\n\nmodule.exports = class ResolvedContext {\n  /**\n   * Creates a ResolvedContext.\n   *\n   * @param document the context document.\n   */\n  constructor({document}) {\n    this.document = document;\n    // TODO: enable customization of processed context cache\n    // TODO: limit based on size of processed contexts vs. number of them\n    this.cache = new LRU({max: MAX_ACTIVE_CONTEXTS});\n  }\n\n  getProcessed(activeCtx) {\n    return this.cache.get(activeCtx);\n  }\n\n  setProcessed(activeCtx, processedCtx) {\n    this.cache.set(activeCtx, processedCtx);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}