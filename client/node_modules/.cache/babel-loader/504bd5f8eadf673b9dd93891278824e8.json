{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst types = require('./types');\n\nconst api = {};\nmodule.exports = api; // define URL parser\n// parseUri 1.2.2\n// (c) Steven Levithan <stevenlevithan.com>\n// MIT License\n// with local jsonld.js modifications\n\napi.parsers = {\n  simple: {\n    // RFC 3986 basic parts\n    keys: ['href', 'scheme', 'authority', 'path', 'query', 'fragment'],\n\n    /* eslint-disable-next-line max-len */\n    regex: /^(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/\n  },\n  full: {\n    keys: ['href', 'protocol', 'scheme', 'authority', 'auth', 'user', 'password', 'hostname', 'port', 'path', 'directory', 'file', 'query', 'fragment'],\n\n    /* eslint-disable-next-line max-len */\n    regex: /^(([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?))?(?:(((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/\n  }\n};\n\napi.parse = (str, parser) => {\n  const parsed = {};\n  const o = api.parsers[parser || 'full'];\n  const m = o.regex.exec(str);\n  let i = o.keys.length;\n\n  while (i--) {\n    parsed[o.keys[i]] = m[i] === undefined ? null : m[i];\n  } // remove default ports in found in URLs\n\n\n  if (parsed.scheme === 'https' && parsed.port === '443' || parsed.scheme === 'http' && parsed.port === '80') {\n    parsed.href = parsed.href.replace(':' + parsed.port, '');\n    parsed.authority = parsed.authority.replace(':' + parsed.port, '');\n    parsed.port = null;\n  }\n\n  parsed.normalizedPath = api.removeDotSegments(parsed.path);\n  return parsed;\n};\n/**\n * Prepends a base IRI to the given relative IRI.\n *\n * @param base the base IRI.\n * @param iri the relative IRI.\n *\n * @return the absolute IRI.\n */\n\n\napi.prependBase = (base, iri) => {\n  // skip IRI processing\n  if (base === null) {\n    return iri;\n  } // already an absolute IRI\n\n\n  if (api.isAbsolute(iri)) {\n    return iri;\n  } // parse base if it is a string\n\n\n  if (!base || types.isString(base)) {\n    base = api.parse(base || '');\n  } // parse given IRI\n\n\n  const rel = api.parse(iri); // per RFC3986 5.2.2\n\n  const transform = {\n    protocol: base.protocol || ''\n  };\n\n  if (rel.authority !== null) {\n    transform.authority = rel.authority;\n    transform.path = rel.path;\n    transform.query = rel.query;\n  } else {\n    transform.authority = base.authority;\n\n    if (rel.path === '') {\n      transform.path = base.path;\n\n      if (rel.query !== null) {\n        transform.query = rel.query;\n      } else {\n        transform.query = base.query;\n      }\n    } else {\n      if (rel.path.indexOf('/') === 0) {\n        // IRI represents an absolute path\n        transform.path = rel.path;\n      } else {\n        // merge paths\n        let path = base.path; // append relative path to the end of the last directory from base\n\n        path = path.substr(0, path.lastIndexOf('/') + 1);\n\n        if ((path.length > 0 || base.authority) && path.substr(-1) !== '/') {\n          path += '/';\n        }\n\n        path += rel.path;\n        transform.path = path;\n      }\n\n      transform.query = rel.query;\n    }\n  }\n\n  if (rel.path !== '') {\n    // remove slashes and dots in path\n    transform.path = api.removeDotSegments(transform.path);\n  } // construct URL\n\n\n  let rval = transform.protocol;\n\n  if (transform.authority !== null) {\n    rval += '//' + transform.authority;\n  }\n\n  rval += transform.path;\n\n  if (transform.query !== null) {\n    rval += '?' + transform.query;\n  }\n\n  if (rel.fragment !== null) {\n    rval += '#' + rel.fragment;\n  } // handle empty base\n\n\n  if (rval === '') {\n    rval = './';\n  }\n\n  return rval;\n};\n/**\n * Removes a base IRI from the given absolute IRI.\n *\n * @param base the base IRI.\n * @param iri the absolute IRI.\n *\n * @return the relative IRI if relative to base, otherwise the absolute IRI.\n */\n\n\napi.removeBase = (base, iri) => {\n  // skip IRI processing\n  if (base === null) {\n    return iri;\n  }\n\n  if (!base || types.isString(base)) {\n    base = api.parse(base || '');\n  } // establish base root\n\n\n  let root = '';\n\n  if (base.href !== '') {\n    root += (base.protocol || '') + '//' + (base.authority || '');\n  } else if (iri.indexOf('//')) {\n    // support network-path reference with empty base\n    root += '//';\n  } // IRI not relative to base\n\n\n  if (iri.indexOf(root) !== 0) {\n    return iri;\n  } // remove root from IRI and parse remainder\n\n\n  const rel = api.parse(iri.substr(root.length)); // remove path segments that match (do not remove last segment unless there\n  // is a hash or query)\n\n  const baseSegments = base.normalizedPath.split('/');\n  const iriSegments = rel.normalizedPath.split('/');\n  const last = rel.fragment || rel.query ? 0 : 1;\n\n  while (baseSegments.length > 0 && iriSegments.length > last) {\n    if (baseSegments[0] !== iriSegments[0]) {\n      break;\n    }\n\n    baseSegments.shift();\n    iriSegments.shift();\n  } // use '../' for each non-matching base segment\n\n\n  let rval = '';\n\n  if (baseSegments.length > 0) {\n    // don't count the last segment (if it ends with '/' last path doesn't\n    // count and if it doesn't end with '/' it isn't a path)\n    baseSegments.pop();\n\n    for (let i = 0; i < baseSegments.length; ++i) {\n      rval += '../';\n    }\n  } // prepend remaining segments\n\n\n  rval += iriSegments.join('/'); // add query and hash\n\n  if (rel.query !== null) {\n    rval += '?' + rel.query;\n  }\n\n  if (rel.fragment !== null) {\n    rval += '#' + rel.fragment;\n  } // handle empty base\n\n\n  if (rval === '') {\n    rval = './';\n  }\n\n  return rval;\n};\n/**\n * Removes dot segments from a URL path.\n *\n * @param path the path to remove dot segments from.\n */\n\n\napi.removeDotSegments = path => {\n  // RFC 3986 5.2.4 (reworked)\n  // empty path shortcut\n  if (path.length === 0) {\n    return '';\n  }\n\n  const input = path.split('/');\n  const output = [];\n\n  while (input.length > 0) {\n    const next = input.shift();\n    const done = input.length === 0;\n\n    if (next === '.') {\n      if (done) {\n        // ensure output has trailing /\n        output.push('');\n      }\n\n      continue;\n    }\n\n    if (next === '..') {\n      output.pop();\n\n      if (done) {\n        // ensure output has trailing /\n        output.push('');\n      }\n\n      continue;\n    }\n\n    output.push(next);\n  } // if path was absolute, ensure output has leading /\n\n\n  if (path[0] === '/' && output.length > 0 && output[0] !== '') {\n    output.unshift('');\n  }\n\n  if (output.length === 1 && output[0] === '') {\n    return '/';\n  }\n\n  return output.join('/');\n}; // TODO: time better isAbsolute/isRelative checks using full regexes:\n// http://jmrware.com/articles/2009/uri_regexp/URI_regex.html\n// regex to check for absolute IRI (starting scheme and ':') or blank node IRI\n\n\nconst isAbsoluteRegex = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^\\s]*$/;\n/**\n * Returns true if the given value is an absolute IRI or blank node IRI, false\n * if not.\n * Note: This weak check only checks for a correct starting scheme.\n *\n * @param v the value to check.\n *\n * @return true if the value is an absolute IRI, false if not.\n */\n\napi.isAbsolute = v => types.isString(v) && isAbsoluteRegex.test(v);\n/**\n * Returns true if the given value is a relative IRI, false if not.\n * Note: this is a weak check.\n *\n * @param v the value to check.\n *\n * @return true if the value is a relative IRI, false if not.\n */\n\n\napi.isRelative = v => types.isString(v);","map":{"version":3,"sources":["/app/node_modules/jsonld/lib/url.js"],"names":["types","require","api","module","exports","parsers","simple","keys","regex","full","parse","str","parser","parsed","o","m","exec","i","length","undefined","scheme","port","href","replace","authority","normalizedPath","removeDotSegments","path","prependBase","base","iri","isAbsolute","isString","rel","transform","protocol","query","indexOf","substr","lastIndexOf","rval","fragment","removeBase","root","baseSegments","split","iriSegments","last","shift","pop","join","input","output","next","done","push","unshift","isAbsoluteRegex","v","test","isRelative"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst types = require('./types');\n\nconst api = {};\nmodule.exports = api;\n\n// define URL parser\n// parseUri 1.2.2\n// (c) Steven Levithan <stevenlevithan.com>\n// MIT License\n// with local jsonld.js modifications\napi.parsers = {\n  simple: {\n    // RFC 3986 basic parts\n    keys: [\n      'href', 'scheme', 'authority', 'path', 'query', 'fragment'\n    ],\n    /* eslint-disable-next-line max-len */\n    regex: /^(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/\n  },\n  full: {\n    keys: [\n      'href', 'protocol', 'scheme', 'authority', 'auth', 'user', 'password',\n      'hostname', 'port', 'path', 'directory', 'file', 'query', 'fragment'\n    ],\n    /* eslint-disable-next-line max-len */\n    regex: /^(([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?))?(?:(((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/\n  }\n};\napi.parse = (str, parser) => {\n  const parsed = {};\n  const o = api.parsers[parser || 'full'];\n  const m = o.regex.exec(str);\n  let i = o.keys.length;\n  while(i--) {\n    parsed[o.keys[i]] = (m[i] === undefined) ? null : m[i];\n  }\n\n  // remove default ports in found in URLs\n  if((parsed.scheme === 'https' && parsed.port === '443') ||\n    (parsed.scheme === 'http' && parsed.port === '80')) {\n    parsed.href = parsed.href.replace(':' + parsed.port, '');\n    parsed.authority = parsed.authority.replace(':' + parsed.port, '');\n    parsed.port = null;\n  }\n\n  parsed.normalizedPath = api.removeDotSegments(parsed.path);\n  return parsed;\n};\n\n/**\n * Prepends a base IRI to the given relative IRI.\n *\n * @param base the base IRI.\n * @param iri the relative IRI.\n *\n * @return the absolute IRI.\n */\napi.prependBase = (base, iri) => {\n  // skip IRI processing\n  if(base === null) {\n    return iri;\n  }\n  // already an absolute IRI\n  if(api.isAbsolute(iri)) {\n    return iri;\n  }\n\n  // parse base if it is a string\n  if(!base || types.isString(base)) {\n    base = api.parse(base || '');\n  }\n\n  // parse given IRI\n  const rel = api.parse(iri);\n\n  // per RFC3986 5.2.2\n  const transform = {\n    protocol: base.protocol || ''\n  };\n\n  if(rel.authority !== null) {\n    transform.authority = rel.authority;\n    transform.path = rel.path;\n    transform.query = rel.query;\n  } else {\n    transform.authority = base.authority;\n\n    if(rel.path === '') {\n      transform.path = base.path;\n      if(rel.query !== null) {\n        transform.query = rel.query;\n      } else {\n        transform.query = base.query;\n      }\n    } else {\n      if(rel.path.indexOf('/') === 0) {\n        // IRI represents an absolute path\n        transform.path = rel.path;\n      } else {\n        // merge paths\n        let path = base.path;\n\n        // append relative path to the end of the last directory from base\n        path = path.substr(0, path.lastIndexOf('/') + 1);\n        if((path.length > 0 || base.authority) && path.substr(-1) !== '/') {\n          path += '/';\n        }\n        path += rel.path;\n\n        transform.path = path;\n      }\n      transform.query = rel.query;\n    }\n  }\n\n  if(rel.path !== '') {\n    // remove slashes and dots in path\n    transform.path = api.removeDotSegments(transform.path);\n  }\n\n  // construct URL\n  let rval = transform.protocol;\n  if(transform.authority !== null) {\n    rval += '//' + transform.authority;\n  }\n  rval += transform.path;\n  if(transform.query !== null) {\n    rval += '?' + transform.query;\n  }\n  if(rel.fragment !== null) {\n    rval += '#' + rel.fragment;\n  }\n\n  // handle empty base\n  if(rval === '') {\n    rval = './';\n  }\n\n  return rval;\n};\n\n/**\n * Removes a base IRI from the given absolute IRI.\n *\n * @param base the base IRI.\n * @param iri the absolute IRI.\n *\n * @return the relative IRI if relative to base, otherwise the absolute IRI.\n */\napi.removeBase = (base, iri) => {\n  // skip IRI processing\n  if(base === null) {\n    return iri;\n  }\n\n  if(!base || types.isString(base)) {\n    base = api.parse(base || '');\n  }\n\n  // establish base root\n  let root = '';\n  if(base.href !== '') {\n    root += (base.protocol || '') + '//' + (base.authority || '');\n  } else if(iri.indexOf('//')) {\n    // support network-path reference with empty base\n    root += '//';\n  }\n\n  // IRI not relative to base\n  if(iri.indexOf(root) !== 0) {\n    return iri;\n  }\n\n  // remove root from IRI and parse remainder\n  const rel = api.parse(iri.substr(root.length));\n\n  // remove path segments that match (do not remove last segment unless there\n  // is a hash or query)\n  const baseSegments = base.normalizedPath.split('/');\n  const iriSegments = rel.normalizedPath.split('/');\n  const last = (rel.fragment || rel.query) ? 0 : 1;\n  while(baseSegments.length > 0 && iriSegments.length > last) {\n    if(baseSegments[0] !== iriSegments[0]) {\n      break;\n    }\n    baseSegments.shift();\n    iriSegments.shift();\n  }\n\n  // use '../' for each non-matching base segment\n  let rval = '';\n  if(baseSegments.length > 0) {\n    // don't count the last segment (if it ends with '/' last path doesn't\n    // count and if it doesn't end with '/' it isn't a path)\n    baseSegments.pop();\n    for(let i = 0; i < baseSegments.length; ++i) {\n      rval += '../';\n    }\n  }\n\n  // prepend remaining segments\n  rval += iriSegments.join('/');\n\n  // add query and hash\n  if(rel.query !== null) {\n    rval += '?' + rel.query;\n  }\n  if(rel.fragment !== null) {\n    rval += '#' + rel.fragment;\n  }\n\n  // handle empty base\n  if(rval === '') {\n    rval = './';\n  }\n\n  return rval;\n};\n\n/**\n * Removes dot segments from a URL path.\n *\n * @param path the path to remove dot segments from.\n */\napi.removeDotSegments = path => {\n  // RFC 3986 5.2.4 (reworked)\n\n  // empty path shortcut\n  if(path.length === 0) {\n    return '';\n  }\n\n  const input = path.split('/');\n  const output = [];\n\n  while(input.length > 0) {\n    const next = input.shift();\n    const done = input.length === 0;\n\n    if(next === '.') {\n      if(done) {\n        // ensure output has trailing /\n        output.push('');\n      }\n      continue;\n    }\n\n    if(next === '..') {\n      output.pop();\n      if(done) {\n        // ensure output has trailing /\n        output.push('');\n      }\n      continue;\n    }\n\n    output.push(next);\n  }\n\n  // if path was absolute, ensure output has leading /\n  if(path[0] === '/' && output.length > 0 && output[0] !== '') {\n    output.unshift('');\n  }\n  if(output.length === 1 && output[0] === '') {\n    return '/';\n  }\n\n  return output.join('/');\n};\n\n// TODO: time better isAbsolute/isRelative checks using full regexes:\n// http://jmrware.com/articles/2009/uri_regexp/URI_regex.html\n\n// regex to check for absolute IRI (starting scheme and ':') or blank node IRI\nconst isAbsoluteRegex = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^\\s]*$/;\n\n/**\n * Returns true if the given value is an absolute IRI or blank node IRI, false\n * if not.\n * Note: This weak check only checks for a correct starting scheme.\n *\n * @param v the value to check.\n *\n * @return true if the value is an absolute IRI, false if not.\n */\napi.isAbsolute = v => types.isString(v) && isAbsoluteRegex.test(v);\n\n/**\n * Returns true if the given value is a relative IRI, false if not.\n * Note: this is a weak check.\n *\n * @param v the value to check.\n *\n * @return true if the value is a relative IRI, false if not.\n */\napi.isRelative = v => types.isString(v);\n"]},"metadata":{},"sourceType":"script"}