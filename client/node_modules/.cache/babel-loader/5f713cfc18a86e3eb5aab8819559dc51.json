{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {\n  isKeyword\n} = require('./context');\n\nconst graphTypes = require('./graphTypes');\n\nconst types = require('./types');\n\nconst util = require('./util');\n\nconst url = require('./url');\n\nconst JsonLdError = require('./JsonLdError');\n\nconst {\n  createNodeMap: _createNodeMap,\n  mergeNodeMapGraphs: _mergeNodeMapGraphs\n} = require('./nodeMap');\n\nconst api = {};\nmodule.exports = api;\n/**\n * Performs JSON-LD `merged` framing.\n *\n * @param input the expanded JSON-LD to frame.\n * @param frame the expanded JSON-LD frame to use.\n * @param options the framing options.\n *\n * @return the framed output.\n */\n\napi.frameMergedOrDefault = (input, frame, options) => {\n  // create framing state\n  const state = {\n    options,\n    embedded: false,\n    graph: '@default',\n    graphMap: {\n      '@default': {}\n    },\n    subjectStack: [],\n    link: {},\n    bnodeMap: {}\n  }; // produce a map of all graphs and name each bnode\n  // FIXME: currently uses subjects from @merged graph only\n\n  const issuer = new util.IdentifierIssuer('_:b');\n\n  _createNodeMap(input, state.graphMap, '@default', issuer);\n\n  if (options.merged) {\n    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);\n    state.graph = '@merged';\n  }\n\n  state.subjects = state.graphMap[state.graph]; // frame the subjects\n\n  const framed = [];\n  api.frame(state, Object.keys(state.subjects).sort(), frame, framed); // If pruning blank nodes, find those to prune\n\n  if (options.pruneBlankNodeIdentifiers) {\n    // remove all blank nodes appearing only once, done in compaction\n    options.bnodesToClear = Object.keys(state.bnodeMap).filter(id => state.bnodeMap[id].length === 1);\n  } // remove @preserve from results\n\n\n  options.link = {};\n  return _cleanupPreserve(framed, options);\n};\n/**\n * Frames subjects according to the given frame.\n *\n * @param state the current framing state.\n * @param subjects the subjects to filter.\n * @param frame the frame.\n * @param parent the parent subject or top-level array.\n * @param property the parent property, initialized to null.\n */\n\n\napi.frame = (state, subjects, frame, parent, property = null) => {\n  // validate the frame\n  _validateFrame(frame);\n\n  frame = frame[0]; // get flags for current frame\n\n  const options = state.options;\n  const flags = {\n    embed: _getFrameFlag(frame, options, 'embed'),\n    explicit: _getFrameFlag(frame, options, 'explicit'),\n    requireAll: _getFrameFlag(frame, options, 'requireAll')\n  }; // get link for current graph\n\n  if (!state.link.hasOwnProperty(state.graph)) {\n    state.link[state.graph] = {};\n  }\n\n  const link = state.link[state.graph]; // filter out subjects that match the frame\n\n  const matches = _filterSubjects(state, subjects, frame, flags); // add matches to output\n\n\n  const ids = Object.keys(matches).sort();\n\n  for (const id of ids) {\n    const subject = matches[id];\n    /* Note: In order to treat each top-level match as a compartmentalized\n    result, clear the unique embedded subjects map when the property is null,\n    which only occurs at the top-level. */\n\n    if (property === null) {\n      state.uniqueEmbeds = {\n        [state.graph]: {}\n      };\n    } else {\n      state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};\n    }\n\n    if (flags.embed === '@link' && id in link) {\n      // TODO: may want to also match an existing linked subject against\n      // the current frame ... so different frames could produce different\n      // subjects that are only shared in-memory when the frames are the same\n      // add existing linked subject\n      _addFrameOutput(parent, property, link[id]);\n\n      continue;\n    } // start output for subject\n\n\n    const output = {\n      '@id': id\n    };\n\n    if (id.indexOf('_:') === 0) {\n      util.addValue(state.bnodeMap, id, output, {\n        propertyIsArray: true\n      });\n    }\n\n    link[id] = output; // validate @embed\n\n    if ((flags.embed === '@first' || flags.embed === '@last') && state.is11) {\n      throw new JsonLdError('Invalid JSON-LD syntax; invalid value of @embed.', 'jsonld.SyntaxError', {\n        code: 'invalid @embed value',\n        frame\n      });\n    }\n\n    if (!state.embedded && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {\n      // skip adding this node object to the top level, as it was\n      // already included in another node object\n      continue;\n    } // if embed is @never or if a circular reference would be created by an\n    // embed, the subject cannot be embedded, just add the reference;\n    // note that a circular reference won't occur when the embed flag is\n    // `@link` as the above check will short-circuit before reaching this point\n\n\n    if (state.embedded && (flags.embed === '@never' || _createsCircularReference(subject, state.graph, state.subjectStack))) {\n      _addFrameOutput(parent, property, output);\n\n      continue;\n    } // if only the first (or once) should be embedded\n\n\n    if (state.embedded && (flags.embed == '@first' || flags.embed == '@once') && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {\n      _addFrameOutput(parent, property, output);\n\n      continue;\n    } // if only the last match should be embedded\n\n\n    if (flags.embed === '@last') {\n      // remove any existing embed\n      if (id in state.uniqueEmbeds[state.graph]) {\n        _removeEmbed(state, id);\n      }\n    }\n\n    state.uniqueEmbeds[state.graph][id] = {\n      parent,\n      property\n    }; // push matching subject onto stack to enable circular embed checks\n\n    state.subjectStack.push({\n      subject,\n      graph: state.graph\n    }); // subject is also the name of a graph\n\n    if (id in state.graphMap) {\n      let recurse = false;\n      let subframe = null;\n\n      if (!('@graph' in frame)) {\n        recurse = state.graph !== '@merged';\n        subframe = {};\n      } else {\n        subframe = frame['@graph'][0];\n        recurse = !(id === '@merged' || id === '@default');\n\n        if (!types.isObject(subframe)) {\n          subframe = {};\n        }\n      }\n\n      if (recurse) {\n        // recurse into graph\n        api.frame({ ...state,\n          graph: id,\n          embedded: false\n        }, Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');\n      }\n    } // if frame has @included, recurse over its sub-frame\n\n\n    if ('@included' in frame) {\n      api.frame({ ...state,\n        embedded: false\n      }, subjects, frame['@included'], output, '@included');\n    } // iterate over subject properties\n\n\n    for (const prop of Object.keys(subject).sort()) {\n      // copy keywords to output\n      if (isKeyword(prop)) {\n        output[prop] = util.clone(subject[prop]);\n\n        if (prop === '@type') {\n          // count bnode values of @type\n          for (const type of subject['@type']) {\n            if (type.indexOf('_:') === 0) {\n              util.addValue(state.bnodeMap, type, output, {\n                propertyIsArray: true\n              });\n            }\n          }\n        }\n\n        continue;\n      } // explicit is on and property isn't in the frame, skip processing\n\n\n      if (flags.explicit && !(prop in frame)) {\n        continue;\n      } // add objects\n\n\n      for (const o of subject[prop]) {\n        const subframe = prop in frame ? frame[prop] : _createImplicitFrame(flags); // recurse into list\n\n        if (graphTypes.isList(o)) {\n          const subframe = frame[prop] && frame[prop][0] && frame[prop][0]['@list'] ? frame[prop][0]['@list'] : _createImplicitFrame(flags); // add empty list\n\n          const list = {\n            '@list': []\n          };\n\n          _addFrameOutput(output, prop, list); // add list objects\n\n\n          const src = o['@list'];\n\n          for (const oo of src) {\n            if (graphTypes.isSubjectReference(oo)) {\n              // recurse into subject reference\n              api.frame({ ...state,\n                embedded: true\n              }, [oo['@id']], subframe, list, '@list');\n            } else {\n              // include other values automatically\n              _addFrameOutput(list, '@list', util.clone(oo));\n            }\n          }\n        } else if (graphTypes.isSubjectReference(o)) {\n          // recurse into subject reference\n          api.frame({ ...state,\n            embedded: true\n          }, [o['@id']], subframe, output, prop);\n        } else if (_valueMatch(subframe[0], o)) {\n          // include other values, if they match\n          _addFrameOutput(output, prop, util.clone(o));\n        }\n      }\n    } // handle defaults\n\n\n    for (const prop of Object.keys(frame).sort()) {\n      // skip keywords\n      if (prop === '@type') {\n        if (!types.isObject(frame[prop][0]) || !('@default' in frame[prop][0])) {\n          continue;\n        } // allow through default types\n\n      } else if (isKeyword(prop)) {\n        continue;\n      } // if omit default is off, then include default values for properties\n      // that appear in the next frame but are not in the matching subject\n\n\n      const next = frame[prop][0] || {};\n\n      const omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');\n\n      if (!omitDefaultOn && !(prop in output)) {\n        let preserve = '@null';\n\n        if ('@default' in next) {\n          preserve = util.clone(next['@default']);\n        }\n\n        if (!types.isArray(preserve)) {\n          preserve = [preserve];\n        }\n\n        output[prop] = [{\n          '@preserve': preserve\n        }];\n      }\n    } // if embed reverse values by finding nodes having this subject as a value\n    // of the associated property\n\n\n    for (const reverseProp of Object.keys(frame['@reverse'] || {}).sort()) {\n      const subframe = frame['@reverse'][reverseProp];\n\n      for (const subject of Object.keys(state.subjects)) {\n        const nodeValues = util.getValues(state.subjects[subject], reverseProp);\n\n        if (nodeValues.some(v => v['@id'] === id)) {\n          // node has property referencing this subject, recurse\n          output['@reverse'] = output['@reverse'] || {};\n          util.addValue(output['@reverse'], reverseProp, [], {\n            propertyIsArray: true\n          });\n          api.frame({ ...state,\n            embedded: true\n          }, [subject], subframe, output['@reverse'][reverseProp], property);\n        }\n      }\n    } // add output to parent\n\n\n    _addFrameOutput(parent, property, output); // pop matching subject from circular ref-checking stack\n\n\n    state.subjectStack.pop();\n  }\n};\n/**\n * Replace `@null` with `null`, removing it from arrays.\n *\n * @param input the framed, compacted output.\n * @param options the framing options used.\n *\n * @return the resulting output.\n */\n\n\napi.cleanupNull = (input, options) => {\n  // recurse through arrays\n  if (types.isArray(input)) {\n    const noNulls = input.map(v => api.cleanupNull(v, options));\n    return noNulls.filter(v => v); // removes nulls from array\n  }\n\n  if (input === '@null') {\n    return null;\n  }\n\n  if (types.isObject(input)) {\n    // handle in-memory linked nodes\n    if ('@id' in input) {\n      const id = input['@id'];\n\n      if (options.link.hasOwnProperty(id)) {\n        const idx = options.link[id].indexOf(input);\n\n        if (idx !== -1) {\n          // already visited\n          return options.link[id][idx];\n        } // prevent circular visitation\n\n\n        options.link[id].push(input);\n      } else {\n        // prevent circular visitation\n        options.link[id] = [input];\n      }\n    }\n\n    for (const key in input) {\n      input[key] = api.cleanupNull(input[key], options);\n    }\n  }\n\n  return input;\n};\n/**\n * Creates an implicit frame when recursing through subject matches. If\n * a frame doesn't have an explicit frame for a particular property, then\n * a wildcard child frame will be created that uses the same flags that the\n * parent frame used.\n *\n * @param flags the current framing flags.\n *\n * @return the implicit frame.\n */\n\n\nfunction _createImplicitFrame(flags) {\n  const frame = {};\n\n  for (const key in flags) {\n    if (flags[key] !== undefined) {\n      frame['@' + key] = [flags[key]];\n    }\n  }\n\n  return [frame];\n}\n/**\n * Checks the current subject stack to see if embedding the given subject\n * would cause a circular reference.\n *\n * @param subjectToEmbed the subject to embed.\n * @param graph the graph the subject to embed is in.\n * @param subjectStack the current stack of subjects.\n *\n * @return true if a circular reference would be created, false if not.\n */\n\n\nfunction _createsCircularReference(subjectToEmbed, graph, subjectStack) {\n  for (let i = subjectStack.length - 1; i >= 0; --i) {\n    const subject = subjectStack[i];\n\n    if (subject.graph === graph && subject.subject['@id'] === subjectToEmbed['@id']) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Gets the frame flag value for the given flag name.\n *\n * @param frame the frame.\n * @param options the framing options.\n * @param name the flag name.\n *\n * @return the flag value.\n */\n\n\nfunction _getFrameFlag(frame, options, name) {\n  const flag = '@' + name;\n  let rval = flag in frame ? frame[flag][0] : options[name];\n\n  if (name === 'embed') {\n    // default is \"@last\"\n    // backwards-compatibility support for \"embed\" maps:\n    // true => \"@last\"\n    // false => \"@never\"\n    if (rval === true) {\n      rval = '@once';\n    } else if (rval === false) {\n      rval = '@never';\n    } else if (rval !== '@always' && rval !== '@never' && rval !== '@link' && rval !== '@first' && rval !== '@last' && rval !== '@once') {\n      throw new JsonLdError('Invalid JSON-LD syntax; invalid value of @embed.', 'jsonld.SyntaxError', {\n        code: 'invalid @embed value',\n        frame\n      });\n    }\n  }\n\n  return rval;\n}\n/**\n * Validates a JSON-LD frame, throwing an exception if the frame is invalid.\n *\n * @param frame the frame to validate.\n */\n\n\nfunction _validateFrame(frame) {\n  if (!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {\n    throw new JsonLdError('Invalid JSON-LD syntax; a JSON-LD frame must be a single object.', 'jsonld.SyntaxError', {\n      frame\n    });\n  }\n\n  if ('@id' in frame[0]) {\n    for (const id of util.asArray(frame[0]['@id'])) {\n      // @id must be wildcard or an IRI\n      if (!(types.isObject(id) || url.isAbsolute(id)) || types.isString(id) && id.indexOf('_:') === 0) {\n        throw new JsonLdError('Invalid JSON-LD syntax; invalid @id in frame.', 'jsonld.SyntaxError', {\n          code: 'invalid frame',\n          frame\n        });\n      }\n    }\n  }\n\n  if ('@type' in frame[0]) {\n    for (const type of util.asArray(frame[0]['@type'])) {\n      // @id must be wildcard or an IRI\n      if (!(types.isObject(type) || url.isAbsolute(type)) || types.isString(type) && type.indexOf('_:') === 0) {\n        throw new JsonLdError('Invalid JSON-LD syntax; invalid @type in frame.', 'jsonld.SyntaxError', {\n          code: 'invalid frame',\n          frame\n        });\n      }\n    }\n  }\n}\n/**\n * Returns a map of all of the subjects that match a parsed frame.\n *\n * @param state the current framing state.\n * @param subjects the set of subjects to filter.\n * @param frame the parsed frame.\n * @param flags the frame flags.\n *\n * @return all of the matched subjects.\n */\n\n\nfunction _filterSubjects(state, subjects, frame, flags) {\n  // filter subjects in @id order\n  const rval = {};\n\n  for (const id of subjects) {\n    const subject = state.graphMap[state.graph][id];\n\n    if (_filterSubject(state, subject, frame, flags)) {\n      rval[id] = subject;\n    }\n  }\n\n  return rval;\n}\n/**\n * Returns true if the given subject matches the given frame.\n *\n * Matches either based on explicit type inclusion where the node has any\n * type listed in the frame. If the frame has empty types defined matches\n * nodes not having a @type. If the frame has a type of {} defined matches\n * nodes having any type defined.\n *\n * Otherwise, does duck typing, where the node must have all of the\n * properties defined in the frame.\n *\n * @param state the current framing state.\n * @param subject the subject to check.\n * @param frame the frame to check.\n * @param flags the frame flags.\n *\n * @return true if the subject matches, false if not.\n */\n\n\nfunction _filterSubject(state, subject, frame, flags) {\n  // check ducktype\n  let wildcard = true;\n  let matchesSome = false;\n\n  for (const key in frame) {\n    let matchThis = false;\n    const nodeValues = util.getValues(subject, key);\n    const isEmpty = util.getValues(frame, key).length === 0;\n\n    if (key === '@id') {\n      // match on no @id or any matching @id, including wildcard\n      if (types.isEmptyObject(frame['@id'][0] || {})) {\n        matchThis = true;\n      } else if (frame['@id'].length >= 0) {\n        matchThis = frame['@id'].includes(nodeValues[0]);\n      }\n\n      if (!flags.requireAll) {\n        return matchThis;\n      }\n    } else if (key === '@type') {\n      // check @type (object value means 'any' type,\n      // fall through to ducktyping)\n      wildcard = false;\n\n      if (isEmpty) {\n        if (nodeValues.length > 0) {\n          // don't match on no @type\n          return false;\n        }\n\n        matchThis = true;\n      } else if (frame['@type'].length === 1 && types.isEmptyObject(frame['@type'][0])) {\n        // match on wildcard @type if there is a type\n        matchThis = nodeValues.length > 0;\n      } else {\n        // match on a specific @type\n        for (const type of frame['@type']) {\n          if (types.isObject(type) && '@default' in type) {\n            // match on default object\n            matchThis = true;\n          } else {\n            matchThis = matchThis || nodeValues.some(tt => tt === type);\n          }\n        }\n      }\n\n      if (!flags.requireAll) {\n        return matchThis;\n      }\n    } else if (isKeyword(key)) {\n      continue;\n    } else {\n      // Force a copy of this frame entry so it can be manipulated\n      const thisFrame = util.getValues(frame, key)[0];\n      let hasDefault = false;\n\n      if (thisFrame) {\n        _validateFrame([thisFrame]);\n\n        hasDefault = '@default' in thisFrame;\n      } // no longer a wildcard pattern if frame has any non-keyword properties\n\n\n      wildcard = false; // skip, but allow match if node has no value for property, and frame has\n      // a default value\n\n      if (nodeValues.length === 0 && hasDefault) {\n        continue;\n      } // if frame value is empty, don't match if subject has any value\n\n\n      if (nodeValues.length > 0 && isEmpty) {\n        return false;\n      }\n\n      if (thisFrame === undefined) {\n        // node does not match if values is not empty and the value of property\n        // in frame is match none.\n        if (nodeValues.length > 0) {\n          return false;\n        }\n\n        matchThis = true;\n      } else {\n        if (graphTypes.isList(thisFrame)) {\n          const listValue = thisFrame['@list'][0];\n\n          if (graphTypes.isList(nodeValues[0])) {\n            const nodeListValues = nodeValues[0]['@list'];\n\n            if (graphTypes.isValue(listValue)) {\n              // match on any matching value\n              matchThis = nodeListValues.some(lv => _valueMatch(listValue, lv));\n            } else if (graphTypes.isSubject(listValue) || graphTypes.isSubjectReference(listValue)) {\n              matchThis = nodeListValues.some(lv => _nodeMatch(state, listValue, lv, flags));\n            }\n          }\n        } else if (graphTypes.isValue(thisFrame)) {\n          matchThis = nodeValues.some(nv => _valueMatch(thisFrame, nv));\n        } else if (graphTypes.isSubjectReference(thisFrame)) {\n          matchThis = nodeValues.some(nv => _nodeMatch(state, thisFrame, nv, flags));\n        } else if (types.isObject(thisFrame)) {\n          matchThis = nodeValues.length > 0;\n        } else {\n          matchThis = false;\n        }\n      }\n    } // all non-defaulted values must match if requireAll is set\n\n\n    if (!matchThis && flags.requireAll) {\n      return false;\n    }\n\n    matchesSome = matchesSome || matchThis;\n  } // return true if wildcard or subject matches some properties\n\n\n  return wildcard || matchesSome;\n}\n/**\n * Removes an existing embed.\n *\n * @param state the current framing state.\n * @param id the @id of the embed to remove.\n */\n\n\nfunction _removeEmbed(state, id) {\n  // get existing embed\n  const embeds = state.uniqueEmbeds[state.graph];\n  const embed = embeds[id];\n  const parent = embed.parent;\n  const property = embed.property; // create reference to replace embed\n\n  const subject = {\n    '@id': id\n  }; // remove existing embed\n\n  if (types.isArray(parent)) {\n    // replace subject with reference\n    for (let i = 0; i < parent.length; ++i) {\n      if (util.compareValues(parent[i], subject)) {\n        parent[i] = subject;\n        break;\n      }\n    }\n  } else {\n    // replace subject with reference\n    const useArray = types.isArray(parent[property]);\n    util.removeValue(parent, property, subject, {\n      propertyIsArray: useArray\n    });\n    util.addValue(parent, property, subject, {\n      propertyIsArray: useArray\n    });\n  } // recursively remove dependent dangling embeds\n\n\n  const removeDependents = id => {\n    // get embed keys as a separate array to enable deleting keys in map\n    const ids = Object.keys(embeds);\n\n    for (const next of ids) {\n      if (next in embeds && types.isObject(embeds[next].parent) && embeds[next].parent['@id'] === id) {\n        delete embeds[next];\n        removeDependents(next);\n      }\n    }\n  };\n\n  removeDependents(id);\n}\n/**\n * Removes the @preserve keywords from expanded result of framing.\n *\n * @param input the framed, framed output.\n * @param options the framing options used.\n *\n * @return the resulting output.\n */\n\n\nfunction _cleanupPreserve(input, options) {\n  // recurse through arrays\n  if (types.isArray(input)) {\n    return input.map(value => _cleanupPreserve(value, options));\n  }\n\n  if (types.isObject(input)) {\n    // remove @preserve\n    if ('@preserve' in input) {\n      return input['@preserve'][0];\n    } // skip @values\n\n\n    if (graphTypes.isValue(input)) {\n      return input;\n    } // recurse through @lists\n\n\n    if (graphTypes.isList(input)) {\n      input['@list'] = _cleanupPreserve(input['@list'], options);\n      return input;\n    } // handle in-memory linked nodes\n\n\n    if ('@id' in input) {\n      const id = input['@id'];\n\n      if (options.link.hasOwnProperty(id)) {\n        const idx = options.link[id].indexOf(input);\n\n        if (idx !== -1) {\n          // already visited\n          return options.link[id][idx];\n        } // prevent circular visitation\n\n\n        options.link[id].push(input);\n      } else {\n        // prevent circular visitation\n        options.link[id] = [input];\n      }\n    } // recurse through properties\n\n\n    for (const prop in input) {\n      // potentially remove the id, if it is an unreference bnode\n      if (prop === '@id' && options.bnodesToClear.includes(input[prop])) {\n        delete input['@id'];\n        continue;\n      }\n\n      input[prop] = _cleanupPreserve(input[prop], options);\n    }\n  }\n\n  return input;\n}\n/**\n * Adds framing output to the given parent.\n *\n * @param parent the parent to add to.\n * @param property the parent property.\n * @param output the output to add.\n */\n\n\nfunction _addFrameOutput(parent, property, output) {\n  if (types.isObject(parent)) {\n    util.addValue(parent, property, output, {\n      propertyIsArray: true\n    });\n  } else {\n    parent.push(output);\n  }\n}\n/**\n * Node matches if it is a node, and matches the pattern as a frame.\n *\n * @param state the current framing state.\n * @param pattern used to match value\n * @param value to check\n * @param flags the frame flags.\n */\n\n\nfunction _nodeMatch(state, pattern, value, flags) {\n  if (!('@id' in value)) {\n    return false;\n  }\n\n  const nodeObject = state.subjects[value['@id']];\n  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);\n}\n/**\n * Value matches if it is a value and matches the value pattern\n *\n * * `pattern` is empty\n * * @values are the same, or `pattern[@value]` is a wildcard, and\n * * @types are the same or `value[@type]` is not null\n *   and `pattern[@type]` is `{}`, or `value[@type]` is null\n *   and `pattern[@type]` is null or `[]`, and\n * * @languages are the same or `value[@language]` is not null\n *   and `pattern[@language]` is `{}`, or `value[@language]` is null\n *   and `pattern[@language]` is null or `[]`.\n *\n * @param pattern used to match value\n * @param value to check\n */\n\n\nfunction _valueMatch(pattern, value) {\n  const v1 = value['@value'];\n  const t1 = value['@type'];\n  const l1 = value['@language'];\n  const v2 = pattern['@value'] ? types.isArray(pattern['@value']) ? pattern['@value'] : [pattern['@value']] : [];\n  const t2 = pattern['@type'] ? types.isArray(pattern['@type']) ? pattern['@type'] : [pattern['@type']] : [];\n  const l2 = pattern['@language'] ? types.isArray(pattern['@language']) ? pattern['@language'] : [pattern['@language']] : [];\n\n  if (v2.length === 0 && t2.length === 0 && l2.length === 0) {\n    return true;\n  }\n\n  if (!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {\n    return false;\n  }\n\n  if (!(!t1 && t2.length === 0 || t2.includes(t1) || t1 && types.isEmptyObject(t2[0]))) {\n    return false;\n  }\n\n  if (!(!l1 && l2.length === 0 || l2.includes(l1) || l1 && types.isEmptyObject(l2[0]))) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/app/node_modules/jsonld/lib/frame.js"],"names":["isKeyword","require","graphTypes","types","util","url","JsonLdError","createNodeMap","_createNodeMap","mergeNodeMapGraphs","_mergeNodeMapGraphs","api","module","exports","frameMergedOrDefault","input","frame","options","state","embedded","graph","graphMap","subjectStack","link","bnodeMap","issuer","IdentifierIssuer","merged","subjects","framed","Object","keys","sort","pruneBlankNodeIdentifiers","bnodesToClear","filter","id","length","_cleanupPreserve","parent","property","_validateFrame","flags","embed","_getFrameFlag","explicit","requireAll","hasOwnProperty","matches","_filterSubjects","ids","subject","uniqueEmbeds","_addFrameOutput","output","indexOf","addValue","propertyIsArray","is11","code","_createsCircularReference","_removeEmbed","push","recurse","subframe","isObject","prop","clone","type","o","_createImplicitFrame","isList","list","src","oo","isSubjectReference","_valueMatch","next","omitDefaultOn","preserve","isArray","reverseProp","nodeValues","getValues","some","v","pop","cleanupNull","noNulls","map","idx","key","undefined","subjectToEmbed","i","name","flag","rval","asArray","isAbsolute","isString","_filterSubject","wildcard","matchesSome","matchThis","isEmpty","isEmptyObject","includes","tt","thisFrame","hasDefault","listValue","nodeListValues","isValue","lv","isSubject","_nodeMatch","nv","embeds","compareValues","useArray","removeValue","removeDependents","value","pattern","nodeObject","v1","t1","l1","v2","t2","l2"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {isKeyword} = require('./context');\nconst graphTypes = require('./graphTypes');\nconst types = require('./types');\nconst util = require('./util');\nconst url = require('./url');\nconst JsonLdError = require('./JsonLdError');\nconst {\n  createNodeMap: _createNodeMap,\n  mergeNodeMapGraphs: _mergeNodeMapGraphs\n} = require('./nodeMap');\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Performs JSON-LD `merged` framing.\n *\n * @param input the expanded JSON-LD to frame.\n * @param frame the expanded JSON-LD frame to use.\n * @param options the framing options.\n *\n * @return the framed output.\n */\napi.frameMergedOrDefault = (input, frame, options) => {\n  // create framing state\n  const state = {\n    options,\n    embedded: false,\n    graph: '@default',\n    graphMap: {'@default': {}},\n    subjectStack: [],\n    link: {},\n    bnodeMap: {}\n  };\n\n  // produce a map of all graphs and name each bnode\n  // FIXME: currently uses subjects from @merged graph only\n  const issuer = new util.IdentifierIssuer('_:b');\n  _createNodeMap(input, state.graphMap, '@default', issuer);\n  if(options.merged) {\n    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);\n    state.graph = '@merged';\n  }\n  state.subjects = state.graphMap[state.graph];\n\n  // frame the subjects\n  const framed = [];\n  api.frame(state, Object.keys(state.subjects).sort(), frame, framed);\n\n  // If pruning blank nodes, find those to prune\n  if(options.pruneBlankNodeIdentifiers) {\n    // remove all blank nodes appearing only once, done in compaction\n    options.bnodesToClear =\n      Object.keys(state.bnodeMap).filter(id => state.bnodeMap[id].length === 1);\n  }\n\n  // remove @preserve from results\n  options.link = {};\n  return _cleanupPreserve(framed, options);\n};\n\n/**\n * Frames subjects according to the given frame.\n *\n * @param state the current framing state.\n * @param subjects the subjects to filter.\n * @param frame the frame.\n * @param parent the parent subject or top-level array.\n * @param property the parent property, initialized to null.\n */\napi.frame = (state, subjects, frame, parent, property = null) => {\n  // validate the frame\n  _validateFrame(frame);\n  frame = frame[0];\n\n  // get flags for current frame\n  const options = state.options;\n  const flags = {\n    embed: _getFrameFlag(frame, options, 'embed'),\n    explicit: _getFrameFlag(frame, options, 'explicit'),\n    requireAll: _getFrameFlag(frame, options, 'requireAll')\n  };\n\n  // get link for current graph\n  if(!state.link.hasOwnProperty(state.graph)) {\n    state.link[state.graph] = {};\n  }\n  const link = state.link[state.graph];\n\n  // filter out subjects that match the frame\n  const matches = _filterSubjects(state, subjects, frame, flags);\n\n  // add matches to output\n  const ids = Object.keys(matches).sort();\n  for(const id of ids) {\n    const subject = matches[id];\n\n    /* Note: In order to treat each top-level match as a compartmentalized\n    result, clear the unique embedded subjects map when the property is null,\n    which only occurs at the top-level. */\n    if(property === null) {\n      state.uniqueEmbeds = {[state.graph]: {}};\n    } else {\n      state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};\n    }\n\n    if(flags.embed === '@link' && id in link) {\n      // TODO: may want to also match an existing linked subject against\n      // the current frame ... so different frames could produce different\n      // subjects that are only shared in-memory when the frames are the same\n\n      // add existing linked subject\n      _addFrameOutput(parent, property, link[id]);\n      continue;\n    }\n\n    // start output for subject\n    const output = {'@id': id};\n    if(id.indexOf('_:') === 0) {\n      util.addValue(state.bnodeMap, id, output, {propertyIsArray: true});\n    }\n    link[id] = output;\n\n    // validate @embed\n    if((flags.embed === '@first' || flags.embed === '@last') && state.is11) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; invalid value of @embed.',\n        'jsonld.SyntaxError', {code: 'invalid @embed value', frame});\n    }\n\n    if(!state.embedded && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {\n      // skip adding this node object to the top level, as it was\n      // already included in another node object\n      continue;\n    }\n\n    // if embed is @never or if a circular reference would be created by an\n    // embed, the subject cannot be embedded, just add the reference;\n    // note that a circular reference won't occur when the embed flag is\n    // `@link` as the above check will short-circuit before reaching this point\n    if(state.embedded &&\n      (flags.embed === '@never' ||\n      _createsCircularReference(subject, state.graph, state.subjectStack))) {\n      _addFrameOutput(parent, property, output);\n      continue;\n    }\n\n    // if only the first (or once) should be embedded\n    if(state.embedded &&\n       (flags.embed == '@first' || flags.embed == '@once') &&\n       state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {\n      _addFrameOutput(parent, property, output);\n      continue;\n    }\n\n    // if only the last match should be embedded\n    if(flags.embed === '@last') {\n      // remove any existing embed\n      if(id in state.uniqueEmbeds[state.graph]) {\n        _removeEmbed(state, id);\n      }\n    }\n\n    state.uniqueEmbeds[state.graph][id] = {parent, property};\n\n    // push matching subject onto stack to enable circular embed checks\n    state.subjectStack.push({subject, graph: state.graph});\n\n    // subject is also the name of a graph\n    if(id in state.graphMap) {\n      let recurse = false;\n      let subframe = null;\n      if(!('@graph' in frame)) {\n        recurse = state.graph !== '@merged';\n        subframe = {};\n      } else {\n        subframe = frame['@graph'][0];\n        recurse = !(id === '@merged' || id === '@default');\n        if(!types.isObject(subframe)) {\n          subframe = {};\n        }\n      }\n\n      if(recurse) {\n        // recurse into graph\n        api.frame(\n          {...state, graph: id, embedded: false},\n          Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');\n      }\n    }\n\n    // if frame has @included, recurse over its sub-frame\n    if('@included' in frame) {\n      api.frame(\n        {...state, embedded: false},\n        subjects, frame['@included'], output, '@included');\n    }\n\n    // iterate over subject properties\n    for(const prop of Object.keys(subject).sort()) {\n      // copy keywords to output\n      if(isKeyword(prop)) {\n        output[prop] = util.clone(subject[prop]);\n\n        if(prop === '@type') {\n          // count bnode values of @type\n          for(const type of subject['@type']) {\n            if(type.indexOf('_:') === 0) {\n              util.addValue(\n                state.bnodeMap, type, output, {propertyIsArray: true});\n            }\n          }\n        }\n        continue;\n      }\n\n      // explicit is on and property isn't in the frame, skip processing\n      if(flags.explicit && !(prop in frame)) {\n        continue;\n      }\n\n      // add objects\n      for(const o of subject[prop]) {\n        const subframe = (prop in frame ?\n          frame[prop] : _createImplicitFrame(flags));\n\n        // recurse into list\n        if(graphTypes.isList(o)) {\n          const subframe =\n            (frame[prop] && frame[prop][0] && frame[prop][0]['@list']) ?\n              frame[prop][0]['@list'] :\n              _createImplicitFrame(flags);\n\n          // add empty list\n          const list = {'@list': []};\n          _addFrameOutput(output, prop, list);\n\n          // add list objects\n          const src = o['@list'];\n          for(const oo of src) {\n            if(graphTypes.isSubjectReference(oo)) {\n              // recurse into subject reference\n              api.frame(\n                {...state, embedded: true},\n                [oo['@id']], subframe, list, '@list');\n            } else {\n              // include other values automatically\n              _addFrameOutput(list, '@list', util.clone(oo));\n            }\n          }\n        } else if(graphTypes.isSubjectReference(o)) {\n          // recurse into subject reference\n          api.frame(\n            {...state, embedded: true},\n            [o['@id']], subframe, output, prop);\n        } else if(_valueMatch(subframe[0], o)) {\n          // include other values, if they match\n          _addFrameOutput(output, prop, util.clone(o));\n        }\n      }\n    }\n\n    // handle defaults\n    for(const prop of Object.keys(frame).sort()) {\n      // skip keywords\n      if(prop === '@type') {\n        if(!types.isObject(frame[prop][0]) ||\n           !('@default' in frame[prop][0])) {\n          continue;\n        }\n        // allow through default types\n      } else if(isKeyword(prop)) {\n        continue;\n      }\n\n      // if omit default is off, then include default values for properties\n      // that appear in the next frame but are not in the matching subject\n      const next = frame[prop][0] || {};\n      const omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');\n      if(!omitDefaultOn && !(prop in output)) {\n        let preserve = '@null';\n        if('@default' in next) {\n          preserve = util.clone(next['@default']);\n        }\n        if(!types.isArray(preserve)) {\n          preserve = [preserve];\n        }\n        output[prop] = [{'@preserve': preserve}];\n      }\n    }\n\n    // if embed reverse values by finding nodes having this subject as a value\n    // of the associated property\n    for(const reverseProp of Object.keys(frame['@reverse'] || {}).sort()) {\n      const subframe = frame['@reverse'][reverseProp];\n      for(const subject of Object.keys(state.subjects)) {\n        const nodeValues =\n          util.getValues(state.subjects[subject], reverseProp);\n        if(nodeValues.some(v => v['@id'] === id)) {\n          // node has property referencing this subject, recurse\n          output['@reverse'] = output['@reverse'] || {};\n          util.addValue(\n            output['@reverse'], reverseProp, [], {propertyIsArray: true});\n          api.frame(\n            {...state, embedded: true},\n            [subject], subframe, output['@reverse'][reverseProp],\n            property);\n        }\n      }\n    }\n\n    // add output to parent\n    _addFrameOutput(parent, property, output);\n\n    // pop matching subject from circular ref-checking stack\n    state.subjectStack.pop();\n  }\n};\n\n/**\n * Replace `@null` with `null`, removing it from arrays.\n *\n * @param input the framed, compacted output.\n * @param options the framing options used.\n *\n * @return the resulting output.\n */\napi.cleanupNull = (input, options) => {\n  // recurse through arrays\n  if(types.isArray(input)) {\n    const noNulls = input.map(v => api.cleanupNull(v, options));\n    return noNulls.filter(v => v); // removes nulls from array\n  }\n\n  if(input === '@null') {\n    return null;\n  }\n\n  if(types.isObject(input)) {\n    // handle in-memory linked nodes\n    if('@id' in input) {\n      const id = input['@id'];\n      if(options.link.hasOwnProperty(id)) {\n        const idx = options.link[id].indexOf(input);\n        if(idx !== -1) {\n          // already visited\n          return options.link[id][idx];\n        }\n        // prevent circular visitation\n        options.link[id].push(input);\n      } else {\n        // prevent circular visitation\n        options.link[id] = [input];\n      }\n    }\n\n    for(const key in input) {\n      input[key] = api.cleanupNull(input[key], options);\n    }\n  }\n  return input;\n};\n\n/**\n * Creates an implicit frame when recursing through subject matches. If\n * a frame doesn't have an explicit frame for a particular property, then\n * a wildcard child frame will be created that uses the same flags that the\n * parent frame used.\n *\n * @param flags the current framing flags.\n *\n * @return the implicit frame.\n */\nfunction _createImplicitFrame(flags) {\n  const frame = {};\n  for(const key in flags) {\n    if(flags[key] !== undefined) {\n      frame['@' + key] = [flags[key]];\n    }\n  }\n  return [frame];\n}\n\n/**\n * Checks the current subject stack to see if embedding the given subject\n * would cause a circular reference.\n *\n * @param subjectToEmbed the subject to embed.\n * @param graph the graph the subject to embed is in.\n * @param subjectStack the current stack of subjects.\n *\n * @return true if a circular reference would be created, false if not.\n */\nfunction _createsCircularReference(subjectToEmbed, graph, subjectStack) {\n  for(let i = subjectStack.length - 1; i >= 0; --i) {\n    const subject = subjectStack[i];\n    if(subject.graph === graph &&\n      subject.subject['@id'] === subjectToEmbed['@id']) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Gets the frame flag value for the given flag name.\n *\n * @param frame the frame.\n * @param options the framing options.\n * @param name the flag name.\n *\n * @return the flag value.\n */\nfunction _getFrameFlag(frame, options, name) {\n  const flag = '@' + name;\n  let rval = (flag in frame ? frame[flag][0] : options[name]);\n  if(name === 'embed') {\n    // default is \"@last\"\n    // backwards-compatibility support for \"embed\" maps:\n    // true => \"@last\"\n    // false => \"@never\"\n    if(rval === true) {\n      rval = '@once';\n    } else if(rval === false) {\n      rval = '@never';\n    } else if(rval !== '@always' && rval !== '@never' && rval !== '@link' &&\n      rval !== '@first' && rval !== '@last' && rval !== '@once') {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; invalid value of @embed.',\n        'jsonld.SyntaxError', {code: 'invalid @embed value', frame});\n    }\n  }\n  return rval;\n}\n\n/**\n * Validates a JSON-LD frame, throwing an exception if the frame is invalid.\n *\n * @param frame the frame to validate.\n */\nfunction _validateFrame(frame) {\n  if(!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; a JSON-LD frame must be a single object.',\n      'jsonld.SyntaxError', {frame});\n  }\n\n  if('@id' in frame[0]) {\n    for(const id of util.asArray(frame[0]['@id'])) {\n      // @id must be wildcard or an IRI\n      if(!(types.isObject(id) || url.isAbsolute(id)) ||\n        (types.isString(id) && id.indexOf('_:') === 0)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; invalid @id in frame.',\n          'jsonld.SyntaxError', {code: 'invalid frame', frame});\n      }\n    }\n  }\n\n  if('@type' in frame[0]) {\n    for(const type of util.asArray(frame[0]['@type'])) {\n      // @id must be wildcard or an IRI\n      if(!(types.isObject(type) || url.isAbsolute(type)) ||\n        (types.isString(type) && type.indexOf('_:') === 0)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; invalid @type in frame.',\n          'jsonld.SyntaxError', {code: 'invalid frame', frame});\n      }\n    }\n  }\n}\n\n/**\n * Returns a map of all of the subjects that match a parsed frame.\n *\n * @param state the current framing state.\n * @param subjects the set of subjects to filter.\n * @param frame the parsed frame.\n * @param flags the frame flags.\n *\n * @return all of the matched subjects.\n */\nfunction _filterSubjects(state, subjects, frame, flags) {\n  // filter subjects in @id order\n  const rval = {};\n  for(const id of subjects) {\n    const subject = state.graphMap[state.graph][id];\n    if(_filterSubject(state, subject, frame, flags)) {\n      rval[id] = subject;\n    }\n  }\n  return rval;\n}\n\n/**\n * Returns true if the given subject matches the given frame.\n *\n * Matches either based on explicit type inclusion where the node has any\n * type listed in the frame. If the frame has empty types defined matches\n * nodes not having a @type. If the frame has a type of {} defined matches\n * nodes having any type defined.\n *\n * Otherwise, does duck typing, where the node must have all of the\n * properties defined in the frame.\n *\n * @param state the current framing state.\n * @param subject the subject to check.\n * @param frame the frame to check.\n * @param flags the frame flags.\n *\n * @return true if the subject matches, false if not.\n */\nfunction _filterSubject(state, subject, frame, flags) {\n  // check ducktype\n  let wildcard = true;\n  let matchesSome = false;\n\n  for(const key in frame) {\n    let matchThis = false;\n    const nodeValues = util.getValues(subject, key);\n    const isEmpty = util.getValues(frame, key).length === 0;\n\n    if(key === '@id') {\n      // match on no @id or any matching @id, including wildcard\n      if(types.isEmptyObject(frame['@id'][0] || {})) {\n        matchThis = true;\n      } else if(frame['@id'].length >= 0) {\n        matchThis = frame['@id'].includes(nodeValues[0]);\n      }\n      if(!flags.requireAll) {\n        return matchThis;\n      }\n    } else if(key === '@type') {\n      // check @type (object value means 'any' type,\n      // fall through to ducktyping)\n      wildcard = false;\n      if(isEmpty) {\n        if(nodeValues.length > 0) {\n          // don't match on no @type\n          return false;\n        }\n        matchThis = true;\n      } else if(frame['@type'].length === 1 &&\n        types.isEmptyObject(frame['@type'][0])) {\n        // match on wildcard @type if there is a type\n        matchThis = nodeValues.length > 0;\n      } else {\n        // match on a specific @type\n        for(const type of frame['@type']) {\n          if(types.isObject(type) && '@default' in type) {\n            // match on default object\n            matchThis = true;\n          } else {\n            matchThis = matchThis || nodeValues.some(tt => tt === type);\n          }\n        }\n      }\n      if(!flags.requireAll) {\n        return matchThis;\n      }\n    } else if(isKeyword(key)) {\n      continue;\n    } else {\n      // Force a copy of this frame entry so it can be manipulated\n      const thisFrame = util.getValues(frame, key)[0];\n      let hasDefault = false;\n      if(thisFrame) {\n        _validateFrame([thisFrame]);\n        hasDefault = '@default' in thisFrame;\n      }\n\n      // no longer a wildcard pattern if frame has any non-keyword properties\n      wildcard = false;\n\n      // skip, but allow match if node has no value for property, and frame has\n      // a default value\n      if(nodeValues.length === 0 && hasDefault) {\n        continue;\n      }\n\n      // if frame value is empty, don't match if subject has any value\n      if(nodeValues.length > 0 && isEmpty) {\n        return false;\n      }\n\n      if(thisFrame === undefined) {\n        // node does not match if values is not empty and the value of property\n        // in frame is match none.\n        if(nodeValues.length > 0) {\n          return false;\n        }\n        matchThis = true;\n      } else {\n        if(graphTypes.isList(thisFrame)) {\n          const listValue = thisFrame['@list'][0];\n          if(graphTypes.isList(nodeValues[0])) {\n            const nodeListValues = nodeValues[0]['@list'];\n\n            if(graphTypes.isValue(listValue)) {\n              // match on any matching value\n              matchThis = nodeListValues.some(lv => _valueMatch(listValue, lv));\n            } else if(graphTypes.isSubject(listValue) ||\n              graphTypes.isSubjectReference(listValue)) {\n              matchThis = nodeListValues.some(lv => _nodeMatch(\n                state, listValue, lv, flags));\n            }\n          }\n        } else if(graphTypes.isValue(thisFrame)) {\n          matchThis = nodeValues.some(nv => _valueMatch(thisFrame, nv));\n        } else if(graphTypes.isSubjectReference(thisFrame)) {\n          matchThis =\n            nodeValues.some(nv => _nodeMatch(state, thisFrame, nv, flags));\n        } else if(types.isObject(thisFrame)) {\n          matchThis = nodeValues.length > 0;\n        } else {\n          matchThis = false;\n        }\n      }\n    }\n\n    // all non-defaulted values must match if requireAll is set\n    if(!matchThis && flags.requireAll) {\n      return false;\n    }\n\n    matchesSome = matchesSome || matchThis;\n  }\n\n  // return true if wildcard or subject matches some properties\n  return wildcard || matchesSome;\n}\n\n/**\n * Removes an existing embed.\n *\n * @param state the current framing state.\n * @param id the @id of the embed to remove.\n */\nfunction _removeEmbed(state, id) {\n  // get existing embed\n  const embeds = state.uniqueEmbeds[state.graph];\n  const embed = embeds[id];\n  const parent = embed.parent;\n  const property = embed.property;\n\n  // create reference to replace embed\n  const subject = {'@id': id};\n\n  // remove existing embed\n  if(types.isArray(parent)) {\n    // replace subject with reference\n    for(let i = 0; i < parent.length; ++i) {\n      if(util.compareValues(parent[i], subject)) {\n        parent[i] = subject;\n        break;\n      }\n    }\n  } else {\n    // replace subject with reference\n    const useArray = types.isArray(parent[property]);\n    util.removeValue(parent, property, subject, {propertyIsArray: useArray});\n    util.addValue(parent, property, subject, {propertyIsArray: useArray});\n  }\n\n  // recursively remove dependent dangling embeds\n  const removeDependents = id => {\n    // get embed keys as a separate array to enable deleting keys in map\n    const ids = Object.keys(embeds);\n    for(const next of ids) {\n      if(next in embeds && types.isObject(embeds[next].parent) &&\n        embeds[next].parent['@id'] === id) {\n        delete embeds[next];\n        removeDependents(next);\n      }\n    }\n  };\n  removeDependents(id);\n}\n\n/**\n * Removes the @preserve keywords from expanded result of framing.\n *\n * @param input the framed, framed output.\n * @param options the framing options used.\n *\n * @return the resulting output.\n */\nfunction _cleanupPreserve(input, options) {\n  // recurse through arrays\n  if(types.isArray(input)) {\n    return input.map(value => _cleanupPreserve(value, options));\n  }\n\n  if(types.isObject(input)) {\n    // remove @preserve\n    if('@preserve' in input) {\n      return input['@preserve'][0];\n    }\n\n    // skip @values\n    if(graphTypes.isValue(input)) {\n      return input;\n    }\n\n    // recurse through @lists\n    if(graphTypes.isList(input)) {\n      input['@list'] = _cleanupPreserve(input['@list'], options);\n      return input;\n    }\n\n    // handle in-memory linked nodes\n    if('@id' in input) {\n      const id = input['@id'];\n      if(options.link.hasOwnProperty(id)) {\n        const idx = options.link[id].indexOf(input);\n        if(idx !== -1) {\n          // already visited\n          return options.link[id][idx];\n        }\n        // prevent circular visitation\n        options.link[id].push(input);\n      } else {\n        // prevent circular visitation\n        options.link[id] = [input];\n      }\n    }\n\n    // recurse through properties\n    for(const prop in input) {\n      // potentially remove the id, if it is an unreference bnode\n      if(prop === '@id' && options.bnodesToClear.includes(input[prop])) {\n        delete input['@id'];\n        continue;\n      }\n\n      input[prop] = _cleanupPreserve(input[prop], options);\n    }\n  }\n  return input;\n}\n\n/**\n * Adds framing output to the given parent.\n *\n * @param parent the parent to add to.\n * @param property the parent property.\n * @param output the output to add.\n */\nfunction _addFrameOutput(parent, property, output) {\n  if(types.isObject(parent)) {\n    util.addValue(parent, property, output, {propertyIsArray: true});\n  } else {\n    parent.push(output);\n  }\n}\n\n/**\n * Node matches if it is a node, and matches the pattern as a frame.\n *\n * @param state the current framing state.\n * @param pattern used to match value\n * @param value to check\n * @param flags the frame flags.\n */\nfunction _nodeMatch(state, pattern, value, flags) {\n  if(!('@id' in value)) {\n    return false;\n  }\n  const nodeObject = state.subjects[value['@id']];\n  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);\n}\n\n/**\n * Value matches if it is a value and matches the value pattern\n *\n * * `pattern` is empty\n * * @values are the same, or `pattern[@value]` is a wildcard, and\n * * @types are the same or `value[@type]` is not null\n *   and `pattern[@type]` is `{}`, or `value[@type]` is null\n *   and `pattern[@type]` is null or `[]`, and\n * * @languages are the same or `value[@language]` is not null\n *   and `pattern[@language]` is `{}`, or `value[@language]` is null\n *   and `pattern[@language]` is null or `[]`.\n *\n * @param pattern used to match value\n * @param value to check\n */\nfunction _valueMatch(pattern, value) {\n  const v1 = value['@value'];\n  const t1 = value['@type'];\n  const l1 = value['@language'];\n  const v2 = pattern['@value'] ?\n    (types.isArray(pattern['@value']) ?\n      pattern['@value'] : [pattern['@value']]) :\n    [];\n  const t2 = pattern['@type'] ?\n    (types.isArray(pattern['@type']) ?\n      pattern['@type'] : [pattern['@type']]) :\n    [];\n  const l2 = pattern['@language'] ?\n    (types.isArray(pattern['@language']) ?\n      pattern['@language'] : [pattern['@language']]) :\n    [];\n\n  if(v2.length === 0 && t2.length === 0 && l2.length === 0) {\n    return true;\n  }\n  if(!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {\n    return false;\n  }\n  if(!(!t1 && t2.length === 0 || t2.includes(t1) || t1 &&\n    types.isEmptyObject(t2[0]))) {\n    return false;\n  }\n  if(!(!l1 && l2.length === 0 || l2.includes(l1) || l1 &&\n    types.isEmptyObject(l2[0]))) {\n    return false;\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"script"}