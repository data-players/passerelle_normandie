{"ast":null,"code":"/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst util = require('./util');\n\nmodule.exports = class IdentifierIssuer {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param prefix the prefix to use ('<prefix><counter>').\n   */\n  constructor(prefix) {\n    this.prefix = prefix;\n    this.counter = 0;\n    this.existing = {};\n  }\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @return a copy of this IdentifierIssuer.\n   */\n\n\n  clone() {\n    const copy = new IdentifierIssuer(this.prefix);\n    copy.counter = this.counter;\n    copy.existing = util.clone(this.existing);\n    return copy;\n  }\n  /**\n   * Gets the new identifier for the given old identifier, where if no old\n   * identifier is given a new identifier will be generated.\n   *\n   * @param [old] the old identifier to get the new identifier for.\n   *\n   * @return the new identifier.\n   */\n\n\n  getId(old) {\n    // return existing old identifier\n    if (old && old in this.existing) {\n      return this.existing[old];\n    } // get next identifier\n\n\n    const identifier = this.prefix + this.counter;\n    this.counter += 1; // save mapping\n\n    if (old) {\n      this.existing[old] = identifier;\n    }\n\n    return identifier;\n  }\n  /**\n   * Returns true if the given old identifer has already been assigned a new\n   * identifier.\n   *\n   * @param old the old identifier to check.\n   *\n   * @return true if the old identifier has been assigned a new identifier,\n   *   false if not.\n   */\n\n\n  hasId(old) {\n    return old in this.existing;\n  }\n\n};","map":{"version":3,"sources":["/app/node_modules/rdf-canonize/lib/IdentifierIssuer.js"],"names":["util","require","module","exports","IdentifierIssuer","constructor","prefix","counter","existing","clone","copy","getId","old","identifier","hasId"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,gBAAN,CAAuB;AACtC;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,GAAG;AACN,UAAMC,IAAI,GAAG,IAAIN,gBAAJ,CAAqB,KAAKE,MAA1B,CAAb;AACAI,IAAAA,IAAI,CAACH,OAAL,GAAe,KAAKA,OAApB;AACAG,IAAAA,IAAI,CAACF,QAAL,GAAgBR,IAAI,CAACS,KAAL,CAAW,KAAKD,QAAhB,CAAhB;AACA,WAAOE,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,CAACC,GAAD,EAAM;AACT;AACA,QAAGA,GAAG,IAAIA,GAAG,IAAI,KAAKJ,QAAtB,EAAgC;AAC9B,aAAO,KAAKA,QAAL,CAAcI,GAAd,CAAP;AACD,KAJQ,CAMT;;;AACA,UAAMC,UAAU,GAAG,KAAKP,MAAL,GAAc,KAAKC,OAAtC;AACA,SAAKA,OAAL,IAAgB,CAAhB,CARS,CAUT;;AACA,QAAGK,GAAH,EAAQ;AACN,WAAKJ,QAAL,CAAcI,GAAd,IAAqBC,UAArB;AACD;;AAED,WAAOA,UAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,CAACF,GAAD,EAAM;AACT,WAAQA,GAAG,IAAI,KAAKJ,QAApB;AACD;;AA9DqC,CAAxC","sourcesContent":["/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst util = require('./util');\n\nmodule.exports = class IdentifierIssuer {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param prefix the prefix to use ('<prefix><counter>').\n   */\n  constructor(prefix) {\n    this.prefix = prefix;\n    this.counter = 0;\n    this.existing = {};\n  }\n\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @return a copy of this IdentifierIssuer.\n   */\n  clone() {\n    const copy = new IdentifierIssuer(this.prefix);\n    copy.counter = this.counter;\n    copy.existing = util.clone(this.existing);\n    return copy;\n  }\n\n  /**\n   * Gets the new identifier for the given old identifier, where if no old\n   * identifier is given a new identifier will be generated.\n   *\n   * @param [old] the old identifier to get the new identifier for.\n   *\n   * @return the new identifier.\n   */\n  getId(old) {\n    // return existing old identifier\n    if(old && old in this.existing) {\n      return this.existing[old];\n    }\n\n    // get next identifier\n    const identifier = this.prefix + this.counter;\n    this.counter += 1;\n\n    // save mapping\n    if(old) {\n      this.existing[old] = identifier;\n    }\n\n    return identifier;\n  }\n\n  /**\n   * Returns true if the given old identifer has already been assigned a new\n   * identifier.\n   *\n   * @param old the old identifier to check.\n   *\n   * @return true if the old identifier has been assigned a new identifier,\n   *   false if not.\n   */\n  hasId(old) {\n    return (old in this.existing);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}