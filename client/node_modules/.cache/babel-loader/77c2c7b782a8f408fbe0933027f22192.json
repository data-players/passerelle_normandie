{"ast":null,"code":"/*\n * Copyright (c) 2016 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst URDNA2015Sync = require('./URDNA2015Sync');\n\nconst util = require('./util');\n\nmodule.exports = class URDNA2012Sync extends URDNA2015Sync {\n  constructor() {\n    super();\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  } // helper for modifying component during Hash First Degree Quads\n\n\n  modifyFirstDegreeComponent(id, component, key) {\n    if (component.termType !== 'BlankNode') {\n      return component;\n    }\n\n    component = util.clone(component);\n\n    if (key === 'name') {\n      component.value = '_:g';\n    } else {\n      component.value = component.value === id ? '_:a' : '_:z';\n    }\n\n    return component;\n  } // helper for getting a related predicate\n\n\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  } // helper for creating hash to related blank nodes map\n\n\n  createHashToRelated(id, issuer) {\n    const self = this; // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n\n    const hashToRelated = {}; // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n\n    const quads = self.blankNodeInfo[id].quads; // 3) For each quad in quads:\n\n    for (let i = 0; i < quads.length; ++i) {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      const quad = quads[i];\n      let position;\n      let related;\n\n      if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        continue;\n      } // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n\n\n      const hash = self.hashRelatedBlankNode(related, quad, issuer, position);\n\n      if (hash in hashToRelated) {\n        hashToRelated[hash].push(related);\n      } else {\n        hashToRelated[hash] = [related];\n      }\n    }\n\n    return hashToRelated;\n  }\n\n};","map":{"version":3,"sources":["/app/node_modules/rdf-canonize/lib/URGNA2012Sync.js"],"names":["URDNA2015Sync","require","util","module","exports","URDNA2012Sync","constructor","name","hashAlgorithm","modifyFirstDegreeComponent","id","component","key","termType","clone","value","getRelatedPredicate","quad","predicate","createHashToRelated","issuer","self","hashToRelated","quads","blankNodeInfo","i","length","position","related","subject","object","hash","hashRelatedBlankNode","push"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,aAAN,SAA4BL,aAA5B,CAA0C;AACzDM,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,IAAL,GAAY,WAAZ;AACA,SAAKC,aAAL,GAAqB,MAArB;AACD,GALwD,CAOzD;;;AACAC,EAAAA,0BAA0B,CAACC,EAAD,EAAKC,SAAL,EAAgBC,GAAhB,EAAqB;AAC7C,QAAGD,SAAS,CAACE,QAAV,KAAuB,WAA1B,EAAuC;AACrC,aAAOF,SAAP;AACD;;AACDA,IAAAA,SAAS,GAAGT,IAAI,CAACY,KAAL,CAAWH,SAAX,CAAZ;;AACA,QAAGC,GAAG,KAAK,MAAX,EAAmB;AACjBD,MAAAA,SAAS,CAACI,KAAV,GAAkB,KAAlB;AACD,KAFD,MAEO;AACLJ,MAAAA,SAAS,CAACI,KAAV,GAAmBJ,SAAS,CAACI,KAAV,KAAoBL,EAApB,GAAyB,KAAzB,GAAiC,KAApD;AACD;;AACD,WAAOC,SAAP;AACD,GAnBwD,CAqBzD;;;AACAK,EAAAA,mBAAmB,CAACC,IAAD,EAAO;AACxB,WAAOA,IAAI,CAACC,SAAL,CAAeH,KAAtB;AACD,GAxBwD,CA0BzD;;;AACAI,EAAAA,mBAAmB,CAACT,EAAD,EAAKU,MAAL,EAAa;AAC9B,UAAMC,IAAI,GAAG,IAAb,CAD8B,CAG9B;AACA;;AACA,UAAMC,aAAa,GAAG,EAAtB,CAL8B,CAO9B;AACA;;AACA,UAAMC,KAAK,GAAGF,IAAI,CAACG,aAAL,CAAmBd,EAAnB,EAAuBa,KAArC,CAT8B,CAW9B;;AACA,SAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,KAAK,CAACG,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;AACpC;AACA;AACA;AACA;AACA,YAAMR,IAAI,GAAGM,KAAK,CAACE,CAAD,CAAlB;AACA,UAAIE,QAAJ;AACA,UAAIC,OAAJ;;AACA,UAAGX,IAAI,CAACY,OAAL,CAAahB,QAAb,KAA0B,WAA1B,IAAyCI,IAAI,CAACY,OAAL,CAAad,KAAb,KAAuBL,EAAnE,EAAuE;AACrEkB,QAAAA,OAAO,GAAGX,IAAI,CAACY,OAAL,CAAad,KAAvB;AACAY,QAAAA,QAAQ,GAAG,GAAX;AACD,OAHD,MAGO,IACLV,IAAI,CAACa,MAAL,CAAYjB,QAAZ,KAAyB,WAAzB,IAAwCI,IAAI,CAACa,MAAL,CAAYf,KAAZ,KAAsBL,EADzD,EAC6D;AAClE;AACA;AACA;AACA;AACAkB,QAAAA,OAAO,GAAGX,IAAI,CAACa,MAAL,CAAYf,KAAtB;AACAY,QAAAA,QAAQ,GAAG,GAAX;AACD,OARM,MAQA;AACL;AACA;AACD,OAtBmC,CAuBpC;AACA;AACA;;;AACA,YAAMI,IAAI,GAAGV,IAAI,CAACW,oBAAL,CAA0BJ,OAA1B,EAAmCX,IAAnC,EAAyCG,MAAzC,EAAiDO,QAAjD,CAAb;;AACA,UAAGI,IAAI,IAAIT,aAAX,EAA0B;AACxBA,QAAAA,aAAa,CAACS,IAAD,CAAb,CAAoBE,IAApB,CAAyBL,OAAzB;AACD,OAFD,MAEO;AACLN,QAAAA,aAAa,CAACS,IAAD,CAAb,GAAsB,CAACH,OAAD,CAAtB;AACD;AACF;;AAED,WAAON,aAAP;AACD;;AA1EwD,CAA3D","sourcesContent":["/*\n * Copyright (c) 2016 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst URDNA2015Sync = require('./URDNA2015Sync');\nconst util = require('./util');\n\nmodule.exports = class URDNA2012Sync extends URDNA2015Sync {\n  constructor() {\n    super();\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    component = util.clone(component);\n    if(key === 'name') {\n      component.value = '_:g';\n    } else {\n      component.value = (component.value === id ? '_:a' : '_:z');\n    }\n    return component;\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer) {\n    const self = this;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = {};\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = self.blankNodeInfo[id].quads;\n\n    // 3) For each quad in quads:\n    for(let i = 0; i < quads.length; ++i) {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      const quad = quads[i];\n      let position;\n      let related;\n      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if(\n        quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        continue;\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      const hash = self.hashRelatedBlankNode(related, quad, issuer, position);\n      if(hash in hashToRelated) {\n        hashToRelated[hash].push(related);\n      } else {\n        hashToRelated[hash] = [related];\n      }\n    }\n\n    return hashToRelated;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}