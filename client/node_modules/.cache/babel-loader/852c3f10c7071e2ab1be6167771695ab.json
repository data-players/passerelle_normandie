{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst types = require('./types');\n\nconst api = {};\nmodule.exports = api;\n/**\n * Returns true if the given value is a subject with properties.\n *\n * @param v the value to check.\n *\n * @return true if the value is a subject with properties, false if not.\n */\n\napi.isSubject = v => {\n  // Note: A value is a subject if all of these hold true:\n  // 1. It is an Object.\n  // 2. It is not a @value, @set, or @list.\n  // 3. It has more than 1 key OR any existing key is not @id.\n  if (types.isObject(v) && !('@value' in v || '@set' in v || '@list' in v)) {\n    const keyCount = Object.keys(v).length;\n    return keyCount > 1 || !('@id' in v);\n  }\n\n  return false;\n};\n/**\n * Returns true if the given value is a subject reference.\n *\n * @param v the value to check.\n *\n * @return true if the value is a subject reference, false if not.\n */\n\n\napi.isSubjectReference = v => // Note: A value is a subject reference if all of these hold true:\n// 1. It is an Object.\n// 2. It has a single key: @id.\ntypes.isObject(v) && Object.keys(v).length === 1 && '@id' in v;\n/**\n * Returns true if the given value is a @value.\n *\n * @param v the value to check.\n *\n * @return true if the value is a @value, false if not.\n */\n\n\napi.isValue = v => // Note: A value is a @value if all of these hold true:\n// 1. It is an Object.\n// 2. It has the @value property.\ntypes.isObject(v) && '@value' in v;\n/**\n * Returns true if the given value is a @list.\n *\n * @param v the value to check.\n *\n * @return true if the value is a @list, false if not.\n */\n\n\napi.isList = v => // Note: A value is a @list if all of these hold true:\n// 1. It is an Object.\n// 2. It has the @list property.\ntypes.isObject(v) && '@list' in v;\n/**\n * Returns true if the given value is a @graph.\n *\n * @return true if the value is a @graph, false if not.\n */\n\n\napi.isGraph = v => {\n  // Note: A value is a graph if all of these hold true:\n  // 1. It is an object.\n  // 2. It has an `@graph` key.\n  // 3. It may have '@id' or '@index'\n  return types.isObject(v) && '@graph' in v && Object.keys(v).filter(key => key !== '@id' && key !== '@index').length === 1;\n};\n/**\n * Returns true if the given value is a simple @graph.\n *\n * @return true if the value is a simple @graph, false if not.\n */\n\n\napi.isSimpleGraph = v => {\n  // Note: A value is a simple graph if all of these hold true:\n  // 1. It is an object.\n  // 2. It has an `@graph` key.\n  // 3. It has only 1 key or 2 keys where one of them is `@index`.\n  return api.isGraph(v) && !('@id' in v);\n};\n/**\n * Returns true if the given value is a blank node.\n *\n * @param v the value to check.\n *\n * @return true if the value is a blank node, false if not.\n */\n\n\napi.isBlankNode = v => {\n  // Note: A value is a blank node if all of these hold true:\n  // 1. It is an Object.\n  // 2. If it has an @id key its value begins with '_:'.\n  // 3. It has no keys OR is not a @value, @set, or @list.\n  if (types.isObject(v)) {\n    if ('@id' in v) {\n      return v['@id'].indexOf('_:') === 0;\n    }\n\n    return Object.keys(v).length === 0 || !('@value' in v || '@set' in v || '@list' in v);\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/app/node_modules/jsonld/lib/graphTypes.js"],"names":["types","require","api","module","exports","isSubject","v","isObject","keyCount","Object","keys","length","isSubjectReference","isValue","isList","isGraph","filter","key","isSimpleGraph","isBlankNode","indexOf"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAMC,GAAG,GAAG,EAAZ;AACAC,MAAM,CAACC,OAAP,GAAiBF,GAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,GAAG,CAACG,SAAJ,GAAgBC,CAAC,IAAI;AACnB;AACA;AACA;AACA;AACA,MAAGN,KAAK,CAACO,QAAN,CAAeD,CAAf,KACD,EAAG,YAAYA,CAAb,IAAoB,UAAUA,CAA9B,IAAqC,WAAWA,CAAlD,CADF,EACyD;AACvD,UAAME,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYJ,CAAZ,EAAeK,MAAhC;AACA,WAAQH,QAAQ,GAAG,CAAX,IAAgB,EAAE,SAASF,CAAX,CAAxB;AACD;;AACD,SAAO,KAAP;AACD,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,GAAG,CAACU,kBAAJ,GAAyBN,CAAC,IACxB;AACA;AACA;AACCN,KAAK,CAACO,QAAN,CAAeD,CAAf,KAAqBG,MAAM,CAACC,IAAP,CAAYJ,CAAZ,EAAeK,MAAf,KAA0B,CAA/C,IAAqD,SAASL,CAJjE;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,GAAG,CAACW,OAAJ,GAAcP,CAAC,IACb;AACA;AACA;AACAN,KAAK,CAACO,QAAN,CAAeD,CAAf,KAAsB,YAAYA,CAJpC;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,GAAG,CAACY,MAAJ,GAAaR,CAAC,IACZ;AACA;AACA;AACAN,KAAK,CAACO,QAAN,CAAeD,CAAf,KAAsB,WAAWA,CAJnC;AAMA;AACA;AACA;AACA;AACA;;;AACAJ,GAAG,CAACa,OAAJ,GAAcT,CAAC,IAAI;AACjB;AACA;AACA;AACA;AACA,SAAON,KAAK,CAACO,QAAN,CAAeD,CAAf,KACL,YAAYA,CADP,IAELG,MAAM,CAACC,IAAP,CAAYJ,CAAZ,EACGU,MADH,CACUC,GAAG,IAAIA,GAAG,KAAK,KAAR,IAAiBA,GAAG,KAAK,QAD1C,EACoDN,MADpD,KAC+D,CAHjE;AAID,CATD;AAWA;AACA;AACA;AACA;AACA;;;AACAT,GAAG,CAACgB,aAAJ,GAAoBZ,CAAC,IAAI;AACvB;AACA;AACA;AACA;AACA,SAAOJ,GAAG,CAACa,OAAJ,CAAYT,CAAZ,KAAkB,EAAE,SAASA,CAAX,CAAzB;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,GAAG,CAACiB,WAAJ,GAAkBb,CAAC,IAAI;AACrB;AACA;AACA;AACA;AACA,MAAGN,KAAK,CAACO,QAAN,CAAeD,CAAf,CAAH,EAAsB;AACpB,QAAG,SAASA,CAAZ,EAAe;AACb,aAAQA,CAAC,CAAC,KAAD,CAAD,CAASc,OAAT,CAAiB,IAAjB,MAA2B,CAAnC;AACD;;AACD,WAAQX,MAAM,CAACC,IAAP,CAAYJ,CAAZ,EAAeK,MAAf,KAA0B,CAA1B,IACN,EAAG,YAAYL,CAAb,IAAoB,UAAUA,CAA9B,IAAqC,WAAWA,CAAlD,CADF;AAED;;AACD,SAAO,KAAP;AACD,CAbD","sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst types = require('./types');\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Returns true if the given value is a subject with properties.\n *\n * @param v the value to check.\n *\n * @return true if the value is a subject with properties, false if not.\n */\napi.isSubject = v => {\n  // Note: A value is a subject if all of these hold true:\n  // 1. It is an Object.\n  // 2. It is not a @value, @set, or @list.\n  // 3. It has more than 1 key OR any existing key is not @id.\n  if(types.isObject(v) &&\n    !(('@value' in v) || ('@set' in v) || ('@list' in v))) {\n    const keyCount = Object.keys(v).length;\n    return (keyCount > 1 || !('@id' in v));\n  }\n  return false;\n};\n\n/**\n * Returns true if the given value is a subject reference.\n *\n * @param v the value to check.\n *\n * @return true if the value is a subject reference, false if not.\n */\napi.isSubjectReference = v =>\n  // Note: A value is a subject reference if all of these hold true:\n  // 1. It is an Object.\n  // 2. It has a single key: @id.\n  (types.isObject(v) && Object.keys(v).length === 1 && ('@id' in v));\n\n/**\n * Returns true if the given value is a @value.\n *\n * @param v the value to check.\n *\n * @return true if the value is a @value, false if not.\n */\napi.isValue = v =>\n  // Note: A value is a @value if all of these hold true:\n  // 1. It is an Object.\n  // 2. It has the @value property.\n  types.isObject(v) && ('@value' in v);\n\n/**\n * Returns true if the given value is a @list.\n *\n * @param v the value to check.\n *\n * @return true if the value is a @list, false if not.\n */\napi.isList = v =>\n  // Note: A value is a @list if all of these hold true:\n  // 1. It is an Object.\n  // 2. It has the @list property.\n  types.isObject(v) && ('@list' in v);\n\n/**\n * Returns true if the given value is a @graph.\n *\n * @return true if the value is a @graph, false if not.\n */\napi.isGraph = v => {\n  // Note: A value is a graph if all of these hold true:\n  // 1. It is an object.\n  // 2. It has an `@graph` key.\n  // 3. It may have '@id' or '@index'\n  return types.isObject(v) &&\n    '@graph' in v &&\n    Object.keys(v)\n      .filter(key => key !== '@id' && key !== '@index').length === 1;\n};\n\n/**\n * Returns true if the given value is a simple @graph.\n *\n * @return true if the value is a simple @graph, false if not.\n */\napi.isSimpleGraph = v => {\n  // Note: A value is a simple graph if all of these hold true:\n  // 1. It is an object.\n  // 2. It has an `@graph` key.\n  // 3. It has only 1 key or 2 keys where one of them is `@index`.\n  return api.isGraph(v) && !('@id' in v);\n};\n\n/**\n * Returns true if the given value is a blank node.\n *\n * @param v the value to check.\n *\n * @return true if the value is a blank node, false if not.\n */\napi.isBlankNode = v => {\n  // Note: A value is a blank node if all of these hold true:\n  // 1. It is an Object.\n  // 2. If it has an @id key its value begins with '_:'.\n  // 3. It has no keys OR is not a @value, @set, or @list.\n  if(types.isObject(v)) {\n    if('@id' in v) {\n      return (v['@id'].indexOf('_:') === 0);\n    }\n    return (Object.keys(v).length === 0 ||\n      !(('@value' in v) || ('@set' in v) || ('@list' in v)));\n  }\n  return false;\n};\n"]},"metadata":{},"sourceType":"script"}