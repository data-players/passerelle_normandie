{"ast":null,"code":"/*\n * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst util = require('./util');\n\nconst JsonLdError = require('./JsonLdError');\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString,\n  isUndefined: _isUndefined\n} = require('./types');\n\nconst {\n  isAbsolute: _isAbsoluteIri,\n  isRelative: _isRelativeIri,\n  prependBase,\n  parse: parseUrl\n} = require('./url');\n\nconst {\n  asArray: _asArray,\n  compareShortestLeast: _compareShortestLeast\n} = require('./util');\n\nconst INITIAL_CONTEXT_CACHE = new Map();\nconst INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;\nconst KEYWORD_PATTERN = /^@[a-zA-Z]+$/;\nconst api = {};\nmodule.exports = api;\n/**\n * Processes a local context and returns a new active context.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context to process.\n * @param options the context processing options.\n * @param propagate `true` if `false`, retains any previously defined term,\n *   which can be rolled back when the descending into a new node object.\n * @param overrideProtected `false` allows protected terms to be modified.\n *\n * @return a Promise that resolves to the new active context.\n */\n\napi.process = async ({\n  activeCtx,\n  localCtx,\n  options,\n  propagate = true,\n  overrideProtected = false,\n  cycles = new Set()\n}) => {\n  // normalize local context to an array of @context objects\n  if (_isObject(localCtx) && '@context' in localCtx && _isArray(localCtx['@context'])) {\n    localCtx = localCtx['@context'];\n  }\n\n  const ctxs = _asArray(localCtx); // no contexts in array, return current active context w/o changes\n\n\n  if (ctxs.length === 0) {\n    return activeCtx;\n  } // resolve contexts\n\n\n  const resolved = await options.contextResolver.resolve({\n    activeCtx,\n    context: localCtx,\n    documentLoader: options.documentLoader,\n    base: options.base\n  }); // override propagate if first resolved context has `@propagate`\n\n  if (_isObject(resolved[0].document) && typeof resolved[0].document['@propagate'] === 'boolean') {\n    // retrieve early, error checking done later\n    propagate = resolved[0].document['@propagate'];\n  } // process each context in order, update active context\n  // on each iteration to ensure proper caching\n\n\n  let rval = activeCtx; // track the previous context\n  // if not propagating, make sure rval has a previous context\n\n  if (!propagate && !rval.previousContext) {\n    // clone `rval` context before updating\n    rval = rval.clone();\n    rval.previousContext = activeCtx;\n  }\n\n  for (const resolvedContext of resolved) {\n    let {\n      document: ctx\n    } = resolvedContext; // update active context to one computed from last iteration\n\n    activeCtx = rval; // reset to initial context\n\n    if (ctx === null) {\n      // We can't nullify if there are protected terms and we're\n      // not allowing overrides (e.g. processing a property term scoped context)\n      if (!overrideProtected && Object.keys(activeCtx.protected).length !== 0) {\n        const protectedMode = options && options.protectedMode || 'error';\n\n        if (protectedMode === 'error') {\n          throw new JsonLdError('Tried to nullify a context with protected terms outside of ' + 'a term definition.', 'jsonld.SyntaxError', {\n            code: 'invalid context nullification'\n          });\n        } else if (protectedMode === 'warn') {\n          // FIXME: remove logging and use a handler\n          console.warn('WARNING: invalid context nullification'); // get processed context from cache if available\n\n          const processed = resolvedContext.getProcessed(activeCtx);\n\n          if (processed) {\n            rval = activeCtx = processed;\n            continue;\n          }\n\n          const oldActiveCtx = activeCtx; // copy all protected term definitions to fresh initial context\n\n          rval = activeCtx = api.getInitialContext(options).clone();\n\n          for (const [term, _protected] of Object.entries(oldActiveCtx.protected)) {\n            if (_protected) {\n              activeCtx.mappings[term] = util.clone(oldActiveCtx.mappings[term]);\n            }\n          }\n\n          activeCtx.protected = util.clone(oldActiveCtx.protected); // cache processed result\n\n          resolvedContext.setProcessed(oldActiveCtx, rval);\n          continue;\n        }\n\n        throw new JsonLdError('Invalid protectedMode.', 'jsonld.SyntaxError', {\n          code: 'invalid protected mode',\n          context: localCtx,\n          protectedMode\n        });\n      }\n\n      rval = activeCtx = api.getInitialContext(options).clone();\n      continue;\n    } // get processed context from cache if available\n\n\n    const processed = resolvedContext.getProcessed(activeCtx);\n\n    if (processed) {\n      rval = activeCtx = processed;\n      continue;\n    } // dereference @context key if present\n\n\n    if (_isObject(ctx) && '@context' in ctx) {\n      ctx = ctx['@context'];\n    } // context must be an object by now, all URLs retrieved before this call\n\n\n    if (!_isObject(ctx)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context must be an object.', 'jsonld.SyntaxError', {\n        code: 'invalid local context',\n        context: ctx\n      });\n    } // TODO: there is likely a `previousContext` cloning optimization that\n    // could be applied here (no need to copy it under certain conditions)\n    // clone context before updating it\n\n\n    rval = rval.clone(); // define context mappings for keys in local context\n\n    const defined = new Map(); // handle @version\n\n    if ('@version' in ctx) {\n      if (ctx['@version'] !== 1.1) {\n        throw new JsonLdError('Unsupported JSON-LD version: ' + ctx['@version'], 'jsonld.UnsupportedVersion', {\n          code: 'invalid @version value',\n          context: ctx\n        });\n      }\n\n      if (activeCtx.processingMode && activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError('@version: ' + ctx['@version'] + ' not compatible with ' + activeCtx.processingMode, 'jsonld.ProcessingModeConflict', {\n          code: 'processing mode conflict',\n          context: ctx\n        });\n      }\n\n      rval.processingMode = 'json-ld-1.1';\n      rval['@version'] = ctx['@version'];\n      defined.set('@version', true);\n    } // if not set explicitly, set processingMode to \"json-ld-1.1\"\n\n\n    rval.processingMode = rval.processingMode || activeCtx.processingMode; // handle @base\n\n    if ('@base' in ctx) {\n      let base = ctx['@base'];\n\n      if (base === null || _isAbsoluteIri(base)) {// no action\n      } else if (_isRelativeIri(base)) {\n        base = prependBase(rval['@base'], base);\n      } else {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@base\" in a ' + '@context must be an absolute IRI, a relative IRI, or null.', 'jsonld.SyntaxError', {\n          code: 'invalid base IRI',\n          context: ctx\n        });\n      }\n\n      rval['@base'] = base;\n      defined.set('@base', true);\n    } // handle @vocab\n\n\n    if ('@vocab' in ctx) {\n      const value = ctx['@vocab'];\n\n      if (value === null) {\n        delete rval['@vocab'];\n      } else if (!_isString(value)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@vocab\" in a ' + '@context must be a string or null.', 'jsonld.SyntaxError', {\n          code: 'invalid vocab mapping',\n          context: ctx\n        });\n      } else if (!_isAbsoluteIri(value) && api.processingMode(rval, 1.0)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@vocab\" in a ' + '@context must be an absolute IRI.', 'jsonld.SyntaxError', {\n          code: 'invalid vocab mapping',\n          context: ctx\n        });\n      } else {\n        rval['@vocab'] = _expandIri(rval, value, {\n          vocab: true,\n          base: true\n        }, undefined, undefined, options);\n      }\n\n      defined.set('@vocab', true);\n    } // handle @language\n\n\n    if ('@language' in ctx) {\n      const value = ctx['@language'];\n\n      if (value === null) {\n        delete rval['@language'];\n      } else if (!_isString(value)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@language\" in a ' + '@context must be a string or null.', 'jsonld.SyntaxError', {\n          code: 'invalid default language',\n          context: ctx\n        });\n      } else {\n        rval['@language'] = value.toLowerCase();\n      }\n\n      defined.set('@language', true);\n    } // handle @direction\n\n\n    if ('@direction' in ctx) {\n      const value = ctx['@direction'];\n\n      if (activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError('Invalid JSON-LD syntax; @direction not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {\n          code: 'invalid context member',\n          context: ctx\n        });\n      }\n\n      if (value === null) {\n        delete rval['@direction'];\n      } else if (value !== 'ltr' && value !== 'rtl') {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@direction\" in a ' + '@context must be null, \"ltr\", or \"rtl\".', 'jsonld.SyntaxError', {\n          code: 'invalid base direction',\n          context: ctx\n        });\n      } else {\n        rval['@direction'] = value;\n      }\n\n      defined.set('@direction', true);\n    } // handle @propagate\n    // note: we've already extracted it, here we just do error checking\n\n\n    if ('@propagate' in ctx) {\n      const value = ctx['@propagate'];\n\n      if (activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError('Invalid JSON-LD syntax; @propagate not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {\n          code: 'invalid context entry',\n          context: ctx\n        });\n      }\n\n      if (typeof value !== 'boolean') {\n        throw new JsonLdError('Invalid JSON-LD syntax; @propagate value must be a boolean.', 'jsonld.SyntaxError', {\n          code: 'invalid @propagate value',\n          context: localCtx\n        });\n      }\n\n      defined.set('@propagate', true);\n    } // handle @import\n\n\n    if ('@import' in ctx) {\n      const value = ctx['@import'];\n\n      if (activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError('Invalid JSON-LD syntax; @import not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {\n          code: 'invalid context entry',\n          context: ctx\n        });\n      }\n\n      if (!_isString(value)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; @import must be a string.', 'jsonld.SyntaxError', {\n          code: 'invalid @import value',\n          context: localCtx\n        });\n      } // resolve contexts\n\n\n      const resolvedImport = await options.contextResolver.resolve({\n        activeCtx,\n        context: value,\n        documentLoader: options.documentLoader,\n        base: options.base\n      });\n\n      if (resolvedImport.length !== 1) {\n        throw new JsonLdError('Invalid JSON-LD syntax; @import must reference a single context.', 'jsonld.SyntaxError', {\n          code: 'invalid remote context',\n          context: localCtx\n        });\n      }\n\n      const processedImport = resolvedImport[0].getProcessed(activeCtx);\n\n      if (processedImport) {\n        // Note: if the same context were used in this active context\n        // as a reference context, then processed_input might not\n        // be a dict.\n        ctx = processedImport;\n      } else {\n        const importCtx = resolvedImport[0].document;\n\n        if ('@import' in importCtx) {\n          throw new JsonLdError('Invalid JSON-LD syntax: ' + 'imported context must not include @import.', 'jsonld.SyntaxError', {\n            code: 'invalid context entry',\n            context: localCtx\n          });\n        } // merge ctx into importCtx and replace rval with the result\n\n\n        for (const key in importCtx) {\n          if (!ctx.hasOwnProperty(key)) {\n            ctx[key] = importCtx[key];\n          }\n        } // Note: this could potenially conflict if the import\n        // were used in the same active context as a referenced\n        // context and an import. In this case, we\n        // could override the cached result, but seems unlikely.\n\n\n        resolvedImport[0].setProcessed(activeCtx, ctx);\n      }\n\n      defined.set('@import', true);\n    } // handle @protected; determine whether this sub-context is declaring\n    // all its terms to be \"protected\" (exceptions can be made on a\n    // per-definition basis)\n\n\n    defined.set('@protected', ctx['@protected'] || false); // process all other keys\n\n    for (const key in ctx) {\n      api.createTermDefinition({\n        activeCtx: rval,\n        localCtx: ctx,\n        term: key,\n        defined,\n        options,\n        overrideProtected\n      });\n\n      if (_isObject(ctx[key]) && '@context' in ctx[key]) {\n        const keyCtx = ctx[key]['@context'];\n        let process = true;\n\n        if (_isString(keyCtx)) {\n          const url = prependBase(options.base, keyCtx); // track processed contexts to avoid scoped context recursion\n\n          if (cycles.has(url)) {\n            process = false;\n          } else {\n            cycles.add(url);\n          }\n        } // parse context to validate\n\n\n        if (process) {\n          try {\n            await api.process({\n              activeCtx: rval.clone(),\n              localCtx: ctx[key]['@context'],\n              overrideProtected: true,\n              options,\n              cycles\n            });\n          } catch (e) {\n            throw new JsonLdError('Invalid JSON-LD syntax; invalid scoped context.', 'jsonld.SyntaxError', {\n              code: 'invalid scoped context',\n              context: ctx[key]['@context'],\n              term: key\n            });\n          }\n        }\n      }\n    } // cache processed result\n\n\n    resolvedContext.setProcessed(activeCtx, rval);\n  }\n\n  return rval;\n};\n/**\n * Creates a term definition during context processing.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context being processed.\n * @param term the term in the local context to define the mapping for.\n * @param defined a map of defining/defined keys to detect cycles and prevent\n *          double definitions.\n * @param {Object} [options] - creation options.\n * @param {string} [options.protectedMode=\"error\"] - \"error\" to throw error\n *   on `@protected` constraint violation, \"warn\" to allow violations and\n *   signal a warning.\n * @param overrideProtected `false` allows protected terms to be modified.\n */\n\n\napi.createTermDefinition = ({\n  activeCtx,\n  localCtx,\n  term,\n  defined,\n  options,\n  overrideProtected = false\n}) => {\n  if (defined.has(term)) {\n    // term already defined\n    if (defined.get(term)) {\n      return;\n    } // cycle detected\n\n\n    throw new JsonLdError('Cyclical context definition detected.', 'jsonld.CyclicalContext', {\n      code: 'cyclic IRI mapping',\n      context: localCtx,\n      term\n    });\n  } // now defining term\n\n\n  defined.set(term, false); // get context term value\n\n  let value;\n\n  if (localCtx.hasOwnProperty(term)) {\n    value = localCtx[term];\n  }\n\n  if (term === '@type' && _isObject(value) && (value['@container'] || '@set') === '@set' && api.processingMode(activeCtx, 1.1)) {\n    const validKeys = ['@container', '@id', '@protected'];\n    const keys = Object.keys(value);\n\n    if (keys.length === 0 || keys.some(k => !validKeys.includes(k))) {\n      throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {\n        code: 'keyword redefinition',\n        context: localCtx,\n        term\n      });\n    }\n  } else if (api.isKeyword(term)) {\n    throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {\n      code: 'keyword redefinition',\n      context: localCtx,\n      term\n    });\n  } else if (term.match(KEYWORD_PATTERN)) {\n    // FIXME: remove logging and use a handler\n    console.warn('WARNING: terms beginning with \"@\" are reserved' + ' for future use and ignored', {\n      term\n    });\n    return;\n  } else if (term === '') {\n    throw new JsonLdError('Invalid JSON-LD syntax; a term cannot be an empty string.', 'jsonld.SyntaxError', {\n      code: 'invalid term definition',\n      context: localCtx\n    });\n  } // keep reference to previous mapping for potential `@protected` check\n\n\n  const previousMapping = activeCtx.mappings.get(term); // remove old mapping\n\n  if (activeCtx.mappings.has(term)) {\n    activeCtx.mappings.delete(term);\n  } // convert short-hand value to object w/@id\n\n\n  let simpleTerm = false;\n\n  if (_isString(value) || value === null) {\n    simpleTerm = true;\n    value = {\n      '@id': value\n    };\n  }\n\n  if (!_isObject(value)) {\n    throw new JsonLdError('Invalid JSON-LD syntax; @context term values must be ' + 'strings or objects.', 'jsonld.SyntaxError', {\n      code: 'invalid term definition',\n      context: localCtx\n    });\n  } // create new mapping\n\n\n  const mapping = {};\n  activeCtx.mappings.set(term, mapping);\n  mapping.reverse = false; // make sure term definition only has expected keywords\n\n  const validKeys = ['@container', '@id', '@language', '@reverse', '@type']; // JSON-LD 1.1 support\n\n  if (api.processingMode(activeCtx, 1.1)) {\n    validKeys.push('@context', '@direction', '@index', '@nest', '@prefix', '@protected');\n  }\n\n  for (const kw in value) {\n    if (!validKeys.includes(kw)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a term definition must not contain ' + kw, 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n  } // always compute whether term has a colon as an optimization for\n  // _compactIri\n\n\n  const colon = term.indexOf(':');\n  mapping._termHasColon = colon > 0;\n\n  if ('@reverse' in value) {\n    if ('@id' in value) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @reverse term definition must not ' + 'contain @id.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    }\n\n    if ('@nest' in value) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @reverse term definition must not ' + 'contain @nest.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    }\n\n    const reverse = value['@reverse'];\n\n    if (!_isString(reverse)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be a string.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    }\n\n    if (!api.isKeyword(reverse) && reverse.match(KEYWORD_PATTERN)) {\n      // FIXME: remove logging and use a handler\n      console.warn('WARNING: values beginning with \"@\" are reserved' + ' for future use and ignored', {\n        reverse\n      });\n\n      if (previousMapping) {\n        activeCtx.mappings.set(term, previousMapping);\n      } else {\n        activeCtx.mappings.delete(term);\n      }\n\n      return;\n    } // expand and add @id mapping\n\n\n    const id = _expandIri(activeCtx, reverse, {\n      vocab: true,\n      base: false\n    }, localCtx, defined, options);\n\n    if (!_isAbsoluteIri(id)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be an ' + 'absolute IRI or a blank node identifier.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    }\n\n    mapping['@id'] = id;\n    mapping.reverse = true;\n  } else if ('@id' in value) {\n    let id = value['@id'];\n\n    if (id && !_isString(id)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @id value must be an array ' + 'of strings or a string.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    }\n\n    if (id === null) {\n      // reserve a null term, which may be protected\n      mapping['@id'] = null;\n    } else if (!api.isKeyword(id) && id.match(KEYWORD_PATTERN)) {\n      // FIXME: remove logging and use a handler\n      console.warn('WARNING: values beginning with \"@\" are reserved' + ' for future use and ignored', {\n        id\n      });\n\n      if (previousMapping) {\n        activeCtx.mappings.set(term, previousMapping);\n      } else {\n        activeCtx.mappings.delete(term);\n      }\n\n      return;\n    } else if (id !== term) {\n      // expand and add @id mapping\n      id = _expandIri(activeCtx, id, {\n        vocab: true,\n        base: false\n      }, localCtx, defined, options);\n\n      if (!_isAbsoluteIri(id) && !api.isKeyword(id)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; a @context @id value must be an ' + 'absolute IRI, a blank node identifier, or a keyword.', 'jsonld.SyntaxError', {\n          code: 'invalid IRI mapping',\n          context: localCtx\n        });\n      } // if term has the form of an IRI it must map the same\n\n\n      if (term.match(/(?::[^:])|\\//)) {\n        const termDefined = new Map(defined).set(term, true);\n\n        const termIri = _expandIri(activeCtx, term, {\n          vocab: true,\n          base: false\n        }, localCtx, termDefined, options);\n\n        if (termIri !== id) {\n          throw new JsonLdError('Invalid JSON-LD syntax; term in form of IRI must ' + 'expand to definition.', 'jsonld.SyntaxError', {\n            code: 'invalid IRI mapping',\n            context: localCtx\n          });\n        }\n      }\n\n      mapping['@id'] = id; // indicate if this term may be used as a compact IRI prefix\n\n      mapping._prefix = simpleTerm && !mapping._termHasColon && id.match(/[:\\/\\?#\\[\\]@]$/);\n    }\n  }\n\n  if (!('@id' in mapping)) {\n    // see if the term has a prefix\n    if (mapping._termHasColon) {\n      const prefix = term.substr(0, colon);\n\n      if (localCtx.hasOwnProperty(prefix)) {\n        // define parent prefix\n        api.createTermDefinition({\n          activeCtx,\n          localCtx,\n          term: prefix,\n          defined,\n          options\n        });\n      }\n\n      if (activeCtx.mappings.has(prefix)) {\n        // set @id based on prefix parent\n        const suffix = term.substr(colon + 1);\n        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;\n      } else {\n        // term is an absolute IRI\n        mapping['@id'] = term;\n      }\n    } else if (term === '@type') {\n      // Special case, were we've previously determined that container is @set\n      mapping['@id'] = term;\n    } else {\n      // non-IRIs *must* define @ids if @vocab is not available\n      if (!('@vocab' in activeCtx)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; @context terms must define an @id.', 'jsonld.SyntaxError', {\n          code: 'invalid IRI mapping',\n          context: localCtx,\n          term\n        });\n      } // prepend vocab to term\n\n\n      mapping['@id'] = activeCtx['@vocab'] + term;\n    }\n  } // Handle term protection\n\n\n  if (value['@protected'] === true || defined.get('@protected') === true && value['@protected'] !== false) {\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n  } // IRI mapping now defined\n\n\n  defined.set(term, true);\n\n  if ('@type' in value) {\n    let type = value['@type'];\n\n    if (!_isString(type)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be a string.', 'jsonld.SyntaxError', {\n        code: 'invalid type mapping',\n        context: localCtx\n      });\n    }\n\n    if (type === '@json' || type === '@none') {\n      if (api.processingMode(activeCtx, 1.0)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must not be ' + `\"${type}\" in JSON-LD 1.0 mode.`, 'jsonld.SyntaxError', {\n          code: 'invalid type mapping',\n          context: localCtx\n        });\n      }\n    } else if (type !== '@id' && type !== '@vocab') {\n      // expand @type to full IRI\n      type = _expandIri(activeCtx, type, {\n        vocab: true,\n        base: false\n      }, localCtx, defined, options);\n\n      if (!_isAbsoluteIri(type)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be an ' + 'absolute IRI.', 'jsonld.SyntaxError', {\n          code: 'invalid type mapping',\n          context: localCtx\n        });\n      }\n\n      if (type.indexOf('_:') === 0) {\n        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be an IRI, ' + 'not a blank node identifier.', 'jsonld.SyntaxError', {\n          code: 'invalid type mapping',\n          context: localCtx\n        });\n      }\n    } // add @type to mapping\n\n\n    mapping['@type'] = type;\n  }\n\n  if ('@container' in value) {\n    // normalize container to an array form\n    const container = _isString(value['@container']) ? [value['@container']] : value['@container'] || [];\n    const validContainers = ['@list', '@set', '@index', '@language'];\n    let isValid = true;\n    const hasSet = container.includes('@set'); // JSON-LD 1.1 support\n\n    if (api.processingMode(activeCtx, 1.1)) {\n      validContainers.push('@graph', '@id', '@type'); // check container length\n\n      if (container.includes('@list')) {\n        if (container.length !== 1) {\n          throw new JsonLdError('Invalid JSON-LD syntax; @context @container with @list must ' + 'have no other values', 'jsonld.SyntaxError', {\n            code: 'invalid container mapping',\n            context: localCtx\n          });\n        }\n      } else if (container.includes('@graph')) {\n        if (container.some(key => key !== '@graph' && key !== '@id' && key !== '@index' && key !== '@set')) {\n          throw new JsonLdError('Invalid JSON-LD syntax; @context @container with @graph must ' + 'have no other values other than @id, @index, and @set', 'jsonld.SyntaxError', {\n            code: 'invalid container mapping',\n            context: localCtx\n          });\n        }\n      } else {\n        // otherwise, container may also include @set\n        isValid &= container.length <= (hasSet ? 2 : 1);\n      }\n\n      if (container.includes('@type')) {\n        // If mapping does not have an @type,\n        // set it to @id\n        mapping['@type'] = mapping['@type'] || '@id'; // type mapping must be either @id or @vocab\n\n        if (!['@id', '@vocab'].includes(mapping['@type'])) {\n          throw new JsonLdError('Invalid JSON-LD syntax; container: @type requires @type to be ' + '@id or @vocab.', 'jsonld.SyntaxError', {\n            code: 'invalid type mapping',\n            context: localCtx\n          });\n        }\n      }\n    } else {\n      // in JSON-LD 1.0, container must not be an array (it must be a string,\n      // which is one of the validContainers)\n      isValid &= !_isArray(value['@container']); // check container length\n\n      isValid &= container.length <= 1;\n    } // check against valid containers\n\n\n    isValid &= container.every(c => validContainers.includes(c)); // @set not allowed with @list\n\n    isValid &= !(hasSet && container.includes('@list'));\n\n    if (!isValid) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @container value must be ' + 'one of the following: ' + validContainers.join(', '), 'jsonld.SyntaxError', {\n        code: 'invalid container mapping',\n        context: localCtx\n      });\n    }\n\n    if (mapping.reverse && !container.every(c => ['@index', '@set'].includes(c))) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @container value for a @reverse ' + 'type definition must be @index or @set.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    } // add @container to mapping\n\n\n    mapping['@container'] = container;\n  } // property indexing\n\n\n  if ('@index' in value) {\n    if (!('@container' in value) || !mapping['@container'].includes('@index')) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @index without @index in @container: ' + `\"${value['@index']}\" on term \"${term}\".`, 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n\n    if (!_isString(value['@index']) || value['@index'].indexOf('@') === 0) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @index must expand to an IRI: ' + `\"${value['@index']}\" on term \"${term}\".`, 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n\n    mapping['@index'] = value['@index'];\n  } // scoped contexts\n\n\n  if ('@context' in value) {\n    mapping['@context'] = value['@context'];\n  }\n\n  if ('@language' in value && !('@type' in value)) {\n    let language = value['@language'];\n\n    if (language !== null && !_isString(language)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @language value must be ' + 'a string or null.', 'jsonld.SyntaxError', {\n        code: 'invalid language mapping',\n        context: localCtx\n      });\n    } // add @language to mapping\n\n\n    if (language !== null) {\n      language = language.toLowerCase();\n    }\n\n    mapping['@language'] = language;\n  } // term may be used as a prefix\n\n\n  if ('@prefix' in value) {\n    if (term.match(/:|\\//)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @prefix used on a compact IRI term', 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n\n    if (api.isKeyword(mapping['@id'])) {\n      throw new JsonLdError('Invalid JSON-LD syntax; keywords may not be used as prefixes', 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n\n    if (typeof value['@prefix'] === 'boolean') {\n      mapping._prefix = value['@prefix'] === true;\n    } else {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context value for @prefix must be boolean', 'jsonld.SyntaxError', {\n        code: 'invalid @prefix value',\n        context: localCtx\n      });\n    }\n  }\n\n  if ('@direction' in value) {\n    const direction = value['@direction'];\n\n    if (direction !== null && direction !== 'ltr' && direction !== 'rtl') {\n      throw new JsonLdError('Invalid JSON-LD syntax; @direction value must be ' + 'null, \"ltr\", or \"rtl\".', 'jsonld.SyntaxError', {\n        code: 'invalid base direction',\n        context: localCtx\n      });\n    }\n\n    mapping['@direction'] = direction;\n  }\n\n  if ('@nest' in value) {\n    const nest = value['@nest'];\n\n    if (!_isString(nest) || nest !== '@nest' && nest.indexOf('@') === 0) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @nest value must be ' + 'a string which is not a keyword other than @nest.', 'jsonld.SyntaxError', {\n        code: 'invalid @nest value',\n        context: localCtx\n      });\n    }\n\n    mapping['@nest'] = nest;\n  } // disallow aliasing @context and @preserve\n\n\n  const id = mapping['@id'];\n\n  if (id === '@context' || id === '@preserve') {\n    throw new JsonLdError('Invalid JSON-LD syntax; @context and @preserve cannot be aliased.', 'jsonld.SyntaxError', {\n      code: 'invalid keyword alias',\n      context: localCtx\n    });\n  } // Check for overriding protected terms\n\n\n  if (previousMapping && previousMapping.protected && !overrideProtected) {\n    // force new term to continue to be protected and see if the mappings would\n    // be equal\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n\n    if (!_deepCompare(previousMapping, mapping)) {\n      const protectedMode = options && options.protectedMode || 'error';\n\n      if (protectedMode === 'error') {\n        throw new JsonLdError('Invalid JSON-LD syntax; tried to redefine a protected term.', 'jsonld.SyntaxError', {\n          code: 'protected term redefinition',\n          context: localCtx,\n          term\n        });\n      } else if (protectedMode === 'warn') {\n        // FIXME: remove logging and use a handler\n        console.warn('WARNING: protected term redefinition', {\n          term\n        });\n        return;\n      }\n\n      throw new JsonLdError('Invalid protectedMode.', 'jsonld.SyntaxError', {\n        code: 'invalid protected mode',\n        context: localCtx,\n        term,\n        protectedMode\n      });\n    }\n  }\n};\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\n\n\napi.expandIri = (activeCtx, value, relativeTo, options) => {\n  return _expandIri(activeCtx, value, relativeTo, undefined, undefined, options);\n};\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param localCtx the local context being processed (only given if called\n *          during context processing).\n * @param defined a map for tracking cycles in context definitions (only given\n *          if called during context processing).\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\n\n\nfunction _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {\n  // already expanded\n  if (value === null || !_isString(value) || api.isKeyword(value)) {\n    return value;\n  } // ignore non-keyword things that look like a keyword\n\n\n  if (value.match(KEYWORD_PATTERN)) {\n    return null;\n  } // define term dependency if not defined\n\n\n  if (localCtx && localCtx.hasOwnProperty(value) && defined.get(value) !== true) {\n    api.createTermDefinition({\n      activeCtx,\n      localCtx,\n      term: value,\n      defined,\n      options\n    });\n  }\n\n  relativeTo = relativeTo || {};\n\n  if (relativeTo.vocab) {\n    const mapping = activeCtx.mappings.get(value); // value is explicitly ignored with a null mapping\n\n    if (mapping === null) {\n      return null;\n    }\n\n    if (_isObject(mapping) && '@id' in mapping) {\n      // value is a term\n      return mapping['@id'];\n    }\n  } // split value into prefix:suffix\n\n\n  const colon = value.indexOf(':');\n\n  if (colon > 0) {\n    const prefix = value.substr(0, colon);\n    const suffix = value.substr(colon + 1); // do not expand blank nodes (prefix of '_') or already-absolute\n    // IRIs (suffix of '//')\n\n    if (prefix === '_' || suffix.indexOf('//') === 0) {\n      return value;\n    } // prefix dependency not defined, define it\n\n\n    if (localCtx && localCtx.hasOwnProperty(prefix)) {\n      api.createTermDefinition({\n        activeCtx,\n        localCtx,\n        term: prefix,\n        defined,\n        options\n      });\n    } // use mapping if prefix is defined\n\n\n    const mapping = activeCtx.mappings.get(prefix);\n\n    if (mapping && mapping._prefix) {\n      return mapping['@id'] + suffix;\n    } // already absolute IRI\n\n\n    if (_isAbsoluteIri(value)) {\n      return value;\n    }\n  } // prepend vocab\n\n\n  if (relativeTo.vocab && '@vocab' in activeCtx) {\n    return activeCtx['@vocab'] + value;\n  } // prepend base\n\n\n  if (relativeTo.base && '@base' in activeCtx) {\n    if (activeCtx['@base']) {\n      // The null case preserves value as potentially relative\n      return prependBase(prependBase(options.base, activeCtx['@base']), value);\n    }\n  } else if (relativeTo.base) {\n    return prependBase(options.base, value);\n  }\n\n  return value;\n}\n/**\n * Gets the initial context.\n *\n * @param options the options to use:\n *          [base] the document base IRI.\n *\n * @return the initial context.\n */\n\n\napi.getInitialContext = options => {\n  const key = JSON.stringify({\n    processingMode: options.processingMode\n  });\n  const cached = INITIAL_CONTEXT_CACHE.get(key);\n\n  if (cached) {\n    return cached;\n  }\n\n  const initialContext = {\n    processingMode: options.processingMode,\n    mappings: new Map(),\n    inverse: null,\n    getInverse: _createInverseContext,\n    clone: _cloneActiveContext,\n    revertToPreviousContext: _revertToPreviousContext,\n    protected: {}\n  }; // TODO: consider using LRU cache instead\n\n  if (INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {\n    // clear whole cache -- assumes scenario where the cache fills means\n    // the cache isn't being used very efficiently anyway\n    INITIAL_CONTEXT_CACHE.clear();\n  }\n\n  INITIAL_CONTEXT_CACHE.set(key, initialContext);\n  return initialContext;\n  /**\n   * Generates an inverse context for use in the compaction algorithm, if\n   * not already generated for the given active context.\n   *\n   * @return the inverse context.\n   */\n\n  function _createInverseContext() {\n    const activeCtx = this; // lazily create inverse\n\n    if (activeCtx.inverse) {\n      return activeCtx.inverse;\n    }\n\n    const inverse = activeCtx.inverse = {}; // variables for building fast CURIE map\n\n    const fastCurieMap = activeCtx.fastCurieMap = {};\n    const irisToTerms = {}; // handle default language\n\n    const defaultLanguage = (activeCtx['@language'] || '@none').toLowerCase(); // handle default direction\n\n    const defaultDirection = activeCtx['@direction']; // create term selections for each mapping in the context, ordered by\n    // shortest and then lexicographically least\n\n    const mappings = activeCtx.mappings;\n    const terms = [...mappings.keys()].sort(_compareShortestLeast);\n\n    for (const term of terms) {\n      const mapping = mappings.get(term);\n\n      if (mapping === null) {\n        continue;\n      }\n\n      let container = mapping['@container'] || '@none';\n      container = [].concat(container).sort().join('');\n\n      if (mapping['@id'] === null) {\n        continue;\n      } // iterate over every IRI in the mapping\n\n\n      const ids = _asArray(mapping['@id']);\n\n      for (const iri of ids) {\n        let entry = inverse[iri];\n        const isKeyword = api.isKeyword(iri);\n\n        if (!entry) {\n          // initialize entry\n          inverse[iri] = entry = {};\n\n          if (!isKeyword && !mapping._termHasColon) {\n            // init IRI to term map and fast CURIE prefixes\n            irisToTerms[iri] = [term];\n            const fastCurieEntry = {\n              iri,\n              terms: irisToTerms[iri]\n            };\n\n            if (iri[0] in fastCurieMap) {\n              fastCurieMap[iri[0]].push(fastCurieEntry);\n            } else {\n              fastCurieMap[iri[0]] = [fastCurieEntry];\n            }\n          }\n        } else if (!isKeyword && !mapping._termHasColon) {\n          // add IRI to term match\n          irisToTerms[iri].push(term);\n        } // add new entry\n\n\n        if (!entry[container]) {\n          entry[container] = {\n            '@language': {},\n            '@type': {},\n            '@any': {}\n          };\n        }\n\n        entry = entry[container];\n\n        _addPreferredTerm(term, entry['@any'], '@none');\n\n        if (mapping.reverse) {\n          // term is preferred for values using @reverse\n          _addPreferredTerm(term, entry['@type'], '@reverse');\n        } else if (mapping['@type'] === '@none') {\n          _addPreferredTerm(term, entry['@any'], '@none');\n\n          _addPreferredTerm(term, entry['@language'], '@none');\n\n          _addPreferredTerm(term, entry['@type'], '@none');\n        } else if ('@type' in mapping) {\n          // term is preferred for values using specific type\n          _addPreferredTerm(term, entry['@type'], mapping['@type']);\n        } else if ('@language' in mapping && '@direction' in mapping) {\n          // term is preferred for values using specific language and direction\n          const language = mapping['@language'];\n          const direction = mapping['@direction'];\n\n          if (language && direction) {\n            _addPreferredTerm(term, entry['@language'], `${language}_${direction}`.toLowerCase());\n          } else if (language) {\n            _addPreferredTerm(term, entry['@language'], language.toLowerCase());\n          } else if (direction) {\n            _addPreferredTerm(term, entry['@language'], `_${direction}`);\n          } else {\n            _addPreferredTerm(term, entry['@language'], '@null');\n          }\n        } else if ('@language' in mapping) {\n          _addPreferredTerm(term, entry['@language'], (mapping['@language'] || '@null').toLowerCase());\n        } else if ('@direction' in mapping) {\n          if (mapping['@direction']) {\n            _addPreferredTerm(term, entry['@language'], `_${mapping['@direction']}`);\n          } else {\n            _addPreferredTerm(term, entry['@language'], '@none');\n          }\n        } else if (defaultDirection) {\n          _addPreferredTerm(term, entry['@language'], `_${defaultDirection}`);\n\n          _addPreferredTerm(term, entry['@language'], '@none');\n\n          _addPreferredTerm(term, entry['@type'], '@none');\n        } else {\n          // add entries for no type and no language\n          _addPreferredTerm(term, entry['@language'], defaultLanguage);\n\n          _addPreferredTerm(term, entry['@language'], '@none');\n\n          _addPreferredTerm(term, entry['@type'], '@none');\n        }\n      }\n    } // build fast CURIE map\n\n\n    for (const key in fastCurieMap) {\n      _buildIriMap(fastCurieMap, key, 1);\n    }\n\n    return inverse;\n  }\n  /**\n   * Runs a recursive algorithm to build a lookup map for quickly finding\n   * potential CURIEs.\n   *\n   * @param iriMap the map to build.\n   * @param key the current key in the map to work on.\n   * @param idx the index into the IRI to compare.\n   */\n\n\n  function _buildIriMap(iriMap, key, idx) {\n    const entries = iriMap[key];\n    const next = iriMap[key] = {};\n    let iri;\n    let letter;\n\n    for (const entry of entries) {\n      iri = entry.iri;\n\n      if (idx >= iri.length) {\n        letter = '';\n      } else {\n        letter = iri[idx];\n      }\n\n      if (letter in next) {\n        next[letter].push(entry);\n      } else {\n        next[letter] = [entry];\n      }\n    }\n\n    for (const key in next) {\n      if (key === '') {\n        continue;\n      }\n\n      _buildIriMap(next, key, idx + 1);\n    }\n  }\n  /**\n   * Adds the term for the given entry if not already added.\n   *\n   * @param term the term to add.\n   * @param entry the inverse context typeOrLanguage entry to add to.\n   * @param typeOrLanguageValue the key in the entry to add to.\n   */\n\n\n  function _addPreferredTerm(term, entry, typeOrLanguageValue) {\n    if (!entry.hasOwnProperty(typeOrLanguageValue)) {\n      entry[typeOrLanguageValue] = term;\n    }\n  }\n  /**\n   * Clones an active context, creating a child active context.\n   *\n   * @return a clone (child) of the active context.\n   */\n\n\n  function _cloneActiveContext() {\n    const child = {};\n    child.mappings = util.clone(this.mappings);\n    child.clone = this.clone;\n    child.inverse = null;\n    child.getInverse = this.getInverse;\n    child.protected = util.clone(this.protected);\n\n    if (this.previousContext) {\n      child.previousContext = this.previousContext.clone();\n    }\n\n    child.revertToPreviousContext = this.revertToPreviousContext;\n\n    if ('@base' in this) {\n      child['@base'] = this['@base'];\n    }\n\n    if ('@language' in this) {\n      child['@language'] = this['@language'];\n    }\n\n    if ('@vocab' in this) {\n      child['@vocab'] = this['@vocab'];\n    }\n\n    return child;\n  }\n  /**\n   * Reverts any type-scoped context in this active context to the previous\n   * context.\n   */\n\n\n  function _revertToPreviousContext() {\n    if (!this.previousContext) {\n      return this;\n    }\n\n    return this.previousContext.clone();\n  }\n};\n/**\n * Gets the value for the given active context key and type, null if none is\n * set or undefined if none is set and type is '@context'.\n *\n * @param ctx the active context.\n * @param key the context key.\n * @param [type] the type of value to get (eg: '@id', '@type'), if not\n *          specified gets the entire entry for a key, null if not found.\n *\n * @return the value, null, or undefined.\n */\n\n\napi.getContextValue = (ctx, key, type) => {\n  // invalid key\n  if (key === null) {\n    if (type === '@context') {\n      return undefined;\n    }\n\n    return null;\n  } // get specific entry information\n\n\n  if (ctx.mappings.has(key)) {\n    const entry = ctx.mappings.get(key);\n\n    if (_isUndefined(type)) {\n      // return whole entry\n      return entry;\n    }\n\n    if (entry.hasOwnProperty(type)) {\n      // return entry value for type\n      return entry[type];\n    }\n  } // get default language\n\n\n  if (type === '@language' && type in ctx) {\n    return ctx[type];\n  } // get default direction\n\n\n  if (type === '@direction' && type in ctx) {\n    return ctx[type];\n  }\n\n  if (type === '@context') {\n    return undefined;\n  }\n\n  return null;\n};\n/**\n * Processing Mode check.\n *\n * @param activeCtx the current active context.\n * @param version the string or numeric version to check.\n *\n * @return boolean.\n */\n\n\napi.processingMode = (activeCtx, version) => {\n  if (version.toString() >= '1.1') {\n    return !activeCtx.processingMode || activeCtx.processingMode >= 'json-ld-' + version.toString();\n  } else {\n    return activeCtx.processingMode === 'json-ld-1.0';\n  }\n};\n/**\n * Returns whether or not the given value is a keyword.\n *\n * @param v the value to check.\n *\n * @return true if the value is a keyword, false if not.\n */\n\n\napi.isKeyword = v => {\n  if (!_isString(v) || v[0] !== '@') {\n    return false;\n  }\n\n  switch (v) {\n    case '@base':\n    case '@container':\n    case '@context':\n    case '@default':\n    case '@direction':\n    case '@embed':\n    case '@explicit':\n    case '@graph':\n    case '@id':\n    case '@included':\n    case '@index':\n    case '@json':\n    case '@language':\n    case '@list':\n    case '@nest':\n    case '@none':\n    case '@omitDefault':\n    case '@prefix':\n    case '@preserve':\n    case '@protected':\n    case '@requireAll':\n    case '@reverse':\n    case '@set':\n    case '@type':\n    case '@value':\n    case '@version':\n    case '@vocab':\n      return true;\n  }\n\n  return false;\n};\n\nfunction _deepCompare(x1, x2) {\n  // compare `null` or primitive types directly\n  if (!(x1 && typeof x1 === 'object') || !(x2 && typeof x2 === 'object')) {\n    return x1 === x2;\n  } // x1 and x2 are objects (also potentially arrays)\n\n\n  const x1Array = Array.isArray(x1);\n\n  if (x1Array !== Array.isArray(x2)) {\n    return false;\n  }\n\n  if (x1Array) {\n    if (x1.length !== x2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < x1.length; ++i) {\n      if (!_deepCompare(x1[i], x2[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  } // x1 and x2 are non-array objects\n\n\n  const k1s = Object.keys(x1);\n  const k2s = Object.keys(x2);\n\n  if (k1s.length !== k2s.length) {\n    return false;\n  }\n\n  for (const k1 in x1) {\n    let v1 = x1[k1];\n    let v2 = x2[k1]; // special case: `@container` can be in any order\n\n    if (k1 === '@container') {\n      if (Array.isArray(v1) && Array.isArray(v2)) {\n        v1 = v1.slice().sort();\n        v2 = v2.slice().sort();\n      }\n    }\n\n    if (!_deepCompare(v1, v2)) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/app/node_modules/jsonld/lib/context.js"],"names":["util","require","JsonLdError","isArray","_isArray","isObject","_isObject","isString","_isString","isUndefined","_isUndefined","isAbsolute","_isAbsoluteIri","isRelative","_isRelativeIri","prependBase","parse","parseUrl","asArray","_asArray","compareShortestLeast","_compareShortestLeast","INITIAL_CONTEXT_CACHE","Map","INITIAL_CONTEXT_CACHE_MAX_SIZE","KEYWORD_PATTERN","api","module","exports","process","activeCtx","localCtx","options","propagate","overrideProtected","cycles","Set","ctxs","length","resolved","contextResolver","resolve","context","documentLoader","base","document","rval","previousContext","clone","resolvedContext","ctx","Object","keys","protected","protectedMode","code","console","warn","processed","getProcessed","oldActiveCtx","getInitialContext","term","_protected","entries","mappings","setProcessed","defined","processingMode","set","value","_expandIri","vocab","undefined","toLowerCase","resolvedImport","processedImport","importCtx","key","hasOwnProperty","createTermDefinition","keyCtx","url","has","add","e","get","validKeys","some","k","includes","isKeyword","match","previousMapping","delete","simpleTerm","mapping","reverse","push","kw","colon","indexOf","_termHasColon","id","termDefined","termIri","_prefix","prefix","substr","suffix","type","container","validContainers","isValid","hasSet","every","c","join","language","direction","nest","_deepCompare","expandIri","relativeTo","JSON","stringify","cached","initialContext","inverse","getInverse","_createInverseContext","_cloneActiveContext","revertToPreviousContext","_revertToPreviousContext","size","clear","fastCurieMap","irisToTerms","defaultLanguage","defaultDirection","terms","sort","concat","ids","iri","entry","fastCurieEntry","_addPreferredTerm","_buildIriMap","iriMap","idx","next","letter","typeOrLanguageValue","child","getContextValue","version","toString","v","x1","x2","x1Array","Array","i","k1s","k2s","k1","v1","v2","slice"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst util = require('./util');\nconst JsonLdError = require('./JsonLdError');\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString,\n  isUndefined: _isUndefined\n} = require('./types');\n\nconst {\n  isAbsolute: _isAbsoluteIri,\n  isRelative: _isRelativeIri,\n  prependBase,\n  parse: parseUrl\n} = require('./url');\n\nconst {\n  asArray: _asArray,\n  compareShortestLeast: _compareShortestLeast\n} = require('./util');\n\nconst INITIAL_CONTEXT_CACHE = new Map();\nconst INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;\nconst KEYWORD_PATTERN = /^@[a-zA-Z]+$/;\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Processes a local context and returns a new active context.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context to process.\n * @param options the context processing options.\n * @param propagate `true` if `false`, retains any previously defined term,\n *   which can be rolled back when the descending into a new node object.\n * @param overrideProtected `false` allows protected terms to be modified.\n *\n * @return a Promise that resolves to the new active context.\n */\napi.process = async ({\n  activeCtx, localCtx, options,\n  propagate = true,\n  overrideProtected = false,\n  cycles = new Set()\n}) => {\n  // normalize local context to an array of @context objects\n  if(_isObject(localCtx) && '@context' in localCtx &&\n    _isArray(localCtx['@context'])) {\n    localCtx = localCtx['@context'];\n  }\n  const ctxs = _asArray(localCtx);\n\n  // no contexts in array, return current active context w/o changes\n  if(ctxs.length === 0) {\n    return activeCtx;\n  }\n\n  // resolve contexts\n  const resolved = await options.contextResolver.resolve({\n    activeCtx,\n    context: localCtx,\n    documentLoader: options.documentLoader,\n    base: options.base\n  });\n\n  // override propagate if first resolved context has `@propagate`\n  if(_isObject(resolved[0].document) &&\n    typeof resolved[0].document['@propagate'] === 'boolean') {\n    // retrieve early, error checking done later\n    propagate = resolved[0].document['@propagate'];\n  }\n\n  // process each context in order, update active context\n  // on each iteration to ensure proper caching\n  let rval = activeCtx;\n\n  // track the previous context\n  // if not propagating, make sure rval has a previous context\n  if(!propagate && !rval.previousContext) {\n    // clone `rval` context before updating\n    rval = rval.clone();\n    rval.previousContext = activeCtx;\n  }\n\n  for(const resolvedContext of resolved) {\n    let {document: ctx} = resolvedContext;\n\n    // update active context to one computed from last iteration\n    activeCtx = rval;\n\n    // reset to initial context\n    if(ctx === null) {\n      // We can't nullify if there are protected terms and we're\n      // not allowing overrides (e.g. processing a property term scoped context)\n      if(!overrideProtected &&\n        Object.keys(activeCtx.protected).length !== 0) {\n        const protectedMode = (options && options.protectedMode) || 'error';\n        if(protectedMode === 'error') {\n          throw new JsonLdError(\n            'Tried to nullify a context with protected terms outside of ' +\n            'a term definition.',\n            'jsonld.SyntaxError',\n            {code: 'invalid context nullification'});\n        } else if(protectedMode === 'warn') {\n          // FIXME: remove logging and use a handler\n          console.warn('WARNING: invalid context nullification');\n\n          // get processed context from cache if available\n          const processed = resolvedContext.getProcessed(activeCtx);\n          if(processed) {\n            rval = activeCtx = processed;\n            continue;\n          }\n\n          const oldActiveCtx = activeCtx;\n          // copy all protected term definitions to fresh initial context\n          rval = activeCtx = api.getInitialContext(options).clone();\n          for(const [term, _protected] of\n            Object.entries(oldActiveCtx.protected)) {\n            if(_protected) {\n              activeCtx.mappings[term] =\n                util.clone(oldActiveCtx.mappings[term]);\n            }\n          }\n          activeCtx.protected = util.clone(oldActiveCtx.protected);\n\n          // cache processed result\n          resolvedContext.setProcessed(oldActiveCtx, rval);\n          continue;\n        }\n        throw new JsonLdError(\n          'Invalid protectedMode.',\n          'jsonld.SyntaxError',\n          {code: 'invalid protected mode', context: localCtx, protectedMode});\n      }\n      rval = activeCtx = api.getInitialContext(options).clone();\n      continue;\n    }\n\n    // get processed context from cache if available\n    const processed = resolvedContext.getProcessed(activeCtx);\n    if(processed) {\n      rval = activeCtx = processed;\n      continue;\n    }\n\n    // dereference @context key if present\n    if(_isObject(ctx) && '@context' in ctx) {\n      ctx = ctx['@context'];\n    }\n\n    // context must be an object by now, all URLs retrieved before this call\n    if(!_isObject(ctx)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context must be an object.',\n        'jsonld.SyntaxError', {code: 'invalid local context', context: ctx});\n    }\n\n    // TODO: there is likely a `previousContext` cloning optimization that\n    // could be applied here (no need to copy it under certain conditions)\n\n    // clone context before updating it\n    rval = rval.clone();\n\n    // define context mappings for keys in local context\n    const defined = new Map();\n\n    // handle @version\n    if('@version' in ctx) {\n      if(ctx['@version'] !== 1.1) {\n        throw new JsonLdError(\n          'Unsupported JSON-LD version: ' + ctx['@version'],\n          'jsonld.UnsupportedVersion',\n          {code: 'invalid @version value', context: ctx});\n      }\n      if(activeCtx.processingMode &&\n        activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError(\n          '@version: ' + ctx['@version'] + ' not compatible with ' +\n          activeCtx.processingMode,\n          'jsonld.ProcessingModeConflict',\n          {code: 'processing mode conflict', context: ctx});\n      }\n      rval.processingMode = 'json-ld-1.1';\n      rval['@version'] = ctx['@version'];\n      defined.set('@version', true);\n    }\n\n    // if not set explicitly, set processingMode to \"json-ld-1.1\"\n    rval.processingMode =\n      rval.processingMode || activeCtx.processingMode;\n\n    // handle @base\n    if('@base' in ctx) {\n      let base = ctx['@base'];\n\n      if(base === null || _isAbsoluteIri(base)) {\n        // no action\n      } else if(_isRelativeIri(base)) {\n        base = prependBase(rval['@base'], base);\n      } else {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@base\" in a ' +\n          '@context must be an absolute IRI, a relative IRI, or null.',\n          'jsonld.SyntaxError', {code: 'invalid base IRI', context: ctx});\n      }\n\n      rval['@base'] = base;\n      defined.set('@base', true);\n    }\n\n    // handle @vocab\n    if('@vocab' in ctx) {\n      const value = ctx['@vocab'];\n      if(value === null) {\n        delete rval['@vocab'];\n      } else if(!_isString(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@vocab\" in a ' +\n          '@context must be a string or null.',\n          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});\n      } else if(!_isAbsoluteIri(value) && api.processingMode(rval, 1.0)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@vocab\" in a ' +\n          '@context must be an absolute IRI.',\n          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});\n      } else {\n        rval['@vocab'] = _expandIri(rval, value, {vocab: true, base: true},\n          undefined, undefined, options);\n      }\n      defined.set('@vocab', true);\n    }\n\n    // handle @language\n    if('@language' in ctx) {\n      const value = ctx['@language'];\n      if(value === null) {\n        delete rval['@language'];\n      } else if(!_isString(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@language\" in a ' +\n          '@context must be a string or null.',\n          'jsonld.SyntaxError',\n          {code: 'invalid default language', context: ctx});\n      } else {\n        rval['@language'] = value.toLowerCase();\n      }\n      defined.set('@language', true);\n    }\n\n    // handle @direction\n    if('@direction' in ctx) {\n      const value = ctx['@direction'];\n      if(activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @direction not compatible with ' +\n          activeCtx.processingMode,\n          'jsonld.SyntaxError',\n          {code: 'invalid context member', context: ctx});\n      }\n      if(value === null) {\n        delete rval['@direction'];\n      } else if(value !== 'ltr' && value !== 'rtl') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@direction\" in a ' +\n          '@context must be null, \"ltr\", or \"rtl\".',\n          'jsonld.SyntaxError',\n          {code: 'invalid base direction', context: ctx});\n      } else {\n        rval['@direction'] = value;\n      }\n      defined.set('@direction', true);\n    }\n\n    // handle @propagate\n    // note: we've already extracted it, here we just do error checking\n    if('@propagate' in ctx) {\n      const value = ctx['@propagate'];\n      if(activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @propagate not compatible with ' +\n          activeCtx.processingMode,\n          'jsonld.SyntaxError',\n          {code: 'invalid context entry', context: ctx});\n      }\n      if(typeof value !== 'boolean') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @propagate value must be a boolean.',\n          'jsonld.SyntaxError',\n          {code: 'invalid @propagate value', context: localCtx});\n      }\n      defined.set('@propagate', true);\n    }\n\n    // handle @import\n    if('@import' in ctx) {\n      const value = ctx['@import'];\n      if(activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @import not compatible with ' +\n          activeCtx.processingMode,\n          'jsonld.SyntaxError',\n          {code: 'invalid context entry', context: ctx});\n      }\n      if(!_isString(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @import must be a string.',\n          'jsonld.SyntaxError',\n          {code: 'invalid @import value', context: localCtx});\n      }\n\n      // resolve contexts\n      const resolvedImport = await options.contextResolver.resolve({\n        activeCtx,\n        context: value,\n        documentLoader: options.documentLoader,\n        base: options.base\n      });\n      if(resolvedImport.length !== 1) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @import must reference a single context.',\n          'jsonld.SyntaxError',\n          {code: 'invalid remote context', context: localCtx});\n      }\n      const processedImport = resolvedImport[0].getProcessed(activeCtx);\n      if(processedImport) {\n        // Note: if the same context were used in this active context\n        // as a reference context, then processed_input might not\n        // be a dict.\n        ctx = processedImport;\n      } else {\n        const importCtx = resolvedImport[0].document;\n        if('@import' in importCtx) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax: ' +\n            'imported context must not include @import.',\n            'jsonld.SyntaxError',\n            {code: 'invalid context entry', context: localCtx});\n        }\n\n        // merge ctx into importCtx and replace rval with the result\n        for(const key in importCtx) {\n          if(!ctx.hasOwnProperty(key)) {\n            ctx[key] = importCtx[key];\n          }\n        }\n\n        // Note: this could potenially conflict if the import\n        // were used in the same active context as a referenced\n        // context and an import. In this case, we\n        // could override the cached result, but seems unlikely.\n        resolvedImport[0].setProcessed(activeCtx, ctx);\n      }\n\n      defined.set('@import', true);\n    }\n\n    // handle @protected; determine whether this sub-context is declaring\n    // all its terms to be \"protected\" (exceptions can be made on a\n    // per-definition basis)\n    defined.set('@protected', ctx['@protected'] || false);\n\n    // process all other keys\n    for(const key in ctx) {\n      api.createTermDefinition({\n        activeCtx: rval,\n        localCtx: ctx,\n        term: key,\n        defined,\n        options,\n        overrideProtected\n      });\n\n      if(_isObject(ctx[key]) && '@context' in ctx[key]) {\n        const keyCtx = ctx[key]['@context'];\n        let process = true;\n        if(_isString(keyCtx)) {\n          const url = prependBase(options.base, keyCtx);\n          // track processed contexts to avoid scoped context recursion\n          if(cycles.has(url)) {\n            process = false;\n          } else {\n            cycles.add(url);\n          }\n        }\n        // parse context to validate\n        if(process) {\n          try {\n            await api.process({\n              activeCtx: rval.clone(),\n              localCtx: ctx[key]['@context'],\n              overrideProtected: true,\n              options,\n              cycles\n            });\n          } catch(e) {\n            throw new JsonLdError(\n              'Invalid JSON-LD syntax; invalid scoped context.',\n              'jsonld.SyntaxError',\n              {\n                code: 'invalid scoped context',\n                context: ctx[key]['@context'],\n                term: key\n              });\n          }\n        }\n      }\n    }\n\n    // cache processed result\n    resolvedContext.setProcessed(activeCtx, rval);\n  }\n\n  return rval;\n};\n\n/**\n * Creates a term definition during context processing.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context being processed.\n * @param term the term in the local context to define the mapping for.\n * @param defined a map of defining/defined keys to detect cycles and prevent\n *          double definitions.\n * @param {Object} [options] - creation options.\n * @param {string} [options.protectedMode=\"error\"] - \"error\" to throw error\n *   on `@protected` constraint violation, \"warn\" to allow violations and\n *   signal a warning.\n * @param overrideProtected `false` allows protected terms to be modified.\n */\napi.createTermDefinition = ({\n  activeCtx,\n  localCtx,\n  term,\n  defined,\n  options,\n  overrideProtected = false,\n}) => {\n  if(defined.has(term)) {\n    // term already defined\n    if(defined.get(term)) {\n      return;\n    }\n    // cycle detected\n    throw new JsonLdError(\n      'Cyclical context definition detected.',\n      'jsonld.CyclicalContext',\n      {code: 'cyclic IRI mapping', context: localCtx, term});\n  }\n\n  // now defining term\n  defined.set(term, false);\n\n  // get context term value\n  let value;\n  if(localCtx.hasOwnProperty(term)) {\n    value = localCtx[term];\n  }\n\n  if(term === '@type' &&\n     _isObject(value) &&\n     (value['@container'] || '@set') === '@set' &&\n     api.processingMode(activeCtx, 1.1)) {\n\n    const validKeys = ['@container', '@id', '@protected'];\n    const keys = Object.keys(value);\n    if(keys.length === 0 || keys.some(k => !validKeys.includes(k))) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; keywords cannot be overridden.',\n        'jsonld.SyntaxError',\n        {code: 'keyword redefinition', context: localCtx, term});\n    }\n  } else if(api.isKeyword(term)) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; keywords cannot be overridden.',\n      'jsonld.SyntaxError',\n      {code: 'keyword redefinition', context: localCtx, term});\n  } else if(term.match(KEYWORD_PATTERN)) {\n    // FIXME: remove logging and use a handler\n    console.warn('WARNING: terms beginning with \"@\" are reserved' +\n      ' for future use and ignored', {term});\n    return;\n  } else if(term === '') {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; a term cannot be an empty string.',\n      'jsonld.SyntaxError',\n      {code: 'invalid term definition', context: localCtx});\n  }\n\n  // keep reference to previous mapping for potential `@protected` check\n  const previousMapping = activeCtx.mappings.get(term);\n\n  // remove old mapping\n  if(activeCtx.mappings.has(term)) {\n    activeCtx.mappings.delete(term);\n  }\n\n  // convert short-hand value to object w/@id\n  let simpleTerm = false;\n  if(_isString(value) || value === null) {\n    simpleTerm = true;\n    value = {'@id': value};\n  }\n\n  if(!_isObject(value)) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; @context term values must be ' +\n      'strings or objects.',\n      'jsonld.SyntaxError',\n      {code: 'invalid term definition', context: localCtx});\n  }\n\n  // create new mapping\n  const mapping = {};\n  activeCtx.mappings.set(term, mapping);\n  mapping.reverse = false;\n\n  // make sure term definition only has expected keywords\n  const validKeys = ['@container', '@id', '@language', '@reverse', '@type'];\n\n  // JSON-LD 1.1 support\n  if(api.processingMode(activeCtx, 1.1)) {\n    validKeys.push(\n      '@context', '@direction', '@index', '@nest', '@prefix', '@protected');\n  }\n\n  for(const kw in value) {\n    if(!validKeys.includes(kw)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a term definition must not contain ' + kw,\n        'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n  }\n\n  // always compute whether term has a colon as an optimization for\n  // _compactIri\n  const colon = term.indexOf(':');\n  mapping._termHasColon = (colon > 0);\n\n  if('@reverse' in value) {\n    if('@id' in value) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @reverse term definition must not ' +\n        'contain @id.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n    if('@nest' in value) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @reverse term definition must not ' +\n        'contain @nest.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n    const reverse = value['@reverse'];\n    if(!_isString(reverse)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @reverse value must be a string.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n\n    if(!api.isKeyword(reverse) && reverse.match(KEYWORD_PATTERN)) {\n      // FIXME: remove logging and use a handler\n      console.warn('WARNING: values beginning with \"@\" are reserved' +\n        ' for future use and ignored', {reverse});\n      if(previousMapping) {\n        activeCtx.mappings.set(term, previousMapping);\n      } else {\n        activeCtx.mappings.delete(term);\n      }\n      return;\n    }\n\n    // expand and add @id mapping\n    const id = _expandIri(\n      activeCtx, reverse, {vocab: true, base: false}, localCtx, defined,\n      options);\n    if(!_isAbsoluteIri(id)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @reverse value must be an ' +\n        'absolute IRI or a blank node identifier.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n\n    mapping['@id'] = id;\n    mapping.reverse = true;\n  } else if('@id' in value) {\n    let id = value['@id'];\n    if(id && !_isString(id)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @id value must be an array ' +\n        'of strings or a string.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n    if(id === null) {\n      // reserve a null term, which may be protected\n      mapping['@id'] = null;\n    } else if(!api.isKeyword(id) && id.match(KEYWORD_PATTERN)) {\n      // FIXME: remove logging and use a handler\n      console.warn('WARNING: values beginning with \"@\" are reserved' +\n        ' for future use and ignored', {id});\n      if(previousMapping) {\n        activeCtx.mappings.set(term, previousMapping);\n      } else {\n        activeCtx.mappings.delete(term);\n      }\n      return;\n    } else if(id !== term) {\n      // expand and add @id mapping\n      id = _expandIri(\n        activeCtx, id, {vocab: true, base: false}, localCtx, defined, options);\n      if(!_isAbsoluteIri(id) && !api.isKeyword(id)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; a @context @id value must be an ' +\n          'absolute IRI, a blank node identifier, or a keyword.',\n          'jsonld.SyntaxError',\n          {code: 'invalid IRI mapping', context: localCtx});\n      }\n\n      // if term has the form of an IRI it must map the same\n      if(term.match(/(?::[^:])|\\//)) {\n        const termDefined = new Map(defined).set(term, true);\n        const termIri = _expandIri(\n          activeCtx, term, {vocab: true, base: false},\n          localCtx, termDefined, options);\n        if(termIri !== id) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; term in form of IRI must ' +\n            'expand to definition.',\n            'jsonld.SyntaxError',\n            {code: 'invalid IRI mapping', context: localCtx});\n        }\n      }\n\n      mapping['@id'] = id;\n      // indicate if this term may be used as a compact IRI prefix\n      mapping._prefix = (simpleTerm &&\n        !mapping._termHasColon &&\n        id.match(/[:\\/\\?#\\[\\]@]$/));\n    }\n  }\n\n  if(!('@id' in mapping)) {\n    // see if the term has a prefix\n    if(mapping._termHasColon) {\n      const prefix = term.substr(0, colon);\n      if(localCtx.hasOwnProperty(prefix)) {\n        // define parent prefix\n        api.createTermDefinition({\n          activeCtx, localCtx, term: prefix, defined, options\n        });\n      }\n\n      if(activeCtx.mappings.has(prefix)) {\n        // set @id based on prefix parent\n        const suffix = term.substr(colon + 1);\n        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;\n      } else {\n        // term is an absolute IRI\n        mapping['@id'] = term;\n      }\n    } else if(term === '@type') {\n      // Special case, were we've previously determined that container is @set\n      mapping['@id'] = term;\n    } else {\n      // non-IRIs *must* define @ids if @vocab is not available\n      if(!('@vocab' in activeCtx)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @context terms must define an @id.',\n          'jsonld.SyntaxError',\n          {code: 'invalid IRI mapping', context: localCtx, term});\n      }\n      // prepend vocab to term\n      mapping['@id'] = activeCtx['@vocab'] + term;\n    }\n  }\n\n  // Handle term protection\n  if(value['@protected'] === true ||\n    (defined.get('@protected') === true && value['@protected'] !== false)) {\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n  }\n\n  // IRI mapping now defined\n  defined.set(term, true);\n\n  if('@type' in value) {\n    let type = value['@type'];\n    if(!_isString(type)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; an @context @type value must be a string.',\n        'jsonld.SyntaxError',\n        {code: 'invalid type mapping', context: localCtx});\n    }\n\n    if((type === '@json' || type === '@none')) {\n      if(api.processingMode(activeCtx, 1.0)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; an @context @type value must not be ' +\n          `\"${type}\" in JSON-LD 1.0 mode.`,\n          'jsonld.SyntaxError',\n          {code: 'invalid type mapping', context: localCtx});\n      }\n    } else if(type !== '@id' && type !== '@vocab') {\n      // expand @type to full IRI\n      type = _expandIri(\n        activeCtx, type, {vocab: true, base: false}, localCtx, defined,\n        options);\n      if(!_isAbsoluteIri(type)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; an @context @type value must be an ' +\n          'absolute IRI.',\n          'jsonld.SyntaxError',\n          {code: 'invalid type mapping', context: localCtx});\n      }\n      if(type.indexOf('_:') === 0) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; an @context @type value must be an IRI, ' +\n          'not a blank node identifier.',\n          'jsonld.SyntaxError',\n          {code: 'invalid type mapping', context: localCtx});\n      }\n    }\n\n    // add @type to mapping\n    mapping['@type'] = type;\n  }\n\n  if('@container' in value) {\n    // normalize container to an array form\n    const container = _isString(value['@container']) ?\n      [value['@container']] : (value['@container'] || []);\n    const validContainers = ['@list', '@set', '@index', '@language'];\n    let isValid = true;\n    const hasSet = container.includes('@set');\n\n    // JSON-LD 1.1 support\n    if(api.processingMode(activeCtx, 1.1)) {\n      validContainers.push('@graph', '@id', '@type');\n\n      // check container length\n      if(container.includes('@list')) {\n        if(container.length !== 1) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; @context @container with @list must ' +\n            'have no other values',\n            'jsonld.SyntaxError',\n            {code: 'invalid container mapping', context: localCtx});\n        }\n      } else if(container.includes('@graph')) {\n        if(container.some(key =>\n          key !== '@graph' && key !== '@id' && key !== '@index' &&\n          key !== '@set')) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; @context @container with @graph must ' +\n            'have no other values other than @id, @index, and @set',\n            'jsonld.SyntaxError',\n            {code: 'invalid container mapping', context: localCtx});\n        }\n      } else {\n        // otherwise, container may also include @set\n        isValid &= container.length <= (hasSet ? 2 : 1);\n      }\n\n      if(container.includes('@type')) {\n        // If mapping does not have an @type,\n        // set it to @id\n        mapping['@type'] = mapping['@type'] || '@id';\n\n        // type mapping must be either @id or @vocab\n        if(!['@id', '@vocab'].includes(mapping['@type'])) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; container: @type requires @type to be ' +\n            '@id or @vocab.',\n            'jsonld.SyntaxError',\n            {code: 'invalid type mapping', context: localCtx});\n        }\n      }\n    } else {\n      // in JSON-LD 1.0, container must not be an array (it must be a string,\n      // which is one of the validContainers)\n      isValid &= !_isArray(value['@container']);\n\n      // check container length\n      isValid &= container.length <= 1;\n    }\n\n    // check against valid containers\n    isValid &= container.every(c => validContainers.includes(c));\n\n    // @set not allowed with @list\n    isValid &= !(hasSet && container.includes('@list'));\n\n    if(!isValid) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @container value must be ' +\n        'one of the following: ' + validContainers.join(', '),\n        'jsonld.SyntaxError',\n        {code: 'invalid container mapping', context: localCtx});\n    }\n\n    if(mapping.reverse &&\n      !container.every(c => ['@index', '@set'].includes(c))) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @container value for a @reverse ' +\n        'type definition must be @index or @set.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n\n    // add @container to mapping\n    mapping['@container'] = container;\n  }\n\n  // property indexing\n  if('@index' in value) {\n    if(!('@container' in value) || !mapping['@container'].includes('@index')) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @index without @index in @container: ' +\n        `\"${value['@index']}\" on term \"${term}\".`, 'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    if(!_isString(value['@index']) || value['@index'].indexOf('@') === 0) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @index must expand to an IRI: ' +\n        `\"${value['@index']}\" on term \"${term}\".`, 'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    mapping['@index'] = value['@index'];\n  }\n\n  // scoped contexts\n  if('@context' in value) {\n    mapping['@context'] = value['@context'];\n  }\n\n  if('@language' in value && !('@type' in value)) {\n    let language = value['@language'];\n    if(language !== null && !_isString(language)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @language value must be ' +\n        'a string or null.', 'jsonld.SyntaxError',\n        {code: 'invalid language mapping', context: localCtx});\n    }\n\n    // add @language to mapping\n    if(language !== null) {\n      language = language.toLowerCase();\n    }\n    mapping['@language'] = language;\n  }\n\n  // term may be used as a prefix\n  if('@prefix' in value) {\n    if(term.match(/:|\\//)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @prefix used on a compact IRI term',\n        'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    if(api.isKeyword(mapping['@id'])) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; keywords may not be used as prefixes',\n        'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    if(typeof value['@prefix'] === 'boolean') {\n      mapping._prefix = value['@prefix'] === true;\n    } else {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context value for @prefix must be boolean',\n        'jsonld.SyntaxError',\n        {code: 'invalid @prefix value', context: localCtx});\n    }\n  }\n\n  if('@direction' in value) {\n    const direction = value['@direction'];\n    if(direction !== null && direction !== 'ltr' && direction !== 'rtl') {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @direction value must be ' +\n        'null, \"ltr\", or \"rtl\".',\n        'jsonld.SyntaxError',\n        {code: 'invalid base direction', context: localCtx});\n    }\n    mapping['@direction'] = direction;\n  }\n\n  if('@nest' in value) {\n    const nest = value['@nest'];\n    if(!_isString(nest) || (nest !== '@nest' && nest.indexOf('@') === 0)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @nest value must be ' +\n        'a string which is not a keyword other than @nest.',\n        'jsonld.SyntaxError',\n        {code: 'invalid @nest value', context: localCtx});\n    }\n    mapping['@nest'] = nest;\n  }\n\n  // disallow aliasing @context and @preserve\n  const id = mapping['@id'];\n  if(id === '@context' || id === '@preserve') {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; @context and @preserve cannot be aliased.',\n      'jsonld.SyntaxError', {code: 'invalid keyword alias', context: localCtx});\n  }\n\n  // Check for overriding protected terms\n  if(previousMapping && previousMapping.protected && !overrideProtected) {\n    // force new term to continue to be protected and see if the mappings would\n    // be equal\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n    if(!_deepCompare(previousMapping, mapping)) {\n      const protectedMode = (options && options.protectedMode) || 'error';\n      if(protectedMode === 'error') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; tried to redefine a protected term.',\n          'jsonld.SyntaxError',\n          {code: 'protected term redefinition', context: localCtx, term});\n      } else if(protectedMode === 'warn') {\n        // FIXME: remove logging and use a handler\n        console.warn('WARNING: protected term redefinition', {term});\n        return;\n      }\n      throw new JsonLdError(\n        'Invalid protectedMode.',\n        'jsonld.SyntaxError',\n        {code: 'invalid protected mode', context: localCtx, term,\n          protectedMode});\n    }\n  }\n};\n\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\napi.expandIri = (activeCtx, value, relativeTo, options) => {\n  return _expandIri(activeCtx, value, relativeTo, undefined, undefined,\n    options);\n};\n\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param localCtx the local context being processed (only given if called\n *          during context processing).\n * @param defined a map for tracking cycles in context definitions (only given\n *          if called during context processing).\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\nfunction _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {\n  // already expanded\n  if(value === null || !_isString(value) || api.isKeyword(value)) {\n    return value;\n  }\n\n  // ignore non-keyword things that look like a keyword\n  if(value.match(KEYWORD_PATTERN)) {\n    return null;\n  }\n\n  // define term dependency if not defined\n  if(localCtx && localCtx.hasOwnProperty(value) &&\n    defined.get(value) !== true) {\n    api.createTermDefinition({\n      activeCtx, localCtx, term: value, defined, options\n    });\n  }\n\n  relativeTo = relativeTo || {};\n  if(relativeTo.vocab) {\n    const mapping = activeCtx.mappings.get(value);\n\n    // value is explicitly ignored with a null mapping\n    if(mapping === null) {\n      return null;\n    }\n\n    if(_isObject(mapping) && '@id' in mapping) {\n      // value is a term\n      return mapping['@id'];\n    }\n  }\n\n  // split value into prefix:suffix\n  const colon = value.indexOf(':');\n  if(colon > 0) {\n    const prefix = value.substr(0, colon);\n    const suffix = value.substr(colon + 1);\n\n    // do not expand blank nodes (prefix of '_') or already-absolute\n    // IRIs (suffix of '//')\n    if(prefix === '_' || suffix.indexOf('//') === 0) {\n      return value;\n    }\n\n    // prefix dependency not defined, define it\n    if(localCtx && localCtx.hasOwnProperty(prefix)) {\n      api.createTermDefinition({\n        activeCtx, localCtx, term: prefix, defined, options\n      });\n    }\n\n    // use mapping if prefix is defined\n    const mapping = activeCtx.mappings.get(prefix);\n    if(mapping && mapping._prefix) {\n      return mapping['@id'] + suffix;\n    }\n\n    // already absolute IRI\n    if(_isAbsoluteIri(value)) {\n      return value;\n    }\n  }\n\n  // prepend vocab\n  if(relativeTo.vocab && '@vocab' in activeCtx) {\n    return activeCtx['@vocab'] + value;\n  }\n\n  // prepend base\n  if(relativeTo.base && '@base' in activeCtx) {\n    if(activeCtx['@base']) {\n      // The null case preserves value as potentially relative\n      return prependBase(prependBase(options.base, activeCtx['@base']), value);\n    }\n  } else if(relativeTo.base) {\n    return prependBase(options.base, value);\n  }\n\n  return value;\n}\n\n/**\n * Gets the initial context.\n *\n * @param options the options to use:\n *          [base] the document base IRI.\n *\n * @return the initial context.\n */\napi.getInitialContext = options => {\n  const key = JSON.stringify({processingMode: options.processingMode});\n  const cached = INITIAL_CONTEXT_CACHE.get(key);\n  if(cached) {\n    return cached;\n  }\n\n  const initialContext = {\n    processingMode: options.processingMode,\n    mappings: new Map(),\n    inverse: null,\n    getInverse: _createInverseContext,\n    clone: _cloneActiveContext,\n    revertToPreviousContext: _revertToPreviousContext,\n    protected: {}\n  };\n  // TODO: consider using LRU cache instead\n  if(INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {\n    // clear whole cache -- assumes scenario where the cache fills means\n    // the cache isn't being used very efficiently anyway\n    INITIAL_CONTEXT_CACHE.clear();\n  }\n  INITIAL_CONTEXT_CACHE.set(key, initialContext);\n  return initialContext;\n\n  /**\n   * Generates an inverse context for use in the compaction algorithm, if\n   * not already generated for the given active context.\n   *\n   * @return the inverse context.\n   */\n  function _createInverseContext() {\n    const activeCtx = this;\n\n    // lazily create inverse\n    if(activeCtx.inverse) {\n      return activeCtx.inverse;\n    }\n    const inverse = activeCtx.inverse = {};\n\n    // variables for building fast CURIE map\n    const fastCurieMap = activeCtx.fastCurieMap = {};\n    const irisToTerms = {};\n\n    // handle default language\n    const defaultLanguage = (activeCtx['@language'] || '@none').toLowerCase();\n\n    // handle default direction\n    const defaultDirection = activeCtx['@direction'];\n\n    // create term selections for each mapping in the context, ordered by\n    // shortest and then lexicographically least\n    const mappings = activeCtx.mappings;\n    const terms = [...mappings.keys()].sort(_compareShortestLeast);\n    for(const term of terms) {\n      const mapping = mappings.get(term);\n      if(mapping === null) {\n        continue;\n      }\n\n      let container = mapping['@container'] || '@none';\n      container = [].concat(container).sort().join('');\n\n      if(mapping['@id'] === null) {\n        continue;\n      }\n      // iterate over every IRI in the mapping\n      const ids = _asArray(mapping['@id']);\n      for(const iri of ids) {\n        let entry = inverse[iri];\n        const isKeyword = api.isKeyword(iri);\n\n        if(!entry) {\n          // initialize entry\n          inverse[iri] = entry = {};\n\n          if(!isKeyword && !mapping._termHasColon) {\n            // init IRI to term map and fast CURIE prefixes\n            irisToTerms[iri] = [term];\n            const fastCurieEntry = {iri, terms: irisToTerms[iri]};\n            if(iri[0] in fastCurieMap) {\n              fastCurieMap[iri[0]].push(fastCurieEntry);\n            } else {\n              fastCurieMap[iri[0]] = [fastCurieEntry];\n            }\n          }\n        } else if(!isKeyword && !mapping._termHasColon) {\n          // add IRI to term match\n          irisToTerms[iri].push(term);\n        }\n\n        // add new entry\n        if(!entry[container]) {\n          entry[container] = {\n            '@language': {},\n            '@type': {},\n            '@any': {}\n          };\n        }\n        entry = entry[container];\n        _addPreferredTerm(term, entry['@any'], '@none');\n\n        if(mapping.reverse) {\n          // term is preferred for values using @reverse\n          _addPreferredTerm(term, entry['@type'], '@reverse');\n        } else if(mapping['@type'] === '@none') {\n          _addPreferredTerm(term, entry['@any'], '@none');\n          _addPreferredTerm(term, entry['@language'], '@none');\n          _addPreferredTerm(term, entry['@type'], '@none');\n        } else if('@type' in mapping) {\n          // term is preferred for values using specific type\n          _addPreferredTerm(term, entry['@type'], mapping['@type']);\n        } else if('@language' in mapping && '@direction' in mapping) {\n          // term is preferred for values using specific language and direction\n          const language = mapping['@language'];\n          const direction = mapping['@direction'];\n          if(language && direction) {\n            _addPreferredTerm(term, entry['@language'],\n              `${language}_${direction}`.toLowerCase());\n          } else if(language) {\n            _addPreferredTerm(term, entry['@language'], language.toLowerCase());\n          } else if(direction) {\n            _addPreferredTerm(term, entry['@language'], `_${direction}`);\n          } else {\n            _addPreferredTerm(term, entry['@language'], '@null');\n          }\n        } else if('@language' in mapping) {\n          _addPreferredTerm(term, entry['@language'],\n            (mapping['@language'] || '@null').toLowerCase());\n        } else if('@direction' in mapping) {\n          if(mapping['@direction']) {\n            _addPreferredTerm(term, entry['@language'],\n              `_${mapping['@direction']}`);\n          } else {\n            _addPreferredTerm(term, entry['@language'], '@none');\n          }\n        } else if(defaultDirection) {\n          _addPreferredTerm(term, entry['@language'], `_${defaultDirection}`);\n          _addPreferredTerm(term, entry['@language'], '@none');\n          _addPreferredTerm(term, entry['@type'], '@none');\n        } else {\n          // add entries for no type and no language\n          _addPreferredTerm(term, entry['@language'], defaultLanguage);\n          _addPreferredTerm(term, entry['@language'], '@none');\n          _addPreferredTerm(term, entry['@type'], '@none');\n        }\n      }\n    }\n\n    // build fast CURIE map\n    for(const key in fastCurieMap) {\n      _buildIriMap(fastCurieMap, key, 1);\n    }\n\n    return inverse;\n  }\n\n  /**\n   * Runs a recursive algorithm to build a lookup map for quickly finding\n   * potential CURIEs.\n   *\n   * @param iriMap the map to build.\n   * @param key the current key in the map to work on.\n   * @param idx the index into the IRI to compare.\n   */\n  function _buildIriMap(iriMap, key, idx) {\n    const entries = iriMap[key];\n    const next = iriMap[key] = {};\n\n    let iri;\n    let letter;\n    for(const entry of entries) {\n      iri = entry.iri;\n      if(idx >= iri.length) {\n        letter = '';\n      } else {\n        letter = iri[idx];\n      }\n      if(letter in next) {\n        next[letter].push(entry);\n      } else {\n        next[letter] = [entry];\n      }\n    }\n\n    for(const key in next) {\n      if(key === '') {\n        continue;\n      }\n      _buildIriMap(next, key, idx + 1);\n    }\n  }\n\n  /**\n   * Adds the term for the given entry if not already added.\n   *\n   * @param term the term to add.\n   * @param entry the inverse context typeOrLanguage entry to add to.\n   * @param typeOrLanguageValue the key in the entry to add to.\n   */\n  function _addPreferredTerm(term, entry, typeOrLanguageValue) {\n    if(!entry.hasOwnProperty(typeOrLanguageValue)) {\n      entry[typeOrLanguageValue] = term;\n    }\n  }\n\n  /**\n   * Clones an active context, creating a child active context.\n   *\n   * @return a clone (child) of the active context.\n   */\n  function _cloneActiveContext() {\n    const child = {};\n    child.mappings = util.clone(this.mappings);\n    child.clone = this.clone;\n    child.inverse = null;\n    child.getInverse = this.getInverse;\n    child.protected = util.clone(this.protected);\n    if(this.previousContext) {\n      child.previousContext = this.previousContext.clone();\n    }\n    child.revertToPreviousContext = this.revertToPreviousContext;\n    if('@base' in this) {\n      child['@base'] = this['@base'];\n    }\n    if('@language' in this) {\n      child['@language'] = this['@language'];\n    }\n    if('@vocab' in this) {\n      child['@vocab'] = this['@vocab'];\n    }\n    return child;\n  }\n\n  /**\n   * Reverts any type-scoped context in this active context to the previous\n   * context.\n   */\n  function _revertToPreviousContext() {\n    if(!this.previousContext) {\n      return this;\n    }\n    return this.previousContext.clone();\n  }\n};\n\n/**\n * Gets the value for the given active context key and type, null if none is\n * set or undefined if none is set and type is '@context'.\n *\n * @param ctx the active context.\n * @param key the context key.\n * @param [type] the type of value to get (eg: '@id', '@type'), if not\n *          specified gets the entire entry for a key, null if not found.\n *\n * @return the value, null, or undefined.\n */\napi.getContextValue = (ctx, key, type) => {\n  // invalid key\n  if(key === null) {\n    if(type === '@context') {\n      return undefined;\n    }\n    return null;\n  }\n\n  // get specific entry information\n  if(ctx.mappings.has(key)) {\n    const entry = ctx.mappings.get(key);\n\n    if(_isUndefined(type)) {\n      // return whole entry\n      return entry;\n    }\n    if(entry.hasOwnProperty(type)) {\n      // return entry value for type\n      return entry[type];\n    }\n  }\n\n  // get default language\n  if(type === '@language' && type in ctx) {\n    return ctx[type];\n  }\n\n  // get default direction\n  if(type === '@direction' && type in ctx) {\n    return ctx[type];\n  }\n\n  if(type === '@context') {\n    return undefined;\n  }\n  return null;\n};\n\n/**\n * Processing Mode check.\n *\n * @param activeCtx the current active context.\n * @param version the string or numeric version to check.\n *\n * @return boolean.\n */\napi.processingMode = (activeCtx, version) => {\n  if(version.toString() >= '1.1') {\n    return !activeCtx.processingMode ||\n      activeCtx.processingMode >= 'json-ld-' + version.toString();\n  } else {\n    return activeCtx.processingMode === 'json-ld-1.0';\n  }\n};\n\n/**\n * Returns whether or not the given value is a keyword.\n *\n * @param v the value to check.\n *\n * @return true if the value is a keyword, false if not.\n */\napi.isKeyword = v => {\n  if(!_isString(v) || v[0] !== '@') {\n    return false;\n  }\n  switch(v) {\n    case '@base':\n    case '@container':\n    case '@context':\n    case '@default':\n    case '@direction':\n    case '@embed':\n    case '@explicit':\n    case '@graph':\n    case '@id':\n    case '@included':\n    case '@index':\n    case '@json':\n    case '@language':\n    case '@list':\n    case '@nest':\n    case '@none':\n    case '@omitDefault':\n    case '@prefix':\n    case '@preserve':\n    case '@protected':\n    case '@requireAll':\n    case '@reverse':\n    case '@set':\n    case '@type':\n    case '@value':\n    case '@version':\n    case '@vocab':\n      return true;\n  }\n  return false;\n};\n\nfunction _deepCompare(x1, x2) {\n  // compare `null` or primitive types directly\n  if((!(x1 && typeof x1 === 'object')) ||\n     (!(x2 && typeof x2 === 'object'))) {\n    return x1 === x2;\n  }\n  // x1 and x2 are objects (also potentially arrays)\n  const x1Array = Array.isArray(x1);\n  if(x1Array !== Array.isArray(x2)) {\n    return false;\n  }\n  if(x1Array) {\n    if(x1.length !== x2.length) {\n      return false;\n    }\n    for(let i = 0; i < x1.length; ++i) {\n      if(!_deepCompare(x1[i], x2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // x1 and x2 are non-array objects\n  const k1s = Object.keys(x1);\n  const k2s = Object.keys(x2);\n  if(k1s.length !== k2s.length) {\n    return false;\n  }\n  for(const k1 in x1) {\n    let v1 = x1[k1];\n    let v2 = x2[k1];\n    // special case: `@container` can be in any order\n    if(k1 === '@container') {\n      if(Array.isArray(v1) && Array.isArray(v2)) {\n        v1 = v1.slice().sort();\n        v2 = v2.slice().sort();\n      }\n    }\n    if(!_deepCompare(v1, v2)) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"script"}