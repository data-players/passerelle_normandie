{"ast":null,"code":"/*\n * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nmodule.exports = class RequestQueue {\n  /**\n   * Creates a simple queue for requesting documents.\n   */\n  constructor() {\n    this._requests = {};\n  }\n\n  wrapLoader(loader) {\n    const self = this;\n    self._loader = loader;\n    return function ()\n    /* url */\n    {\n      return self.add.apply(self, arguments);\n    };\n  }\n\n  async add(url) {\n    let promise = this._requests[url];\n\n    if (promise) {\n      // URL already queued, wait for it to load\n      return Promise.resolve(promise);\n    } // queue URL and load it\n\n\n    promise = this._requests[url] = this._loader(url);\n\n    try {\n      return await promise;\n    } finally {\n      delete this._requests[url];\n    }\n  }\n\n};","map":{"version":3,"sources":["/app/node_modules/jsonld/lib/RequestQueue.js"],"names":["module","exports","RequestQueue","constructor","_requests","wrapLoader","loader","self","_loader","add","apply","arguments","url","promise","Promise","resolve"],"mappings":"AAAA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,YAAN,CAAmB;AAClC;AACF;AACA;AACEC,EAAAA,WAAW,GAAG;AACZ,SAAKC,SAAL,GAAiB,EAAjB;AACD;;AAEDC,EAAAA,UAAU,CAACC,MAAD,EAAS;AACjB,UAAMC,IAAI,GAAG,IAAb;AACAA,IAAAA,IAAI,CAACC,OAAL,GAAeF,MAAf;AACA,WAAO;AAAS;AAAW;AACzB,aAAOC,IAAI,CAACE,GAAL,CAASC,KAAT,CAAeH,IAAf,EAAqBI,SAArB,CAAP;AACD,KAFD;AAGD;;AAED,QAAMF,GAAN,CAAUG,GAAV,EAAe;AACb,QAAIC,OAAO,GAAG,KAAKT,SAAL,CAAeQ,GAAf,CAAd;;AACA,QAAGC,OAAH,EAAY;AACV;AACA,aAAOC,OAAO,CAACC,OAAR,CAAgBF,OAAhB,CAAP;AACD,KALY,CAOb;;;AACAA,IAAAA,OAAO,GAAG,KAAKT,SAAL,CAAeQ,GAAf,IAAsB,KAAKJ,OAAL,CAAaI,GAAb,CAAhC;;AAEA,QAAI;AACF,aAAO,MAAMC,OAAb;AACD,KAFD,SAEU;AACR,aAAO,KAAKT,SAAL,CAAeQ,GAAf,CAAP;AACD;AACF;;AA/BiC,CAApC","sourcesContent":["/*\n * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nmodule.exports = class RequestQueue {\n  /**\n   * Creates a simple queue for requesting documents.\n   */\n  constructor() {\n    this._requests = {};\n  }\n\n  wrapLoader(loader) {\n    const self = this;\n    self._loader = loader;\n    return function(/* url */) {\n      return self.add.apply(self, arguments);\n    };\n  }\n\n  async add(url) {\n    let promise = this._requests[url];\n    if(promise) {\n      // URL already queued, wait for it to load\n      return Promise.resolve(promise);\n    }\n\n    // queue URL and load it\n    promise = this._requests[url] = this._loader(url);\n\n    try {\n      return await promise;\n    } finally {\n      delete this._requests[url];\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}