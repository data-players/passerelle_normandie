{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n}; // List of properties we expect in the options\n\n\nvar OptionsProperties = ['action', 'fetch', 'meta', 'onFailure', 'onSuccess', 'undoable'];\n\nvar isDataProviderOptions = function (value) {\n  var options = value;\n  return Object.keys(options).some(function (key) {\n    return OptionsProperties.includes(key);\n  });\n}; // As all dataProvider methods do not have the same signature, we must differentiate\n// standard methods which have the (resource, params, options) signature\n// from the custom ones\n\n\nexport var getDataProviderCallArguments = function (args) {\n  var lastArg = args[args.length - 1];\n\n  var allArguments = __spreadArrays(args);\n\n  var resource;\n  var payload;\n  var options;\n\n  if (isDataProviderOptions(lastArg)) {\n    options = lastArg;\n    allArguments = allArguments.slice(0, args.length - 1);\n  }\n\n  if (typeof allArguments[0] === 'string') {\n    resource = allArguments[0];\n    payload = allArguments[1];\n  }\n\n  return {\n    resource: resource,\n    payload: payload,\n    allArguments: allArguments,\n    options: options\n  };\n};","map":{"version":3,"sources":["/app/node_modules/ra-core/esm/dataProvider/getDataProviderCallArguments.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","OptionsProperties","isDataProviderOptions","value","options","Object","keys","some","key","includes","getDataProviderCallArguments","args","lastArg","allArguments","resource","payload","slice"],"mappings":"AAAA,IAAIA,cAAc,GAAI,QAAQ,KAAKA,cAAd,IAAiC,YAAY;AAC9D,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAAf,EAAkBC,EAAE,GAAGC,SAAS,CAACC,MAAtC,EAA8CH,CAAC,GAAGC,EAAlD,EAAsDD,CAAC,EAAvD,EAA2DD,CAAC,IAAIG,SAAS,CAACF,CAAD,CAAT,CAAaG,MAAlB;;AAC3D,OAAK,IAAIC,CAAC,GAAGC,KAAK,CAACN,CAAD,CAAb,EAAkBO,CAAC,GAAG,CAAtB,EAAyBN,CAAC,GAAG,CAAlC,EAAqCA,CAAC,GAAGC,EAAzC,EAA6CD,CAAC,EAA9C,EACI,KAAK,IAAIO,CAAC,GAAGL,SAAS,CAACF,CAAD,CAAjB,EAAsBQ,CAAC,GAAG,CAA1B,EAA6BC,EAAE,GAAGF,CAAC,CAACJ,MAAzC,EAAiDK,CAAC,GAAGC,EAArD,EAAyDD,CAAC,IAAIF,CAAC,EAA/D,EACIF,CAAC,CAACE,CAAD,CAAD,GAAOC,CAAC,CAACC,CAAD,CAAR;;AACR,SAAOJ,CAAP;AACH,CAND,C,CAOA;;;AACA,IAAIM,iBAAiB,GAAG,CACpB,QADoB,EAEpB,OAFoB,EAGpB,MAHoB,EAIpB,WAJoB,EAKpB,WALoB,EAMpB,UANoB,CAAxB;;AAQA,IAAIC,qBAAqB,GAAG,UAAUC,KAAV,EAAiB;AACzC,MAAIC,OAAO,GAAGD,KAAd;AACA,SAAOE,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBG,IAArB,CAA0B,UAAUC,GAAV,EAAe;AAAE,WAAOP,iBAAiB,CAACQ,QAAlB,CAA2BD,GAA3B,CAAP;AAAyC,GAApF,CAAP;AACH,CAHD,C,CAIA;AACA;AACA;;;AACA,OAAO,IAAIE,4BAA4B,GAAG,UAAUC,IAAV,EAAgB;AACtD,MAAIC,OAAO,GAAGD,IAAI,CAACA,IAAI,CAACjB,MAAL,GAAc,CAAf,CAAlB;;AACA,MAAImB,YAAY,GAAGxB,cAAc,CAACsB,IAAD,CAAjC;;AACA,MAAIG,QAAJ;AACA,MAAIC,OAAJ;AACA,MAAIX,OAAJ;;AACA,MAAIF,qBAAqB,CAACU,OAAD,CAAzB,EAAoC;AAChCR,IAAAA,OAAO,GAAGQ,OAAV;AACAC,IAAAA,YAAY,GAAGA,YAAY,CAACG,KAAb,CAAmB,CAAnB,EAAsBL,IAAI,CAACjB,MAAL,GAAc,CAApC,CAAf;AACH;;AACD,MAAI,OAAOmB,YAAY,CAAC,CAAD,CAAnB,KAA2B,QAA/B,EAAyC;AACrCC,IAAAA,QAAQ,GAAGD,YAAY,CAAC,CAAD,CAAvB;AACAE,IAAAA,OAAO,GAAGF,YAAY,CAAC,CAAD,CAAtB;AACH;;AACD,SAAO;AACHC,IAAAA,QAAQ,EAAEA,QADP;AAEHC,IAAAA,OAAO,EAAEA,OAFN;AAGHF,IAAAA,YAAY,EAAEA,YAHX;AAIHT,IAAAA,OAAO,EAAEA;AAJN,GAAP;AAMH,CApBM","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n// List of properties we expect in the options\nvar OptionsProperties = [\n    'action',\n    'fetch',\n    'meta',\n    'onFailure',\n    'onSuccess',\n    'undoable',\n];\nvar isDataProviderOptions = function (value) {\n    var options = value;\n    return Object.keys(options).some(function (key) { return OptionsProperties.includes(key); });\n};\n// As all dataProvider methods do not have the same signature, we must differentiate\n// standard methods which have the (resource, params, options) signature\n// from the custom ones\nexport var getDataProviderCallArguments = function (args) {\n    var lastArg = args[args.length - 1];\n    var allArguments = __spreadArrays(args);\n    var resource;\n    var payload;\n    var options;\n    if (isDataProviderOptions(lastArg)) {\n        options = lastArg;\n        allArguments = allArguments.slice(0, args.length - 1);\n    }\n    if (typeof allArguments[0] === 'string') {\n        resource = allArguments[0];\n        payload = allArguments[1];\n    }\n    return {\n        resource: resource,\n        payload: payload,\n        allArguments: allArguments,\n        options: options,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}