{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {\n  parseLinkHeader,\n  buildHeaders\n} = require('../util');\n\nconst {\n  LINK_HEADER_CONTEXT\n} = require('../constants');\n\nconst JsonLdError = require('../JsonLdError');\n\nconst RequestQueue = require('../RequestQueue');\n\nconst {\n  prependBase\n} = require('../url');\n\nconst REGEX_LINK_HEADER = /(^|(\\r\\n))link:/i;\n/**\n * Creates a built-in XMLHttpRequest document loader.\n *\n * @param options the options to use:\n *          secure: require all URLs to use HTTPS.\n *          headers: an object (map) of headers which will be passed as request\n *            headers for the requested document. Accept is not allowed.\n *          [xhr]: the XMLHttpRequest API to use.\n *\n * @return the XMLHttpRequest document loader.\n */\n\nmodule.exports = ({\n  secure,\n  headers = {},\n  xhr\n} = {\n  headers: {}\n}) => {\n  headers = buildHeaders(headers);\n  const queue = new RequestQueue();\n  return queue.wrapLoader(loader);\n\n  async function loader(url) {\n    if (url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {\n      throw new JsonLdError('URL could not be dereferenced; only \"http\" and \"https\" URLs are ' + 'supported.', 'jsonld.InvalidUrl', {\n        code: 'loading document failed',\n        url\n      });\n    }\n\n    if (secure && url.indexOf('https') !== 0) {\n      throw new JsonLdError('URL could not be dereferenced; secure mode is enabled and ' + 'the URL\\'s scheme is not \"https\".', 'jsonld.InvalidUrl', {\n        code: 'loading document failed',\n        url\n      });\n    }\n\n    let req;\n\n    try {\n      req = await _get(xhr, url, headers);\n    } catch (e) {\n      throw new JsonLdError('URL could not be dereferenced, an error occurred.', 'jsonld.LoadDocumentError', {\n        code: 'loading document failed',\n        url,\n        cause: e\n      });\n    }\n\n    if (req.status >= 400) {\n      throw new JsonLdError('URL could not be dereferenced: ' + req.statusText, 'jsonld.LoadDocumentError', {\n        code: 'loading document failed',\n        url,\n        httpStatusCode: req.status\n      });\n    }\n\n    let doc = {\n      contextUrl: null,\n      documentUrl: url,\n      document: req.response\n    };\n    let alternate = null; // handle Link Header (avoid unsafe header warning by existence testing)\n\n    const contentType = req.getResponseHeader('Content-Type');\n    let linkHeader;\n\n    if (REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {\n      linkHeader = req.getResponseHeader('Link');\n    }\n\n    if (linkHeader && contentType !== 'application/ld+json') {\n      // only 1 related link header permitted\n      const linkHeaders = parseLinkHeader(linkHeader);\n      const linkedContext = linkHeaders[LINK_HEADER_CONTEXT];\n\n      if (Array.isArray(linkedContext)) {\n        throw new JsonLdError('URL could not be dereferenced, it has more than one ' + 'associated HTTP Link Header.', 'jsonld.InvalidUrl', {\n          code: 'multiple context link headers',\n          url\n        });\n      }\n\n      if (linkedContext) {\n        doc.contextUrl = linkedContext.target;\n      } // \"alternate\" link header is a redirect\n\n\n      alternate = linkHeaders['alternate'];\n\n      if (alternate && alternate.type == 'application/ld+json' && !(contentType || '').match(/^application\\/(\\w*\\+)?json$/)) {\n        doc = await loader(prependBase(url, alternate.target));\n      }\n    }\n\n    return doc;\n  }\n};\n\nfunction _get(xhr, url, headers) {\n  xhr = xhr || XMLHttpRequest;\n  const req = new xhr();\n  return new Promise((resolve, reject) => {\n    req.onload = () => resolve(req);\n\n    req.onerror = err => reject(err);\n\n    req.open('GET', url, true);\n\n    for (const k in headers) {\n      req.setRequestHeader(k, headers[k]);\n    }\n\n    req.send();\n  });\n}","map":{"version":3,"sources":["/app/node_modules/jsonld/lib/documentLoaders/xhr.js"],"names":["parseLinkHeader","buildHeaders","require","LINK_HEADER_CONTEXT","JsonLdError","RequestQueue","prependBase","REGEX_LINK_HEADER","module","exports","secure","headers","xhr","queue","wrapLoader","loader","url","indexOf","code","req","_get","e","cause","status","statusText","httpStatusCode","doc","contextUrl","documentUrl","document","response","alternate","contentType","getResponseHeader","linkHeader","test","getAllResponseHeaders","linkHeaders","linkedContext","Array","isArray","target","type","match","XMLHttpRequest","Promise","resolve","reject","onload","onerror","err","open","k","setRequestHeader","send"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {parseLinkHeader, buildHeaders} = require('../util');\nconst {LINK_HEADER_CONTEXT} = require('../constants');\nconst JsonLdError = require('../JsonLdError');\nconst RequestQueue = require('../RequestQueue');\nconst {prependBase} = require('../url');\n\nconst REGEX_LINK_HEADER = /(^|(\\r\\n))link:/i;\n\n/**\n * Creates a built-in XMLHttpRequest document loader.\n *\n * @param options the options to use:\n *          secure: require all URLs to use HTTPS.\n *          headers: an object (map) of headers which will be passed as request\n *            headers for the requested document. Accept is not allowed.\n *          [xhr]: the XMLHttpRequest API to use.\n *\n * @return the XMLHttpRequest document loader.\n */\nmodule.exports = ({\n  secure,\n  headers = {},\n  xhr\n} = {headers: {}}) => {\n  headers = buildHeaders(headers);\n  const queue = new RequestQueue();\n  return queue.wrapLoader(loader);\n\n  async function loader(url) {\n    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; only \"http\" and \"https\" URLs are ' +\n        'supported.',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n    if(secure && url.indexOf('https') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; secure mode is enabled and ' +\n        'the URL\\'s scheme is not \"https\".',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n\n    let req;\n    try {\n      req = await _get(xhr, url, headers);\n    } catch(e) {\n      throw new JsonLdError(\n        'URL could not be dereferenced, an error occurred.',\n        'jsonld.LoadDocumentError',\n        {code: 'loading document failed', url, cause: e});\n    }\n\n    if(req.status >= 400) {\n      throw new JsonLdError(\n        'URL could not be dereferenced: ' + req.statusText,\n        'jsonld.LoadDocumentError', {\n          code: 'loading document failed',\n          url,\n          httpStatusCode: req.status\n        });\n    }\n\n    let doc = {contextUrl: null, documentUrl: url, document: req.response};\n    let alternate = null;\n\n    // handle Link Header (avoid unsafe header warning by existence testing)\n    const contentType = req.getResponseHeader('Content-Type');\n    let linkHeader;\n    if(REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {\n      linkHeader = req.getResponseHeader('Link');\n    }\n    if(linkHeader && contentType !== 'application/ld+json') {\n      // only 1 related link header permitted\n      const linkHeaders = parseLinkHeader(linkHeader);\n      const linkedContext = linkHeaders[LINK_HEADER_CONTEXT];\n      if(Array.isArray(linkedContext)) {\n        throw new JsonLdError(\n          'URL could not be dereferenced, it has more than one ' +\n          'associated HTTP Link Header.',\n          'jsonld.InvalidUrl',\n          {code: 'multiple context link headers', url});\n      }\n      if(linkedContext) {\n        doc.contextUrl = linkedContext.target;\n      }\n\n      // \"alternate\" link header is a redirect\n      alternate = linkHeaders['alternate'];\n      if(alternate &&\n        alternate.type == 'application/ld+json' &&\n        !(contentType || '').match(/^application\\/(\\w*\\+)?json$/)) {\n        doc = await loader(prependBase(url, alternate.target));\n      }\n    }\n\n    return doc;\n  }\n};\n\nfunction _get(xhr, url, headers) {\n  xhr = xhr || XMLHttpRequest;\n  const req = new xhr();\n  return new Promise((resolve, reject) => {\n    req.onload = () => resolve(req);\n    req.onerror = err => reject(err);\n    req.open('GET', url, true);\n    for(const k in headers) {\n      req.setRequestHeader(k, headers[k]);\n    }\n    req.send();\n  });\n}\n"]},"metadata":{},"sourceType":"script"}