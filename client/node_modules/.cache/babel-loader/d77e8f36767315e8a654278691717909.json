{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n/* global Node, XMLSerializer */\n'use strict';\n\nconst {\n  RDF_LANGSTRING,\n  RDF_PLAIN_LITERAL,\n  RDF_OBJECT,\n  RDF_XML_LITERAL,\n  XSD_STRING\n} = require('./constants');\n\nlet _Node;\n\nif (typeof Node !== 'undefined') {\n  _Node = Node;\n} else {\n  _Node = {\n    ELEMENT_NODE: 1,\n    ATTRIBUTE_NODE: 2,\n    TEXT_NODE: 3,\n    CDATA_SECTION_NODE: 4,\n    ENTITY_REFERENCE_NODE: 5,\n    ENTITY_NODE: 6,\n    PROCESSING_INSTRUCTION_NODE: 7,\n    COMMENT_NODE: 8,\n    DOCUMENT_NODE: 9,\n    DOCUMENT_TYPE_NODE: 10,\n    DOCUMENT_FRAGMENT_NODE: 11,\n    NOTATION_NODE: 12\n  };\n}\n\nmodule.exports = class Rdfa {\n  /**\n   * Parses the RDF dataset found via the data object from the RDFa API.\n   *\n   * @param data the RDFa API data object.\n   *\n   * @return the RDF dataset.\n   */\n  parse(data) {\n    const dataset = {};\n    dataset['@default'] = [];\n    const subjects = data.getSubjects();\n\n    for (let si = 0; si < subjects.length; ++si) {\n      const subject = subjects[si];\n\n      if (subject === null) {\n        continue;\n      } // get all related triples\n\n\n      const triples = data.getSubjectTriples(subject);\n\n      if (triples === null) {\n        continue;\n      }\n\n      const predicates = triples.predicates;\n\n      for (const predicate in predicates) {\n        // iterate over objects\n        const objects = predicates[predicate].objects;\n\n        for (let oi = 0; oi < objects.length; ++oi) {\n          const object = objects[oi]; // create RDF triple\n\n          const triple = {}; // add subject\n\n          if (subject.indexOf('_:') === 0) {\n            triple.subject = {\n              type: 'blank node',\n              value: subject\n            };\n          } else {\n            triple.subject = {\n              type: 'IRI',\n              value: subject\n            };\n          } // add predicate\n\n\n          if (predicate.indexOf('_:') === 0) {\n            triple.predicate = {\n              type: 'blank node',\n              value: predicate\n            };\n          } else {\n            triple.predicate = {\n              type: 'IRI',\n              value: predicate\n            };\n          } // serialize XML literal\n\n\n          let value = object.value;\n\n          if (object.type === RDF_XML_LITERAL) {\n            // initialize XMLSerializer\n            const XMLSerializer = getXMLSerializerClass();\n            const serializer = new XMLSerializer();\n            value = '';\n\n            for (let x = 0; x < object.value.length; x++) {\n              if (object.value[x].nodeType === _Node.ELEMENT_NODE) {\n                value += serializer.serializeToString(object.value[x]);\n              } else if (object.value[x].nodeType === _Node.TEXT_NODE) {\n                value += object.value[x].nodeValue;\n              }\n            }\n          } // add object\n\n\n          triple.object = {}; // object is an IRI\n\n          if (object.type === RDF_OBJECT) {\n            if (object.value.indexOf('_:') === 0) {\n              triple.object.type = 'blank node';\n            } else {\n              triple.object.type = 'IRI';\n            }\n          } else {\n            // object is a literal\n            triple.object.type = 'literal';\n\n            if (object.type === RDF_PLAIN_LITERAL) {\n              if (object.language) {\n                triple.object.datatype = RDF_LANGSTRING;\n                triple.object.language = object.language;\n              } else {\n                triple.object.datatype = XSD_STRING;\n              }\n            } else {\n              triple.object.datatype = object.type;\n            }\n          }\n\n          triple.object.value = value; // add triple to dataset in default graph\n\n          dataset['@default'].push(triple);\n        }\n      }\n    }\n\n    return dataset;\n  }\n\n};\n\nfunction getXMLSerializerClass() {\n  if (typeof XMLSerializer === 'undefined') {\n    return require('xmldom').XMLSerializer;\n  }\n\n  return XMLSerializer;\n}","map":{"version":3,"sources":["/app/node_modules/jsonld/lib/Rdfa.js"],"names":["RDF_LANGSTRING","RDF_PLAIN_LITERAL","RDF_OBJECT","RDF_XML_LITERAL","XSD_STRING","require","_Node","Node","ELEMENT_NODE","ATTRIBUTE_NODE","TEXT_NODE","CDATA_SECTION_NODE","ENTITY_REFERENCE_NODE","ENTITY_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","NOTATION_NODE","module","exports","Rdfa","parse","data","dataset","subjects","getSubjects","si","length","subject","triples","getSubjectTriples","predicates","predicate","objects","oi","object","triple","indexOf","type","value","XMLSerializer","getXMLSerializerClass","serializer","x","nodeType","serializeToString","nodeValue","language","datatype","push"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n/* global Node, XMLSerializer */\n'use strict';\n\nconst {\n  RDF_LANGSTRING,\n  RDF_PLAIN_LITERAL,\n  RDF_OBJECT,\n  RDF_XML_LITERAL,\n  XSD_STRING,\n} = require('./constants');\n\nlet _Node;\nif(typeof Node !== 'undefined') {\n  _Node = Node;\n} else {\n  _Node = {\n    ELEMENT_NODE: 1,\n    ATTRIBUTE_NODE: 2,\n    TEXT_NODE: 3,\n    CDATA_SECTION_NODE: 4,\n    ENTITY_REFERENCE_NODE: 5,\n    ENTITY_NODE: 6,\n    PROCESSING_INSTRUCTION_NODE: 7,\n    COMMENT_NODE: 8,\n    DOCUMENT_NODE: 9,\n    DOCUMENT_TYPE_NODE: 10,\n    DOCUMENT_FRAGMENT_NODE: 11,\n    NOTATION_NODE: 12\n  };\n}\n\nmodule.exports = class Rdfa {\n  /**\n   * Parses the RDF dataset found via the data object from the RDFa API.\n   *\n   * @param data the RDFa API data object.\n   *\n   * @return the RDF dataset.\n   */\n  parse(data) {\n    const dataset = {};\n    dataset['@default'] = [];\n\n    const subjects = data.getSubjects();\n    for(let si = 0; si < subjects.length; ++si) {\n      const subject = subjects[si];\n      if(subject === null) {\n        continue;\n      }\n\n      // get all related triples\n      const triples = data.getSubjectTriples(subject);\n      if(triples === null) {\n        continue;\n      }\n      const predicates = triples.predicates;\n      for(const predicate in predicates) {\n        // iterate over objects\n        const objects = predicates[predicate].objects;\n        for(let oi = 0; oi < objects.length; ++oi) {\n          const object = objects[oi];\n\n          // create RDF triple\n          const triple = {};\n\n          // add subject\n          if(subject.indexOf('_:') === 0) {\n            triple.subject = {type: 'blank node', value: subject};\n          } else {\n            triple.subject = {type: 'IRI', value: subject};\n          }\n\n          // add predicate\n          if(predicate.indexOf('_:') === 0) {\n            triple.predicate = {type: 'blank node', value: predicate};\n          } else {\n            triple.predicate = {type: 'IRI', value: predicate};\n          }\n\n          // serialize XML literal\n          let value = object.value;\n          if(object.type === RDF_XML_LITERAL) {\n            // initialize XMLSerializer\n            const XMLSerializer = getXMLSerializerClass();\n            const serializer = new XMLSerializer();\n            value = '';\n            for(let x = 0; x < object.value.length; x++) {\n              if(object.value[x].nodeType === _Node.ELEMENT_NODE) {\n                value += serializer.serializeToString(object.value[x]);\n              } else if(object.value[x].nodeType === _Node.TEXT_NODE) {\n                value += object.value[x].nodeValue;\n              }\n            }\n          }\n\n          // add object\n          triple.object = {};\n\n          // object is an IRI\n          if(object.type === RDF_OBJECT) {\n            if(object.value.indexOf('_:') === 0) {\n              triple.object.type = 'blank node';\n            } else {\n              triple.object.type = 'IRI';\n            }\n          } else {\n            // object is a literal\n            triple.object.type = 'literal';\n            if(object.type === RDF_PLAIN_LITERAL) {\n              if(object.language) {\n                triple.object.datatype = RDF_LANGSTRING;\n                triple.object.language = object.language;\n              } else {\n                triple.object.datatype = XSD_STRING;\n              }\n            } else {\n              triple.object.datatype = object.type;\n            }\n          }\n          triple.object.value = value;\n\n          // add triple to dataset in default graph\n          dataset['@default'].push(triple);\n        }\n      }\n    }\n\n    return dataset;\n  }\n};\n\nfunction getXMLSerializerClass() {\n  if(typeof XMLSerializer === 'undefined') {\n    return require('xmldom').XMLSerializer;\n  }\n  return XMLSerializer;\n}\n"]},"metadata":{},"sourceType":"script"}