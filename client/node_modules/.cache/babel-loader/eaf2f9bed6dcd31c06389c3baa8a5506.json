{"ast":null,"code":"/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst URDNA2015 = require('./URDNA2015');\n\nconst util = require('./util');\n\nmodule.exports = class URDNA2012 extends URDNA2015 {\n  constructor(options) {\n    super(options);\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  } // helper for modifying component during Hash First Degree Quads\n\n\n  modifyFirstDegreeComponent(id, component, key) {\n    if (component.termType !== 'BlankNode') {\n      return component;\n    }\n\n    component = util.clone(component);\n\n    if (key === 'name') {\n      component.value = '_:g';\n    } else {\n      component.value = component.value === id ? '_:a' : '_:z';\n    }\n\n    return component;\n  } // helper for getting a related predicate\n\n\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  } // helper for creating hash to related blank nodes map\n\n\n  createHashToRelated(id, issuer, callback) {\n    const self = this; // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n\n    const hashToRelated = {}; // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n\n    const quads = self.blankNodeInfo[id].quads; // 3) For each quad in quads:\n\n    self.forEach(quads, (quad, idx, callback) => {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      let position;\n      let related;\n\n      if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        return callback();\n      } // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n\n\n      self.hashRelatedBlankNode(related, quad, issuer, position, (err, hash) => {\n        if (err) {\n          return callback(err);\n        }\n\n        if (hash in hashToRelated) {\n          hashToRelated[hash].push(related);\n        } else {\n          hashToRelated[hash] = [related];\n        }\n\n        callback();\n      });\n    }, err => callback(err, hashToRelated));\n  }\n\n};","map":{"version":3,"sources":["/app/node_modules/rdf-canonize/lib/URGNA2012.js"],"names":["URDNA2015","require","util","module","exports","URDNA2012","constructor","options","name","hashAlgorithm","modifyFirstDegreeComponent","id","component","key","termType","clone","value","getRelatedPredicate","quad","predicate","createHashToRelated","issuer","callback","self","hashToRelated","quads","blankNodeInfo","forEach","idx","position","related","subject","object","hashRelatedBlankNode","err","hash","push"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,SAAN,SAAwBL,SAAxB,CAAkC;AACjDM,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,WAAZ;AACA,SAAKC,aAAL,GAAqB,MAArB;AACD,GALgD,CAOjD;;;AACAC,EAAAA,0BAA0B,CAACC,EAAD,EAAKC,SAAL,EAAgBC,GAAhB,EAAqB;AAC7C,QAAGD,SAAS,CAACE,QAAV,KAAuB,WAA1B,EAAuC;AACrC,aAAOF,SAAP;AACD;;AACDA,IAAAA,SAAS,GAAGV,IAAI,CAACa,KAAL,CAAWH,SAAX,CAAZ;;AACA,QAAGC,GAAG,KAAK,MAAX,EAAmB;AACjBD,MAAAA,SAAS,CAACI,KAAV,GAAkB,KAAlB;AACD,KAFD,MAEO;AACLJ,MAAAA,SAAS,CAACI,KAAV,GAAmBJ,SAAS,CAACI,KAAV,KAAoBL,EAApB,GAAyB,KAAzB,GAAiC,KAApD;AACD;;AACD,WAAOC,SAAP;AACD,GAnBgD,CAqBjD;;;AACAK,EAAAA,mBAAmB,CAACC,IAAD,EAAO;AACxB,WAAOA,IAAI,CAACC,SAAL,CAAeH,KAAtB;AACD,GAxBgD,CA0BjD;;;AACAI,EAAAA,mBAAmB,CAACT,EAAD,EAAKU,MAAL,EAAaC,QAAb,EAAuB;AACxC,UAAMC,IAAI,GAAG,IAAb,CADwC,CAGxC;AACA;;AACA,UAAMC,aAAa,GAAG,EAAtB,CALwC,CAOxC;AACA;;AACA,UAAMC,KAAK,GAAGF,IAAI,CAACG,aAAL,CAAmBf,EAAnB,EAAuBc,KAArC,CATwC,CAWxC;;AACAF,IAAAA,IAAI,CAACI,OAAL,CAAaF,KAAb,EAAoB,CAACP,IAAD,EAAOU,GAAP,EAAYN,QAAZ,KAAyB;AAC3C;AACA;AACA;AACA;AACA,UAAIO,QAAJ;AACA,UAAIC,OAAJ;;AACA,UAAGZ,IAAI,CAACa,OAAL,CAAajB,QAAb,KAA0B,WAA1B,IAAyCI,IAAI,CAACa,OAAL,CAAaf,KAAb,KAAuBL,EAAnE,EAAuE;AACrEmB,QAAAA,OAAO,GAAGZ,IAAI,CAACa,OAAL,CAAaf,KAAvB;AACAa,QAAAA,QAAQ,GAAG,GAAX;AACD,OAHD,MAGO,IACLX,IAAI,CAACc,MAAL,CAAYlB,QAAZ,KAAyB,WAAzB,IAAwCI,IAAI,CAACc,MAAL,CAAYhB,KAAZ,KAAsBL,EADzD,EAC6D;AAClE;AACA;AACA;AACA;AACAmB,QAAAA,OAAO,GAAGZ,IAAI,CAACc,MAAL,CAAYhB,KAAtB;AACAa,QAAAA,QAAQ,GAAG,GAAX;AACD,OARM,MAQA;AACL;AACA,eAAOP,QAAQ,EAAf;AACD,OArB0C,CAsB3C;AACA;AACA;;;AACAC,MAAAA,IAAI,CAACU,oBAAL,CACEH,OADF,EACWZ,IADX,EACiBG,MADjB,EACyBQ,QADzB,EACmC,CAACK,GAAD,EAAMC,IAAN,KAAe;AAC9C,YAAGD,GAAH,EAAQ;AACN,iBAAOZ,QAAQ,CAACY,GAAD,CAAf;AACD;;AACD,YAAGC,IAAI,IAAIX,aAAX,EAA0B;AACxBA,UAAAA,aAAa,CAACW,IAAD,CAAb,CAAoBC,IAApB,CAAyBN,OAAzB;AACD,SAFD,MAEO;AACLN,UAAAA,aAAa,CAACW,IAAD,CAAb,GAAsB,CAACL,OAAD,CAAtB;AACD;;AACDR,QAAAA,QAAQ;AACT,OAXH;AAYD,KArCD,EAqCGY,GAAG,IAAIZ,QAAQ,CAACY,GAAD,EAAMV,aAAN,CArClB;AAsCD;;AA7EgD,CAAnD","sourcesContent":["/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst URDNA2015 = require('./URDNA2015');\nconst util = require('./util');\n\nmodule.exports = class URDNA2012 extends URDNA2015 {\n  constructor(options) {\n    super(options);\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    component = util.clone(component);\n    if(key === 'name') {\n      component.value = '_:g';\n    } else {\n      component.value = (component.value === id ? '_:a' : '_:z');\n    }\n    return component;\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer, callback) {\n    const self = this;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = {};\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = self.blankNodeInfo[id].quads;\n\n    // 3) For each quad in quads:\n    self.forEach(quads, (quad, idx, callback) => {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      let position;\n      let related;\n      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if(\n        quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        return callback();\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      self.hashRelatedBlankNode(\n        related, quad, issuer, position, (err, hash) => {\n          if(err) {\n            return callback(err);\n          }\n          if(hash in hashToRelated) {\n            hashToRelated[hash].push(related);\n          } else {\n            hashToRelated[hash] = [related];\n          }\n          callback();\n        });\n    }, err => callback(err, hashToRelated));\n  }\n};\n"]},"metadata":{},"sourceType":"script"}