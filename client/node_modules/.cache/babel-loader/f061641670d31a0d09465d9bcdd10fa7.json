{"ast":null,"code":"/*\n * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString\n} = require('./types');\n\nconst {\n  asArray: _asArray\n} = require('./util');\n\nconst {\n  prependBase\n} = require('./url');\n\nconst JsonLdError = require('./JsonLdError');\n\nconst ResolvedContext = require('./ResolvedContext');\n\nconst MAX_CONTEXT_URLS = 10;\nmodule.exports = class ContextResolver {\n  /**\n   * Creates a ContextResolver.\n   *\n   * @param sharedCache a shared LRU cache with `get` and `set` APIs.\n   */\n  constructor({\n    sharedCache\n  }) {\n    this.perOpCache = new Map();\n    this.sharedCache = sharedCache;\n  }\n\n  async resolve({\n    activeCtx,\n    context,\n    documentLoader,\n    base,\n    cycles = new Set()\n  }) {\n    // process `@context`\n    if (context && _isObject(context) && context['@context']) {\n      context = context['@context'];\n    } // context is one or more contexts\n\n\n    context = _asArray(context); // resolve each context in the array\n\n    const allResolved = [];\n\n    for (const ctx of context) {\n      if (_isString(ctx)) {\n        // see if `ctx` has been resolved before...\n        let resolved = this._get(ctx);\n\n        if (!resolved) {\n          // not resolved yet, resolve\n          resolved = await this._resolveRemoteContext({\n            activeCtx,\n            url: ctx,\n            documentLoader,\n            base,\n            cycles\n          });\n        } // add to output and continue\n\n\n        if (_isArray(resolved)) {\n          allResolved.push(...resolved);\n        } else {\n          allResolved.push(resolved);\n        }\n\n        continue;\n      }\n\n      if (ctx === null) {\n        // handle `null` context, nothing to cache\n        allResolved.push(new ResolvedContext({\n          document: null\n        }));\n        continue;\n      }\n\n      if (!_isObject(ctx)) {\n        _throwInvalidLocalContext(context);\n      } // context is an object, get/create `ResolvedContext` for it\n\n\n      const key = JSON.stringify(ctx);\n\n      let resolved = this._get(key);\n\n      if (!resolved) {\n        // create a new static `ResolvedContext` and cache it\n        resolved = new ResolvedContext({\n          document: ctx\n        });\n\n        this._cacheResolvedContext({\n          key,\n          resolved,\n          tag: 'static'\n        });\n      }\n\n      allResolved.push(resolved);\n    }\n\n    return allResolved;\n  }\n\n  _get(key) {\n    // get key from per operation cache; no `tag` is used with this cache so\n    // any retrieved context will always be the same during a single operation\n    let resolved = this.perOpCache.get(key);\n\n    if (!resolved) {\n      // see if the shared cache has a `static` entry for this URL\n      const tagMap = this.sharedCache.get(key);\n\n      if (tagMap) {\n        resolved = tagMap.get('static');\n\n        if (resolved) {\n          this.perOpCache.set(key, resolved);\n        }\n      }\n    }\n\n    return resolved;\n  }\n\n  _cacheResolvedContext({\n    key,\n    resolved,\n    tag\n  }) {\n    this.perOpCache.set(key, resolved);\n\n    if (tag !== undefined) {\n      let tagMap = this.sharedCache.get(key);\n\n      if (!tagMap) {\n        tagMap = new Map();\n        this.sharedCache.set(key, tagMap);\n      }\n\n      tagMap.set(tag, resolved);\n    }\n\n    return resolved;\n  }\n\n  async _resolveRemoteContext({\n    activeCtx,\n    url,\n    documentLoader,\n    base,\n    cycles\n  }) {\n    // resolve relative URL and fetch context\n    url = prependBase(base, url);\n    const {\n      context,\n      remoteDoc\n    } = await this._fetchContext({\n      activeCtx,\n      url,\n      documentLoader,\n      cycles\n    }); // update base according to remote document and resolve any relative URLs\n\n    base = remoteDoc.documentUrl || url;\n\n    _resolveContextUrls({\n      context,\n      base\n    }); // resolve, cache, and return context\n\n\n    const resolved = await this.resolve({\n      activeCtx,\n      context,\n      documentLoader,\n      base,\n      cycles\n    });\n\n    this._cacheResolvedContext({\n      key: url,\n      resolved,\n      tag: remoteDoc.tag\n    });\n\n    return resolved;\n  }\n\n  async _fetchContext({\n    activeCtx,\n    url,\n    documentLoader,\n    cycles\n  }) {\n    // check for max context URLs fetched during a resolve operation\n    if (cycles.size > MAX_CONTEXT_URLS) {\n      throw new JsonLdError('Maximum number of @context URLs exceeded.', 'jsonld.ContextUrlError', {\n        code: activeCtx.processingMode === 'json-ld-1.0' ? 'loading remote context failed' : 'context overflow',\n        max: MAX_CONTEXT_URLS\n      });\n    } // check for context URL cycle\n    // shortcut to avoid extra work that would eventually hit the max above\n\n\n    if (cycles.has(url)) {\n      throw new JsonLdError('Cyclical @context URLs detected.', 'jsonld.ContextUrlError', {\n        code: activeCtx.processingMode === 'json-ld-1.0' ? 'recursive context inclusion' : 'context overflow',\n        url\n      });\n    } // track cycles\n\n\n    cycles.add(url);\n    let context;\n    let remoteDoc;\n\n    try {\n      remoteDoc = await documentLoader(url);\n      context = remoteDoc.document || null; // parse string context as JSON\n\n      if (_isString(context)) {\n        context = JSON.parse(context);\n      }\n    } catch (e) {\n      throw new JsonLdError('Dereferencing a URL did not result in a valid JSON-LD object. ' + 'Possible causes are an inaccessible URL perhaps due to ' + 'a same-origin policy (ensure the server uses CORS if you are ' + 'using client-side JavaScript), too many redirects, a ' + 'non-JSON response, or more than one HTTP Link Header was ' + 'provided for a remote context.', 'jsonld.InvalidUrl', {\n        code: 'loading remote context failed',\n        url,\n        cause: e\n      });\n    } // ensure ctx is an object\n\n\n    if (!_isObject(context)) {\n      throw new JsonLdError('Dereferencing a URL did not result in a JSON object. The ' + 'response was valid JSON, but it was not a JSON object.', 'jsonld.InvalidUrl', {\n        code: 'invalid remote context',\n        url\n      });\n    } // use empty context if no @context key is present\n\n\n    if (!('@context' in context)) {\n      context = {\n        '@context': {}\n      };\n    } else {\n      context = {\n        '@context': context['@context']\n      };\n    } // append @context URL to context if given\n\n\n    if (remoteDoc.contextUrl) {\n      if (!_isArray(context['@context'])) {\n        context['@context'] = [context['@context']];\n      }\n\n      context['@context'].push(remoteDoc.contextUrl);\n    }\n\n    return {\n      context,\n      remoteDoc\n    };\n  }\n\n};\n\nfunction _throwInvalidLocalContext(ctx) {\n  throw new JsonLdError('Invalid JSON-LD syntax; @context must be an object.', 'jsonld.SyntaxError', {\n    code: 'invalid local context',\n    context: ctx\n  });\n}\n/**\n * Resolve all relative `@context` URLs in the given context by inline\n * replacing them with absolute URLs.\n *\n * @param context the context.\n * @param base the base IRI to use to resolve relative IRIs.\n */\n\n\nfunction _resolveContextUrls({\n  context,\n  base\n}) {\n  if (!context) {\n    return;\n  }\n\n  const ctx = context['@context'];\n\n  if (_isString(ctx)) {\n    context['@context'] = prependBase(base, ctx);\n    return;\n  }\n\n  if (_isArray(ctx)) {\n    for (let i = 0; i < ctx.length; ++i) {\n      const element = ctx[i];\n\n      if (_isString(element)) {\n        ctx[i] = prependBase(base, element);\n        continue;\n      }\n\n      if (_isObject(element)) {\n        _resolveContextUrls({\n          context: {\n            '@context': element\n          },\n          base\n        });\n      }\n    }\n\n    return;\n  }\n\n  if (!_isObject(ctx)) {\n    // no @context URLs can be found in non-object\n    return;\n  } // ctx is an object, resolve any context URLs in terms\n\n\n  for (const term in ctx) {\n    _resolveContextUrls({\n      context: ctx[term],\n      base\n    });\n  }\n}","map":{"version":3,"sources":["/app/node_modules/jsonld/lib/ContextResolver.js"],"names":["isArray","_isArray","isObject","_isObject","isString","_isString","require","asArray","_asArray","prependBase","JsonLdError","ResolvedContext","MAX_CONTEXT_URLS","module","exports","ContextResolver","constructor","sharedCache","perOpCache","Map","resolve","activeCtx","context","documentLoader","base","cycles","Set","allResolved","ctx","resolved","_get","_resolveRemoteContext","url","push","document","_throwInvalidLocalContext","key","JSON","stringify","_cacheResolvedContext","tag","get","tagMap","set","undefined","remoteDoc","_fetchContext","documentUrl","_resolveContextUrls","size","code","processingMode","max","has","add","parse","e","cause","contextUrl","i","length","element","term"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString,\n} = require('./types');\nconst {\n  asArray: _asArray\n} = require('./util');\nconst {prependBase} = require('./url');\nconst JsonLdError = require('./JsonLdError');\nconst ResolvedContext = require('./ResolvedContext');\n\nconst MAX_CONTEXT_URLS = 10;\n\nmodule.exports = class ContextResolver {\n  /**\n   * Creates a ContextResolver.\n   *\n   * @param sharedCache a shared LRU cache with `get` and `set` APIs.\n   */\n  constructor({sharedCache}) {\n    this.perOpCache = new Map();\n    this.sharedCache = sharedCache;\n  }\n\n  async resolve({\n    activeCtx, context, documentLoader, base, cycles = new Set()\n  }) {\n    // process `@context`\n    if(context && _isObject(context) && context['@context']) {\n      context = context['@context'];\n    }\n\n    // context is one or more contexts\n    context = _asArray(context);\n\n    // resolve each context in the array\n    const allResolved = [];\n    for(const ctx of context) {\n      if(_isString(ctx)) {\n        // see if `ctx` has been resolved before...\n        let resolved = this._get(ctx);\n        if(!resolved) {\n          // not resolved yet, resolve\n          resolved = await this._resolveRemoteContext(\n            {activeCtx, url: ctx, documentLoader, base, cycles});\n        }\n\n        // add to output and continue\n        if(_isArray(resolved)) {\n          allResolved.push(...resolved);\n        } else {\n          allResolved.push(resolved);\n        }\n        continue;\n      }\n      if(ctx === null) {\n        // handle `null` context, nothing to cache\n        allResolved.push(new ResolvedContext({document: null}));\n        continue;\n      }\n      if(!_isObject(ctx)) {\n        _throwInvalidLocalContext(context);\n      }\n      // context is an object, get/create `ResolvedContext` for it\n      const key = JSON.stringify(ctx);\n      let resolved = this._get(key);\n      if(!resolved) {\n        // create a new static `ResolvedContext` and cache it\n        resolved = new ResolvedContext({document: ctx});\n        this._cacheResolvedContext({key, resolved, tag: 'static'});\n      }\n      allResolved.push(resolved);\n    }\n\n    return allResolved;\n  }\n\n  _get(key) {\n    // get key from per operation cache; no `tag` is used with this cache so\n    // any retrieved context will always be the same during a single operation\n    let resolved = this.perOpCache.get(key);\n    if(!resolved) {\n      // see if the shared cache has a `static` entry for this URL\n      const tagMap = this.sharedCache.get(key);\n      if(tagMap) {\n        resolved = tagMap.get('static');\n        if(resolved) {\n          this.perOpCache.set(key, resolved);\n        }\n      }\n    }\n    return resolved;\n  }\n\n  _cacheResolvedContext({key, resolved, tag}) {\n    this.perOpCache.set(key, resolved);\n    if(tag !== undefined) {\n      let tagMap = this.sharedCache.get(key);\n      if(!tagMap) {\n        tagMap = new Map();\n        this.sharedCache.set(key, tagMap);\n      }\n      tagMap.set(tag, resolved);\n    }\n    return resolved;\n  }\n\n  async _resolveRemoteContext({activeCtx, url, documentLoader, base, cycles}) {\n    // resolve relative URL and fetch context\n    url = prependBase(base, url);\n    const {context, remoteDoc} = await this._fetchContext(\n      {activeCtx, url, documentLoader, cycles});\n\n    // update base according to remote document and resolve any relative URLs\n    base = remoteDoc.documentUrl || url;\n    _resolveContextUrls({context, base});\n\n    // resolve, cache, and return context\n    const resolved = await this.resolve(\n      {activeCtx, context, documentLoader, base, cycles});\n    this._cacheResolvedContext({key: url, resolved, tag: remoteDoc.tag});\n    return resolved;\n  }\n\n  async _fetchContext({activeCtx, url, documentLoader, cycles}) {\n    // check for max context URLs fetched during a resolve operation\n    if(cycles.size > MAX_CONTEXT_URLS) {\n      throw new JsonLdError(\n        'Maximum number of @context URLs exceeded.',\n        'jsonld.ContextUrlError',\n        {\n          code: activeCtx.processingMode === 'json-ld-1.0' ?\n            'loading remote context failed' :\n            'context overflow',\n          max: MAX_CONTEXT_URLS\n        });\n    }\n\n    // check for context URL cycle\n    // shortcut to avoid extra work that would eventually hit the max above\n    if(cycles.has(url)) {\n      throw new JsonLdError(\n        'Cyclical @context URLs detected.',\n        'jsonld.ContextUrlError',\n        {\n          code: activeCtx.processingMode === 'json-ld-1.0' ?\n            'recursive context inclusion' :\n            'context overflow',\n          url\n        });\n    }\n\n    // track cycles\n    cycles.add(url);\n\n    let context;\n    let remoteDoc;\n\n    try {\n      remoteDoc = await documentLoader(url);\n      context = remoteDoc.document || null;\n      // parse string context as JSON\n      if(_isString(context)) {\n        context = JSON.parse(context);\n      }\n    } catch(e) {\n      throw new JsonLdError(\n        'Dereferencing a URL did not result in a valid JSON-LD object. ' +\n        'Possible causes are an inaccessible URL perhaps due to ' +\n        'a same-origin policy (ensure the server uses CORS if you are ' +\n        'using client-side JavaScript), too many redirects, a ' +\n        'non-JSON response, or more than one HTTP Link Header was ' +\n        'provided for a remote context.',\n        'jsonld.InvalidUrl',\n        {code: 'loading remote context failed', url, cause: e});\n    }\n\n    // ensure ctx is an object\n    if(!_isObject(context)) {\n      throw new JsonLdError(\n        'Dereferencing a URL did not result in a JSON object. The ' +\n        'response was valid JSON, but it was not a JSON object.',\n        'jsonld.InvalidUrl', {code: 'invalid remote context', url});\n    }\n\n    // use empty context if no @context key is present\n    if(!('@context' in context)) {\n      context = {'@context': {}};\n    } else {\n      context = {'@context': context['@context']};\n    }\n\n    // append @context URL to context if given\n    if(remoteDoc.contextUrl) {\n      if(!_isArray(context['@context'])) {\n        context['@context'] = [context['@context']];\n      }\n      context['@context'].push(remoteDoc.contextUrl);\n    }\n\n    return {context, remoteDoc};\n  }\n};\n\nfunction _throwInvalidLocalContext(ctx) {\n  throw new JsonLdError(\n    'Invalid JSON-LD syntax; @context must be an object.',\n    'jsonld.SyntaxError', {\n      code: 'invalid local context', context: ctx\n    });\n}\n\n/**\n * Resolve all relative `@context` URLs in the given context by inline\n * replacing them with absolute URLs.\n *\n * @param context the context.\n * @param base the base IRI to use to resolve relative IRIs.\n */\nfunction _resolveContextUrls({context, base}) {\n  if(!context) {\n    return;\n  }\n\n  const ctx = context['@context'];\n\n  if(_isString(ctx)) {\n    context['@context'] = prependBase(base, ctx);\n    return;\n  }\n\n  if(_isArray(ctx)) {\n    for(let i = 0; i < ctx.length; ++i) {\n      const element = ctx[i];\n      if(_isString(element)) {\n        ctx[i] = prependBase(base, element);\n        continue;\n      }\n      if(_isObject(element)) {\n        _resolveContextUrls({context: {'@context': element}, base});\n      }\n    }\n    return;\n  }\n\n  if(!_isObject(ctx)) {\n    // no @context URLs can be found in non-object\n    return;\n  }\n\n  // ctx is an object, resolve any context URLs in terms\n  for(const term in ctx) {\n    _resolveContextUrls({context: ctx[term], base});\n  }\n}\n"]},"metadata":{},"sourceType":"script"}