{"version":3,"file":"react-final-form-arrays.umd.js","sources":["../src/renderComponent.js","../src/defaultIsEqual.js","../src/useConstant.js","../src/useFieldArray.js","../src/FieldArray.js"],"sourcesContent":["// @flow\nimport * as React from 'react'\nimport type { RenderableProps } from './types'\n\n// shared logic between components that use either render prop,\n// children render function, or component prop\nexport default function renderComponent<T>(\n  props: RenderableProps<T> & T,\n  name: string\n): React.Node {\n  const { render, children, component, ...rest } = props\n  if (component) {\n    return React.createElement(component, { ...rest, children, render }) // inject children back in\n  }\n  if (render) {\n    return render(children === undefined ? rest : { ...rest, children }) // inject children back in\n  }\n  if (typeof children !== 'function') {\n    throw new Error(\n      `Must specify either a render prop, a render function as children, or a component prop to ${name}`\n    )\n  }\n  return children(rest)\n}\n","// @flow\nconst defaultIsEqual = (aArray: any[], bArray: any[]) =>\n  aArray === bArray ||\n  (Array.isArray(aArray) &&\n    Array.isArray(bArray) &&\n    aArray.length === bArray.length &&\n    !aArray.some((a, index) => a !== bArray[index]))\n\nexport default defaultIsEqual\n","// @flow\nimport React from 'react'\n\n/**\n * A simple hook to create a constant value that lives for\n * the lifetime of the component.\n *\n * Plagiarized from https://github.com/Andarist/use-constant\n *\n * Do NOT reuse this code unless you know what you're doing.\n * Use Andarist's hook; it's more fault tolerant to things like\n * falsy values.\n *\n * @param {Function} init - A function to generate the value\n */\nexport default function useConstant<T>(init: () => T): T {\n  const ref = React.useRef<?T>()\n  if (!ref.current) {\n    ref.current = init()\n  }\n  return ref.current\n}\n","// @flow\nimport { useForm, useField } from 'react-final-form'\nimport { fieldSubscriptionItems, ARRAY_ERROR } from 'final-form'\nimport type { Mutators } from 'final-form-arrays'\nimport type { FieldValidator, FieldSubscription } from 'final-form'\nimport type { FieldArrayRenderProps, UseFieldArrayConfig } from './types'\nimport defaultIsEqual from './defaultIsEqual'\nimport useConstant from './useConstant'\n\nconst all: FieldSubscription = fieldSubscriptionItems.reduce((result, key) => {\n  result[key] = true\n  return result\n}, {})\n\nconst useFieldArray = (\n  name: string,\n  {\n    subscription = all,\n    defaultValue,\n    initialValue,\n    isEqual = defaultIsEqual,\n    validate: validateProp\n  }: UseFieldArrayConfig = {}\n): FieldArrayRenderProps => {\n  const form = useForm('useFieldArray')\n\n  const formMutators: Mutators = form.mutators\n  const hasMutators = !!(formMutators && formMutators.push && formMutators.pop)\n  if (!hasMutators) {\n    throw new Error(\n      'Array mutators not found. You need to provide the mutators from final-form-arrays to your form'\n    )\n  }\n  const mutators = useConstant<Mutators>(() =>\n    // curry the field name onto all mutator calls\n    Object.keys(formMutators).reduce((result, key) => {\n      result[key] = (...args) => formMutators[key](name, ...args)\n      return result\n    }, {})\n  )\n\n  const validate: FieldValidator = useConstant(\n    () => (value, allValues, meta) => {\n      if (!validateProp) return undefined\n      const error = validateProp(value, allValues, meta)\n      if (!error || Array.isArray(error)) {\n        return error\n      } else {\n        const arrayError = []\n        // gross, but we have to set a string key on the array\n        ;((arrayError: any): Object)[ARRAY_ERROR] = error\n        return arrayError\n      }\n    }\n  )\n\n  const {\n    meta: { length, ...meta },\n    input,\n    ...fieldState\n  } = useField(name, {\n    subscription: { ...subscription, length: true },\n    defaultValue,\n    initialValue,\n    isEqual,\n    validate,\n    format: v => v\n  })\n\n  const forEach = (iterator: (name: string, index: number) => void): void => {\n    // required || for Flow, but results in uncovered line in Jest/Istanbul\n    // istanbul ignore next\n    const len = length || 0\n    for (let i = 0; i < len; i++) {\n      iterator(`${name}[${i}]`, i)\n    }\n  }\n\n  const map = (iterator: (name: string, index: number) => any): any[] => {\n    // required || for Flow, but results in uncovered line in Jest/Istanbul\n    // istanbul ignore next\n    const len = length || 0\n    const results: any[] = []\n    for (let i = 0; i < len; i++) {\n      results.push(iterator(`${name}[${i}]`, i))\n    }\n    return results\n  }\n\n  return {\n    fields: {\n      name,\n      forEach,\n      length: length || 0,\n      map,\n      ...mutators,\n      ...fieldState,\n      value: input.value\n    },\n    meta\n  }\n}\n\nexport default useFieldArray\n","// @flow\nimport { version as ffVersion } from 'final-form'\nimport { version as rffVersion } from 'react-final-form'\nimport type { FieldArrayProps } from './types'\nimport renderComponent from './renderComponent'\nimport useFieldArray from './useFieldArray'\nimport { version } from '../package.json'\n\nexport { version }\n\nconst versions = {\n  'final-form': ffVersion,\n  'react-final-form': rffVersion,\n  'react-final-form-arrays': version\n}\n\nconst FieldArray = ({\n  name,\n  subscription,\n  defaultValue,\n  initialValue,\n  isEqual,\n  validate,\n  ...rest\n}: FieldArrayProps) => {\n  const { fields, meta } = useFieldArray(name, {\n    subscription,\n    defaultValue,\n    initialValue,\n    isEqual,\n    validate\n  })\n\n  return renderComponent(\n    {\n      fields,\n      meta: {\n        ...meta,\n        __versions: versions\n      },\n      ...rest\n    },\n    `FieldArray(${name})`\n  )\n}\n\nexport default FieldArray\n"],"names":["renderComponent","props","name","render","children","component","rest","React","undefined","Error","defaultIsEqual","aArray","bArray","Array","isArray","length","some","a","index","useConstant","init","ref","useRef","current","all","fieldSubscriptionItems","reduce","result","key","useFieldArray","subscription","defaultValue","initialValue","isEqual","validateProp","validate","form","useForm","formMutators","mutators","hasMutators","push","pop","Object","keys","args","value","allValues","meta","error","arrayError","ARRAY_ERROR","useField","format","v","input","fieldState","forEach","iterator","len","i","map","results","fields","versions","ffVersion","rffVersion","version","FieldArray","__versions"],"mappings":";;;;;;;;;;;;EAIA;EACA;EACe,SAASA,eAAT,CACbC,KADa,EAEbC,IAFa,EAGD;EAAA,MACJC,MADI,GACqCF,KADrC,CACJE,MADI;EAAA,MACIC,QADJ,GACqCH,KADrC,CACIG,QADJ;EAAA,MACcC,SADd,GACqCJ,KADrC,CACcI,SADd;EAAA,MAC4BC,IAD5B,qDACqCL,KADrC;;EAEZ,MAAII,SAAJ,EAAe;EACb,wBAAOE,mBAAA,CAAoBF,SAApB,mCAAoCC,IAApC;EAA0CF,MAAAA,QAAQ,EAARA,QAA1C;EAAoDD,MAAAA,MAAM,EAANA;EAApD,OAAP,CADa;EAEd;;EACD,MAAIA,MAAJ,EAAY;EACV,WAAOA,MAAM,CAACC,QAAQ,KAAKI,SAAb,GAAyBF,IAAzB,oCAAqCA,IAArC;EAA2CF,MAAAA,QAAQ,EAARA;EAA3C,MAAD,CAAb,CADU;EAEX;;EACD,MAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;EAClC,UAAM,IAAIK,KAAJ,+FACwFP,IADxF,CAAN;EAGD;;EACD,SAAOE,QAAQ,CAACE,IAAD,CAAf;EACD;;ECtBD,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAAgBC,MAAhB;EAAA,SACrBD,MAAM,KAAKC,MAAX,IACCC,KAAK,CAACC,OAAN,CAAcH,MAAd,KACCE,KAAK,CAACC,OAAN,CAAcF,MAAd,CADD,IAECD,MAAM,CAACI,MAAP,KAAkBH,MAAM,CAACG,MAF1B,IAGC,CAACJ,MAAM,CAACK,IAAP,CAAY,UAACC,CAAD,EAAIC,KAAJ;EAAA,WAAcD,CAAC,KAAKL,MAAM,CAACM,KAAD,CAA1B;EAAA,GAAZ,CALkB;EAAA,CAAvB;;ECEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACe,SAASC,WAAT,CAAwBC,IAAxB,EAA0C;EACvD,MAAMC,GAAG,GAAGd,yBAAK,CAACe,MAAN,EAAZ;;EACA,MAAI,CAACD,GAAG,CAACE,OAAT,EAAkB;EAChBF,IAAAA,GAAG,CAACE,OAAJ,GAAcH,IAAI,EAAlB;EACD;;EACD,SAAOC,GAAG,CAACE,OAAX;EACD;;ECZD,IAAMC,GAAsB,GAAGC,gCAAsB,CAACC,MAAvB,CAA8B,UAACC,MAAD,EAASC,GAAT,EAAiB;EAC5ED,EAAAA,MAAM,CAACC,GAAD,CAAN,GAAc,IAAd;EACA,SAAOD,MAAP;EACD,CAH8B,EAG5B,EAH4B,CAA/B;;MAKME,aAAa,GAAG,SAAhBA,aAAgB,CACpB3B,IADoB,SASM;EAAA,gCADD,EACC;EAAA,+BANxB4B,YAMwB;EAAA,MANxBA,YAMwB,kCANTN,GAMS;EAAA,MALxBO,YAKwB,QALxBA,YAKwB;EAAA,MAJxBC,YAIwB,QAJxBA,YAIwB;EAAA,0BAHxBC,OAGwB;EAAA,MAHxBA,OAGwB,6BAHdvB,cAGc;EAAA,MAFdwB,YAEc,QAFxBC,QAEwB;;EAC1B,MAAMC,IAAI,GAAGC,sBAAO,CAAC,eAAD,CAApB;EAEA,MAAMC,YAAsB,GAAGF,IAAI,CAACG,QAApC;EACA,MAAMC,WAAW,GAAG,CAAC,EAAEF,YAAY,IAAIA,YAAY,CAACG,IAA7B,IAAqCH,YAAY,CAACI,GAApD,CAArB;;EACA,MAAI,CAACF,WAAL,EAAkB;EAChB,UAAM,IAAI/B,KAAJ,CACJ,gGADI,CAAN;EAGD;;EACD,MAAM8B,QAAQ,GAAGpB,WAAW,CAAW;EAAA;EAErCwB,MAAAA,MAAM,CAACC,IAAP,CAAYN,YAAZ,EAA0BZ,MAA1B,CAAiC,UAACC,MAAD,EAASC,GAAT,EAAiB;EAChDD,QAAAA,MAAM,CAACC,GAAD,CAAN,GAAc;EAAA,4CAAIiB,IAAJ;EAAIA,YAAAA,IAAJ;EAAA;;EAAA,iBAAaP,YAAY,CAACV,GAAD,CAAZ,OAAAU,YAAY,GAAMpC,IAAN,SAAe2C,IAAf,EAAzB;EAAA,SAAd;;EACA,eAAOlB,MAAP;EACD,OAHD,EAGG,EAHH;EAFqC;EAAA,GAAX,CAA5B;EAQA,MAAMQ,QAAwB,GAAGhB,WAAW,CAC1C;EAAA,WAAM,UAAC2B,KAAD,EAAQC,SAAR,EAAmBC,IAAnB,EAA4B;EAChC,UAAI,CAACd,YAAL,EAAmB,OAAO1B,SAAP;EACnB,UAAMyC,KAAK,GAAGf,YAAY,CAACY,KAAD,EAAQC,SAAR,EAAmBC,IAAnB,CAA1B;;EACA,UAAI,CAACC,KAAD,IAAUpC,KAAK,CAACC,OAAN,CAAcmC,KAAd,CAAd,EAAoC;EAClC,eAAOA,KAAP;EACD,OAFD,MAEO;EACL,YAAMC,UAAU,GAAG,EAAnB;EAAA;EAEGA,QAAAA,UAAF,CAA4BC,qBAA5B,IAA2CF,KAA3C;EACD,eAAOC,UAAP;EACD;EACF,KAXD;EAAA,GAD0C,CAA5C;;EAlB0B,kBAqCtBE,uBAAQ,CAAClD,IAAD,EAAO;EACjB4B,IAAAA,YAAY,mCAAOA,YAAP;EAAqBf,MAAAA,MAAM,EAAE;EAA7B,MADK;EAEjBgB,IAAAA,YAAY,EAAZA,YAFiB;EAGjBC,IAAAA,YAAY,EAAZA,YAHiB;EAIjBC,IAAAA,OAAO,EAAPA,OAJiB;EAKjBE,IAAAA,QAAQ,EAARA,QALiB;EAMjBkB,IAAAA,MAAM,EAAE,gBAAAC,CAAC;EAAA,aAAIA,CAAJ;EAAA;EANQ,GAAP,CArCc;EAAA,iCAkCxBN,IAlCwB;EAAA,MAkChBjC,MAlCgB,kBAkChBA,MAlCgB;EAAA,MAkCLiC,IAlCK;EAAA,MAmCxBO,KAnCwB,aAmCxBA,KAnCwB;EAAA,MAoCrBC,UApCqB;;EA8C1B,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,QAAD,EAA2D;EACzE;EACA;EACA,QAAMC,GAAG,GAAG5C,MAAM,IAAI,CAAtB;;EACA,SAAK,IAAI6C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAApB,EAAyBC,CAAC,EAA1B,EAA8B;EAC5BF,MAAAA,QAAQ,CAAIxD,IAAJ,SAAY0D,CAAZ,QAAkBA,CAAlB,CAAR;EACD;EACF,GAPD;;EASA,MAAMC,GAAG,GAAG,SAANA,GAAM,CAACH,QAAD,EAA2D;EACrE;EACA;EACA,QAAMC,GAAG,GAAG5C,MAAM,IAAI,CAAtB;EACA,QAAM+C,OAAc,GAAG,EAAvB;;EACA,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAApB,EAAyBC,CAAC,EAA1B,EAA8B;EAC5BE,MAAAA,OAAO,CAACrB,IAAR,CAAaiB,QAAQ,CAAIxD,IAAJ,SAAY0D,CAAZ,QAAkBA,CAAlB,CAArB;EACD;;EACD,WAAOE,OAAP;EACD,GATD;;EAWA,SAAO;EACLC,IAAAA,MAAM;EACJ7D,MAAAA,IAAI,EAAJA,IADI;EAEJuD,MAAAA,OAAO,EAAPA,OAFI;EAGJ1C,MAAAA,MAAM,EAAEA,MAAM,IAAI,CAHd;EAIJ8C,MAAAA,GAAG,EAAHA;EAJI,OAKDtB,QALC,EAMDiB,UANC;EAOJV,MAAAA,KAAK,EAAES,KAAK,CAACT;EAPT,MADD;EAULE,IAAAA,IAAI,EAAJA;EAVK,GAAP;EAYD;;;;EC3FD,IAAMgB,QAAQ,GAAG;EACf,gBAAcC,iBADC;EAEf,sBAAoBC,sBAFL;EAGf,6BAA2BC;EAHZ,CAAjB;;MAMMC,UAAU,GAAG,SAAbA,UAAa,OAQI;EAAA,MAPrBlE,IAOqB,QAPrBA,IAOqB;EAAA,MANrB4B,YAMqB,QANrBA,YAMqB;EAAA,MALrBC,YAKqB,QALrBA,YAKqB;EAAA,MAJrBC,YAIqB,QAJrBA,YAIqB;EAAA,MAHrBC,OAGqB,QAHrBA,OAGqB;EAAA,MAFrBE,QAEqB,QAFrBA,QAEqB;EAAA,MADlB7B,IACkB;;EAAA,uBACIuB,aAAa,CAAC3B,IAAD,EAAO;EAC3C4B,IAAAA,YAAY,EAAZA,YAD2C;EAE3CC,IAAAA,YAAY,EAAZA,YAF2C;EAG3CC,IAAAA,YAAY,EAAZA,YAH2C;EAI3CC,IAAAA,OAAO,EAAPA,OAJ2C;EAK3CE,IAAAA,QAAQ,EAARA;EAL2C,GAAP,CADjB;EAAA,MACb4B,MADa,kBACbA,MADa;EAAA,MACLf,IADK,kBACLA,IADK;;EASrB,SAAOhD,eAAe;EAElB+D,IAAAA,MAAM,EAANA,MAFkB;EAGlBf,IAAAA,IAAI,mCACCA,IADD;EAEFqB,MAAAA,UAAU,EAAEL;EAFV;EAHc,KAOf1D,IAPe,mBASNJ,IATM,OAAtB;EAWD;;;;;;;;;;;;"}